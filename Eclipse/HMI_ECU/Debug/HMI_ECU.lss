
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00003f68  00003ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080013c  0080013c  000040d8  2**0
                  ALLOC
  3 .stab         0000333c  00000000  00000000  000040d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011bb  00000000  00000000  00007414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000085cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000870f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000887f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b3b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c160  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c54d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 34       	cpi	r26, 0x43	; 67
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 13 	call	0x26a2	; 0x26a2 <main>
      8a:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e2       	ldi	r26, 0x27	; 39
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 1f 	jmp	0x3ea4	; 0x3ea4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e2       	ldi	r24, 0x27	; 39
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 1f 	jmp	0x3ea4	; 0x3ea4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 46 1f 	jmp	0x3e8c	; 0x3e8c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 62 1f 	jmp	0x3ec4	; 0x3ec4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Calculate_time>:
uint8 g_calc_sec_flag=0;
uint8 counter_error =0;
uint8 return_flag=0;

void Calculate_time(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick ++;
     b4e:	80 91 3c 01 	lds	r24, 0x013C
     b52:	90 91 3d 01 	lds	r25, 0x013D
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 3d 01 	sts	0x013D, r25
     b5c:	80 93 3c 01 	sts	0x013C, r24
	if(g_tick ==1)
	{
		g_calc_sec_flag ++;
		g_tick =0;
	}*/
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <New_Pass>:



void New_Pass()
{
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	c5 5a       	subi	r28, 0xA5	; 165
     b74:	d0 40       	sbci	r29, 0x00	; 0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61

	uint8 key = 0,pass=0,count_pass;
     b80:	fe 01       	movw	r30, r28
     b82:	eb 55       	subi	r30, 0x5B	; 91
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	10 82       	st	Z, r1
     b88:	fe 01       	movw	r30, r28
     b8a:	ec 55       	subi	r30, 0x5C	; 92
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	10 82       	st	Z, r1

	sint32 new_pass = 0, re_pass = 0;
     b90:	fe 01       	movw	r30, r28
     b92:	e1 56       	subi	r30, 0x61	; 97
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	10 82       	st	Z, r1
     b98:	11 82       	std	Z+1, r1	; 0x01
     b9a:	12 82       	std	Z+2, r1	; 0x02
     b9c:	13 82       	std	Z+3, r1	; 0x03
     b9e:	fe 01       	movw	r30, r28
     ba0:	e5 56       	subi	r30, 0x65	; 101
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	10 82       	st	Z, r1
     ba6:	11 82       	std	Z+1, r1	; 0x01
     ba8:	12 82       	std	Z+2, r1	; 0x02
     baa:	13 82       	std	Z+3, r1	; 0x03

	LCD_clearScreen();
     bac:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
     bb0:	20 e6       	ldi	r18, 0x60	; 96
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	a9 01       	movw	r20, r18
     bba:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>

	for(count_pass=0; count_pass<5; count_pass++)
     bbe:	fe 01       	movw	r30, r28
     bc0:	ed 55       	subi	r30, 0x5D	; 93
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	10 82       	st	Z, r1
     bc6:	19 c3       	rjmp	.+1586   	; 0x11fa <New_Pass+0x694>
	{
		key = KEYPAD_getPressedKey();
     bc8:	0e 94 f5 16 	call	0x2dea	; 0x2dea <KEYPAD_getPressedKey>
     bcc:	fe 01       	movw	r30, r28
     bce:	eb 55       	subi	r30, 0x5B	; 91
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	80 83       	st	Z, r24
     bd4:	fe 01       	movw	r30, r28
     bd6:	e9 56       	subi	r30, 0x69	; 105
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a8 e4       	ldi	r26, 0x48	; 72
     be0:	b2 e4       	ldi	r27, 0x42	; 66
     be2:	80 83       	st	Z, r24
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	a2 83       	std	Z+2, r26	; 0x02
     be8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bea:	8e 01       	movw	r16, r28
     bec:	0d 56       	subi	r16, 0x6D	; 109
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	fe 01       	movw	r30, r28
     bf2:	e9 56       	subi	r30, 0x69	; 105
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	4a ef       	ldi	r20, 0xFA	; 250
     c04:	54 e4       	ldi	r21, 0x44	; 68
     c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	f8 01       	movw	r30, r16
     c10:	80 83       	st	Z, r24
     c12:	91 83       	std	Z+1, r25	; 0x01
     c14:	a2 83       	std	Z+2, r26	; 0x02
     c16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c18:	fe 01       	movw	r30, r28
     c1a:	ed 56       	subi	r30, 0x6D	; 109
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	60 81       	ld	r22, Z
     c20:	71 81       	ldd	r23, Z+1	; 0x01
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	93 81       	ldd	r25, Z+3	; 0x03
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e8       	ldi	r20, 0x80	; 128
     c2c:	5f e3       	ldi	r21, 0x3F	; 63
     c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c32:	88 23       	and	r24, r24
     c34:	44 f4       	brge	.+16     	; 0xc46 <New_Pass+0xe0>
		__ticks = 1;
     c36:	fe 01       	movw	r30, r28
     c38:	ef 56       	subi	r30, 0x6F	; 111
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
     c44:	64 c0       	rjmp	.+200    	; 0xd0e <New_Pass+0x1a8>
	else if (__tmp > 65535)
     c46:	fe 01       	movw	r30, r28
     c48:	ed 56       	subi	r30, 0x6D	; 109
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	60 81       	ld	r22, Z
     c4e:	71 81       	ldd	r23, Z+1	; 0x01
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	3f ef       	ldi	r19, 0xFF	; 255
     c58:	4f e7       	ldi	r20, 0x7F	; 127
     c5a:	57 e4       	ldi	r21, 0x47	; 71
     c5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c60:	18 16       	cp	r1, r24
     c62:	0c f0       	brlt	.+2      	; 0xc66 <New_Pass+0x100>
     c64:	43 c0       	rjmp	.+134    	; 0xcec <New_Pass+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c66:	fe 01       	movw	r30, r28
     c68:	e9 56       	subi	r30, 0x69	; 105
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	60 81       	ld	r22, Z
     c6e:	71 81       	ldd	r23, Z+1	; 0x01
     c70:	82 81       	ldd	r24, Z+2	; 0x02
     c72:	93 81       	ldd	r25, Z+3	; 0x03
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e2       	ldi	r20, 0x20	; 32
     c7a:	51 e4       	ldi	r21, 0x41	; 65
     c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	8e 01       	movw	r16, r28
     c86:	0f 56       	subi	r16, 0x6F	; 111
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	bc 01       	movw	r22, r24
     c8c:	cd 01       	movw	r24, r26
     c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	f8 01       	movw	r30, r16
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
     c9c:	1f c0       	rjmp	.+62     	; 0xcdc <New_Pass+0x176>
     c9e:	fe 01       	movw	r30, r28
     ca0:	e1 57       	subi	r30, 0x71	; 113
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	88 ec       	ldi	r24, 0xC8	; 200
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	91 83       	std	Z+1, r25	; 0x01
     caa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cac:	fe 01       	movw	r30, r28
     cae:	e1 57       	subi	r30, 0x71	; 113
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	80 81       	ld	r24, Z
     cb4:	91 81       	ldd	r25, Z+1	; 0x01
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <New_Pass+0x150>
     cba:	fe 01       	movw	r30, r28
     cbc:	e1 57       	subi	r30, 0x71	; 113
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc4:	de 01       	movw	r26, r28
     cc6:	af 56       	subi	r26, 0x6F	; 111
     cc8:	bf 4f       	sbci	r27, 0xFF	; 255
     cca:	fe 01       	movw	r30, r28
     ccc:	ef 56       	subi	r30, 0x6F	; 111
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	9c 93       	st	X, r25
     cda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cdc:	fe 01       	movw	r30, r28
     cde:	ef 56       	subi	r30, 0x6F	; 111
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 81       	ld	r24, Z
     ce4:	91 81       	ldd	r25, Z+1	; 0x01
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	d1 f6       	brne	.-76     	; 0xc9e <New_Pass+0x138>
     cea:	e3 c0       	rjmp	.+454    	; 0xeb2 <New_Pass+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cec:	8e 01       	movw	r16, r28
     cee:	0f 56       	subi	r16, 0x6F	; 111
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
     cf2:	fe 01       	movw	r30, r28
     cf4:	ed 56       	subi	r30, 0x6D	; 109
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	60 81       	ld	r22, Z
     cfa:	71 81       	ldd	r23, Z+1	; 0x01
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	f8 01       	movw	r30, r16
     d0a:	91 83       	std	Z+1, r25	; 0x01
     d0c:	80 83       	st	Z, r24
     d0e:	de 01       	movw	r26, r28
     d10:	a3 57       	subi	r26, 0x73	; 115
     d12:	bf 4f       	sbci	r27, 0xFF	; 255
     d14:	fe 01       	movw	r30, r28
     d16:	ef 56       	subi	r30, 0x6F	; 111
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	11 96       	adiw	r26, 0x01	; 1
     d20:	9c 93       	st	X, r25
     d22:	8e 93       	st	-X, r24
     d24:	fe 01       	movw	r30, r28
     d26:	e3 57       	subi	r30, 0x73	; 115
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <New_Pass+0x1c8>
     d32:	fe 01       	movw	r30, r28
     d34:	e3 57       	subi	r30, 0x73	; 115
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
     d3c:	ba c0       	rjmp	.+372    	; 0xeb2 <New_Pass+0x34c>
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
		{
			key = KEYPAD_getPressedKey();
     d3e:	0e 94 f5 16 	call	0x2dea	; 0x2dea <KEYPAD_getPressedKey>
     d42:	fe 01       	movw	r30, r28
     d44:	eb 55       	subi	r30, 0x5B	; 91
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	80 83       	st	Z, r24
     d4a:	fe 01       	movw	r30, r28
     d4c:	e7 57       	subi	r30, 0x77	; 119
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	a8 e4       	ldi	r26, 0x48	; 72
     d56:	b2 e4       	ldi	r27, 0x42	; 66
     d58:	80 83       	st	Z, r24
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	a2 83       	std	Z+2, r26	; 0x02
     d5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d60:	8e 01       	movw	r16, r28
     d62:	0b 57       	subi	r16, 0x7B	; 123
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	fe 01       	movw	r30, r28
     d68:	e7 57       	subi	r30, 0x77	; 119
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	93 81       	ldd	r25, Z+3	; 0x03
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	4a ef       	ldi	r20, 0xFA	; 250
     d7a:	54 e4       	ldi	r21, 0x44	; 68
     d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	f8 01       	movw	r30, r16
     d86:	80 83       	st	Z, r24
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	a2 83       	std	Z+2, r26	; 0x02
     d8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d8e:	fe 01       	movw	r30, r28
     d90:	eb 57       	subi	r30, 0x7B	; 123
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e8       	ldi	r20, 0x80	; 128
     da2:	5f e3       	ldi	r21, 0x3F	; 63
     da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da8:	88 23       	and	r24, r24
     daa:	44 f4       	brge	.+16     	; 0xdbc <New_Pass+0x256>
		__ticks = 1;
     dac:	fe 01       	movw	r30, r28
     dae:	ed 57       	subi	r30, 0x7D	; 125
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	80 83       	st	Z, r24
     dba:	64 c0       	rjmp	.+200    	; 0xe84 <New_Pass+0x31e>
	else if (__tmp > 65535)
     dbc:	fe 01       	movw	r30, r28
     dbe:	eb 57       	subi	r30, 0x7B	; 123
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	57 e4       	ldi	r21, 0x47	; 71
     dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	0c f0       	brlt	.+2      	; 0xddc <New_Pass+0x276>
     dda:	43 c0       	rjmp	.+134    	; 0xe62 <New_Pass+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ddc:	fe 01       	movw	r30, r28
     dde:	e7 57       	subi	r30, 0x77	; 119
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8e 01       	movw	r16, r28
     dfc:	0d 57       	subi	r16, 0x7D	; 125
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	f8 01       	movw	r30, r16
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	1f c0       	rjmp	.+62     	; 0xe52 <New_Pass+0x2ec>
     e14:	fe 01       	movw	r30, r28
     e16:	ef 57       	subi	r30, 0x7F	; 127
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	88 ec       	ldi	r24, 0xC8	; 200
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
     e22:	fe 01       	movw	r30, r28
     e24:	ef 57       	subi	r30, 0x7F	; 127
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <New_Pass+0x2c6>
     e30:	fe 01       	movw	r30, r28
     e32:	ef 57       	subi	r30, 0x7F	; 127
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	de 01       	movw	r26, r28
     e3c:	ad 57       	subi	r26, 0x7D	; 125
     e3e:	bf 4f       	sbci	r27, 0xFF	; 255
     e40:	fe 01       	movw	r30, r28
     e42:	ed 57       	subi	r30, 0x7D	; 125
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	9c 93       	st	X, r25
     e50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e52:	fe 01       	movw	r30, r28
     e54:	ed 57       	subi	r30, 0x7D	; 125
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	d1 f6       	brne	.-76     	; 0xe14 <New_Pass+0x2ae>
     e60:	28 c0       	rjmp	.+80     	; 0xeb2 <New_Pass+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e62:	8e 01       	movw	r16, r28
     e64:	0d 57       	subi	r16, 0x7D	; 125
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	fe 01       	movw	r30, r28
     e6a:	eb 57       	subi	r30, 0x7B	; 123
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	f8 01       	movw	r30, r16
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
     e84:	de 01       	movw	r26, r28
     e86:	a1 58       	subi	r26, 0x81	; 129
     e88:	bf 4f       	sbci	r27, 0xFF	; 255
     e8a:	fe 01       	movw	r30, r28
     e8c:	ed 57       	subi	r30, 0x7D	; 125
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	9c 93       	st	X, r25
     e98:	8e 93       	st	-X, r24
     e9a:	fe 01       	movw	r30, r28
     e9c:	e1 58       	subi	r30, 0x81	; 129
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <New_Pass+0x33e>
     ea8:	fe 01       	movw	r30, r28
     eaa:	e1 58       	subi	r30, 0x81	; 129
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	80 83       	st	Z, r24
	for(count_pass=0; count_pass<5; count_pass++)
	{
		key = KEYPAD_getPressedKey();
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
     eb2:	fe 01       	movw	r30, r28
     eb4:	eb 55       	subi	r30, 0x5B	; 91
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	80 81       	ld	r24, Z
     eba:	8a 30       	cpi	r24, 0x0A	; 10
     ebc:	08 f0       	brcs	.+2      	; 0xec0 <New_Pass+0x35a>
     ebe:	3f cf       	rjmp	.-386    	; 0xd3e <New_Pass+0x1d8>
		{
			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		LCD_displayStringRowColumn(1,count_pass,"*");
     ec0:	fe 01       	movw	r30, r28
     ec2:	ed 55       	subi	r30, 0x5D	; 93
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	20 e7       	ldi	r18, 0x70	; 112
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	60 81       	ld	r22, Z
     ece:	a9 01       	movw	r20, r18
     ed0:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
     ed4:	fe 01       	movw	r30, r28
     ed6:	e5 58       	subi	r30, 0x85	; 133
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	ac e8       	ldi	r26, 0x8C	; 140
     ee0:	b2 e4       	ldi	r27, 0x42	; 66
     ee2:	80 83       	st	Z, r24
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	a2 83       	std	Z+2, r26	; 0x02
     ee8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eea:	8e 01       	movw	r16, r28
     eec:	09 58       	subi	r16, 0x89	; 137
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	fe 01       	movw	r30, r28
     ef2:	e5 58       	subi	r30, 0x85	; 133
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	4a ef       	ldi	r20, 0xFA	; 250
     f04:	54 e4       	ldi	r21, 0x44	; 68
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	f8 01       	movw	r30, r16
     f10:	80 83       	st	Z, r24
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	a2 83       	std	Z+2, r26	; 0x02
     f16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f18:	fe 01       	movw	r30, r28
     f1a:	e9 58       	subi	r30, 0x89	; 137
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	60 81       	ld	r22, Z
     f20:	71 81       	ldd	r23, Z+1	; 0x01
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	93 81       	ldd	r25, Z+3	; 0x03
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	5f e3       	ldi	r21, 0x3F	; 63
     f2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f32:	88 23       	and	r24, r24
     f34:	44 f4       	brge	.+16     	; 0xf46 <New_Pass+0x3e0>
		__ticks = 1;
     f36:	fe 01       	movw	r30, r28
     f38:	eb 58       	subi	r30, 0x8B	; 139
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
     f44:	64 c0       	rjmp	.+200    	; 0x100e <New_Pass+0x4a8>
	else if (__tmp > 65535)
     f46:	fe 01       	movw	r30, r28
     f48:	e9 58       	subi	r30, 0x89	; 137
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	3f ef       	ldi	r19, 0xFF	; 255
     f58:	4f e7       	ldi	r20, 0x7F	; 127
     f5a:	57 e4       	ldi	r21, 0x47	; 71
     f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f60:	18 16       	cp	r1, r24
     f62:	0c f0       	brlt	.+2      	; 0xf66 <New_Pass+0x400>
     f64:	43 c0       	rjmp	.+134    	; 0xfec <New_Pass+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f66:	fe 01       	movw	r30, r28
     f68:	e5 58       	subi	r30, 0x85	; 133
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	60 81       	ld	r22, Z
     f6e:	71 81       	ldd	r23, Z+1	; 0x01
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	93 81       	ldd	r25, Z+3	; 0x03
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e2       	ldi	r20, 0x20	; 32
     f7a:	51 e4       	ldi	r21, 0x41	; 65
     f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	8e 01       	movw	r16, r28
     f86:	0b 58       	subi	r16, 0x8B	; 139
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	f8 01       	movw	r30, r16
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
     f9c:	1f c0       	rjmp	.+62     	; 0xfdc <New_Pass+0x476>
     f9e:	fe 01       	movw	r30, r28
     fa0:	ed 58       	subi	r30, 0x8D	; 141
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	88 ec       	ldi	r24, 0xC8	; 200
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	fe 01       	movw	r30, r28
     fae:	ed 58       	subi	r30, 0x8D	; 141
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <New_Pass+0x450>
     fba:	fe 01       	movw	r30, r28
     fbc:	ed 58       	subi	r30, 0x8D	; 141
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	de 01       	movw	r26, r28
     fc6:	ab 58       	subi	r26, 0x8B	; 139
     fc8:	bf 4f       	sbci	r27, 0xFF	; 255
     fca:	fe 01       	movw	r30, r28
     fcc:	eb 58       	subi	r30, 0x8B	; 139
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	11 96       	adiw	r26, 0x01	; 1
     fd8:	9c 93       	st	X, r25
     fda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fdc:	fe 01       	movw	r30, r28
     fde:	eb 58       	subi	r30, 0x8B	; 139
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	d1 f6       	brne	.-76     	; 0xf9e <New_Pass+0x438>
     fea:	27 c0       	rjmp	.+78     	; 0x103a <New_Pass+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fec:	8e 01       	movw	r16, r28
     fee:	0b 58       	subi	r16, 0x8B	; 139
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	fe 01       	movw	r30, r28
     ff4:	e9 58       	subi	r30, 0x89	; 137
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	f8 01       	movw	r30, r16
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	80 83       	st	Z, r24
    100e:	de 01       	movw	r26, r28
    1010:	af 58       	subi	r26, 0x8F	; 143
    1012:	bf 4f       	sbci	r27, 0xFF	; 255
    1014:	fe 01       	movw	r30, r28
    1016:	eb 58       	subi	r30, 0x8B	; 139
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	8d 93       	st	X+, r24
    1020:	9c 93       	st	X, r25
    1022:	fe 01       	movw	r30, r28
    1024:	ef 58       	subi	r30, 0x8F	; 143
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <New_Pass+0x4c6>
    1030:	fe 01       	movw	r30, r28
    1032:	ef 58       	subi	r30, 0x8F	; 143
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	80 83       	st	Z, r24
		_delay_ms(70);
		new_pass= new_pass*10 + key;
    103a:	fe 01       	movw	r30, r28
    103c:	e1 56       	subi	r30, 0x61	; 97
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	a2 81       	ldd	r26, Z+2	; 0x02
    1046:	b3 81       	ldd	r27, Z+3	; 0x03
    1048:	2a e0       	ldi	r18, 0x0A	; 10
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__mulsi3>
    1058:	9b 01       	movw	r18, r22
    105a:	ac 01       	movw	r20, r24
    105c:	fe 01       	movw	r30, r28
    105e:	eb 55       	subi	r30, 0x5B	; 91
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	fe 01       	movw	r30, r28
    106e:	e1 56       	subi	r30, 0x61	; 97
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	a4 1f       	adc	r26, r20
    1078:	b5 1f       	adc	r27, r21
    107a:	80 83       	st	Z, r24
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	a2 83       	std	Z+2, r26	; 0x02
    1080:	b3 83       	std	Z+3, r27	; 0x03
    1082:	fe 01       	movw	r30, r28
    1084:	e3 59       	subi	r30, 0x93	; 147
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	aa e7       	ldi	r26, 0x7A	; 122
    108e:	b3 e4       	ldi	r27, 0x43	; 67
    1090:	80 83       	st	Z, r24
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	a2 83       	std	Z+2, r26	; 0x02
    1096:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1098:	8e 01       	movw	r16, r28
    109a:	07 59       	subi	r16, 0x97	; 151
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	fe 01       	movw	r30, r28
    10a0:	e3 59       	subi	r30, 0x93	; 147
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	60 81       	ld	r22, Z
    10a6:	71 81       	ldd	r23, Z+1	; 0x01
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	4a ef       	ldi	r20, 0xFA	; 250
    10b2:	54 e4       	ldi	r21, 0x44	; 68
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	f8 01       	movw	r30, r16
    10be:	80 83       	st	Z, r24
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	a2 83       	std	Z+2, r26	; 0x02
    10c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10c6:	fe 01       	movw	r30, r28
    10c8:	e7 59       	subi	r30, 0x97	; 151
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e8       	ldi	r20, 0x80	; 128
    10da:	5f e3       	ldi	r21, 0x3F	; 63
    10dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	44 f4       	brge	.+16     	; 0x10f4 <New_Pass+0x58e>
		__ticks = 1;
    10e4:	fe 01       	movw	r30, r28
    10e6:	e9 59       	subi	r30, 0x99	; 153
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	80 83       	st	Z, r24
    10f2:	64 c0       	rjmp	.+200    	; 0x11bc <New_Pass+0x656>
	else if (__tmp > 65535)
    10f4:	fe 01       	movw	r30, r28
    10f6:	e7 59       	subi	r30, 0x97	; 151
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	3f ef       	ldi	r19, 0xFF	; 255
    1106:	4f e7       	ldi	r20, 0x7F	; 127
    1108:	57 e4       	ldi	r21, 0x47	; 71
    110a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    110e:	18 16       	cp	r1, r24
    1110:	0c f0       	brlt	.+2      	; 0x1114 <New_Pass+0x5ae>
    1112:	43 c0       	rjmp	.+134    	; 0x119a <New_Pass+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	fe 01       	movw	r30, r28
    1116:	e3 59       	subi	r30, 0x93	; 147
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	60 81       	ld	r22, Z
    111c:	71 81       	ldd	r23, Z+1	; 0x01
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	93 81       	ldd	r25, Z+3	; 0x03
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	8e 01       	movw	r16, r28
    1134:	09 59       	subi	r16, 0x99	; 153
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	f8 01       	movw	r30, r16
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
    114a:	1f c0       	rjmp	.+62     	; 0x118a <New_Pass+0x624>
    114c:	fe 01       	movw	r30, r28
    114e:	eb 59       	subi	r30, 0x9B	; 155
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	88 ec       	ldi	r24, 0xC8	; 200
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	80 83       	st	Z, r24
    115a:	fe 01       	movw	r30, r28
    115c:	eb 59       	subi	r30, 0x9B	; 155
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	80 81       	ld	r24, Z
    1162:	91 81       	ldd	r25, Z+1	; 0x01
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <New_Pass+0x5fe>
    1168:	fe 01       	movw	r30, r28
    116a:	eb 59       	subi	r30, 0x9B	; 155
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1172:	de 01       	movw	r26, r28
    1174:	a9 59       	subi	r26, 0x99	; 153
    1176:	bf 4f       	sbci	r27, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	e9 59       	subi	r30, 0x99	; 153
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	9c 93       	st	X, r25
    1188:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118a:	fe 01       	movw	r30, r28
    118c:	e9 59       	subi	r30, 0x99	; 153
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	d1 f6       	brne	.-76     	; 0x114c <New_Pass+0x5e6>
    1198:	27 c0       	rjmp	.+78     	; 0x11e8 <New_Pass+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119a:	8e 01       	movw	r16, r28
    119c:	09 59       	subi	r16, 0x99	; 153
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	fe 01       	movw	r30, r28
    11a2:	e7 59       	subi	r30, 0x97	; 151
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	60 81       	ld	r22, Z
    11a8:	71 81       	ldd	r23, Z+1	; 0x01
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	f8 01       	movw	r30, r16
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
    11bc:	de 01       	movw	r26, r28
    11be:	ad 59       	subi	r26, 0x9D	; 157
    11c0:	bf 4f       	sbci	r27, 0xFF	; 255
    11c2:	fe 01       	movw	r30, r28
    11c4:	e9 59       	subi	r30, 0x99	; 153
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	80 81       	ld	r24, Z
    11ca:	91 81       	ldd	r25, Z+1	; 0x01
    11cc:	8d 93       	st	X+, r24
    11ce:	9c 93       	st	X, r25
    11d0:	fe 01       	movw	r30, r28
    11d2:	ed 59       	subi	r30, 0x9D	; 157
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <New_Pass+0x674>
    11de:	fe 01       	movw	r30, r28
    11e0:	ed 59       	subi	r30, 0x9D	; 157
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
	sint32 new_pass = 0, re_pass = 0;

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");

	for(count_pass=0; count_pass<5; count_pass++)
    11e8:	de 01       	movw	r26, r28
    11ea:	ad 55       	subi	r26, 0x5D	; 93
    11ec:	bf 4f       	sbci	r27, 0xFF	; 255
    11ee:	fe 01       	movw	r30, r28
    11f0:	ed 55       	subi	r30, 0x5D	; 93
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	8c 93       	st	X, r24
    11fa:	fe 01       	movw	r30, r28
    11fc:	ed 55       	subi	r30, 0x5D	; 93
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 81       	ld	r24, Z
    1202:	85 30       	cpi	r24, 0x05	; 5
    1204:	08 f4       	brcc	.+2      	; 0x1208 <New_Pass+0x6a2>
    1206:	e0 cc       	rjmp	.-1600   	; 0xbc8 <New_Pass+0x62>
		LCD_displayStringRowColumn(1,count_pass,"*");
		_delay_ms(70);
		new_pass= new_pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
    1208:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Press =");
    120c:	22 e7       	ldi	r18, 0x72	; 114
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
    121a:	ba c0       	rjmp	.+372    	; 0x1390 <New_Pass+0x82a>
	while(key!='=')
	{
		key=KEYPAD_getPressedKey();
    121c:	0e 94 f5 16 	call	0x2dea	; 0x2dea <KEYPAD_getPressedKey>
    1220:	fe 01       	movw	r30, r28
    1222:	eb 55       	subi	r30, 0x5B	; 91
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 83       	st	Z, r24
    1228:	fe 01       	movw	r30, r28
    122a:	e1 5a       	subi	r30, 0xA1	; 161
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a8 e4       	ldi	r26, 0x48	; 72
    1234:	b2 e4       	ldi	r27, 0x42	; 66
    1236:	80 83       	st	Z, r24
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	a2 83       	std	Z+2, r26	; 0x02
    123c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123e:	8e 01       	movw	r16, r28
    1240:	05 5a       	subi	r16, 0xA5	; 165
    1242:	1f 4f       	sbci	r17, 0xFF	; 255
    1244:	fe 01       	movw	r30, r28
    1246:	e1 5a       	subi	r30, 0xA1	; 161
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	4a ef       	ldi	r20, 0xFA	; 250
    1258:	54 e4       	ldi	r21, 0x44	; 68
    125a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	f8 01       	movw	r30, r16
    1264:	80 83       	st	Z, r24
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	a2 83       	std	Z+2, r26	; 0x02
    126a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    126c:	fe 01       	movw	r30, r28
    126e:	e5 5a       	subi	r30, 0xA5	; 165
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	44 f4       	brge	.+16     	; 0x129a <New_Pass+0x734>
		__ticks = 1;
    128a:	fe 01       	movw	r30, r28
    128c:	e7 5a       	subi	r30, 0xA7	; 167
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
    1298:	64 c0       	rjmp	.+200    	; 0x1362 <New_Pass+0x7fc>
	else if (__tmp > 65535)
    129a:	fe 01       	movw	r30, r28
    129c:	e5 5a       	subi	r30, 0xA5	; 165
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	57 e4       	ldi	r21, 0x47	; 71
    12b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	0c f0       	brlt	.+2      	; 0x12ba <New_Pass+0x754>
    12b8:	43 c0       	rjmp	.+134    	; 0x1340 <New_Pass+0x7da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	fe 01       	movw	r30, r28
    12bc:	e1 5a       	subi	r30, 0xA1	; 161
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	8e 01       	movw	r16, r28
    12da:	07 5a       	subi	r16, 0xA7	; 167
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	f8 01       	movw	r30, r16
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	80 83       	st	Z, r24
    12f0:	1f c0       	rjmp	.+62     	; 0x1330 <New_Pass+0x7ca>
    12f2:	fe 01       	movw	r30, r28
    12f4:	e9 5a       	subi	r30, 0xA9	; 169
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	88 ec       	ldi	r24, 0xC8	; 200
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	fe 01       	movw	r30, r28
    1302:	e9 5a       	subi	r30, 0xA9	; 169
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <New_Pass+0x7a4>
    130e:	fe 01       	movw	r30, r28
    1310:	e9 5a       	subi	r30, 0xA9	; 169
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	de 01       	movw	r26, r28
    131a:	a7 5a       	subi	r26, 0xA7	; 167
    131c:	bf 4f       	sbci	r27, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	e7 5a       	subi	r30, 0xA7	; 167
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	9c 93       	st	X, r25
    132e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	fe 01       	movw	r30, r28
    1332:	e7 5a       	subi	r30, 0xA7	; 167
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	d1 f6       	brne	.-76     	; 0x12f2 <New_Pass+0x78c>
    133e:	28 c0       	rjmp	.+80     	; 0x1390 <New_Pass+0x82a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	8e 01       	movw	r16, r28
    1342:	07 5a       	subi	r16, 0xA7	; 167
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	fe 01       	movw	r30, r28
    1348:	e5 5a       	subi	r30, 0xA5	; 165
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	f8 01       	movw	r30, r16
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
    1362:	de 01       	movw	r26, r28
    1364:	ab 5a       	subi	r26, 0xAB	; 171
    1366:	bf 4f       	sbci	r27, 0xFF	; 255
    1368:	fe 01       	movw	r30, r28
    136a:	e7 5a       	subi	r30, 0xA7	; 167
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	9c 93       	st	X, r25
    1376:	8e 93       	st	-X, r24
    1378:	fe 01       	movw	r30, r28
    137a:	eb 5a       	subi	r30, 0xAB	; 171
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <New_Pass+0x81c>
    1386:	fe 01       	movw	r30, r28
    1388:	eb 5a       	subi	r30, 0xAB	; 171
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
		new_pass= new_pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Press =");
	while(key!='=')
    1390:	fe 01       	movw	r30, r28
    1392:	eb 55       	subi	r30, 0x5B	; 91
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	80 81       	ld	r24, Z
    1398:	8d 33       	cpi	r24, 0x3D	; 61
    139a:	09 f0       	breq	.+2      	; 0x139e <New_Pass+0x838>
    139c:	3f cf       	rjmp	.-386    	; 0x121c <New_Pass+0x6b6>
		key=KEYPAD_getPressedKey();
		_delay_ms(50);
	}


	LCD_clearScreen();
    139e:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Re-enter The");
    13a2:	2e e7       	ldi	r18, 0x7E	; 126
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Same Pass:");
    13b0:	2f e8       	ldi	r18, 0x8F	; 143
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>

	for(count_pass=0; count_pass<5; count_pass++)
    13be:	fe 01       	movw	r30, r28
    13c0:	ed 55       	subi	r30, 0x5D	; 93
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	10 82       	st	Z, r1
    13c6:	6b c2       	rjmp	.+1238   	; 0x189e <New_Pass+0xd38>
	{
		key = KEYPAD_getPressedKey();
    13c8:	0e 94 f5 16 	call	0x2dea	; 0x2dea <KEYPAD_getPressedKey>
    13cc:	fe 01       	movw	r30, r28
    13ce:	eb 55       	subi	r30, 0x5B	; 91
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 83       	st	Z, r24
    13d4:	fe 01       	movw	r30, r28
    13d6:	ef 5a       	subi	r30, 0xAF	; 175
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a8 e4       	ldi	r26, 0x48	; 72
    13e0:	b2 e4       	ldi	r27, 0x42	; 66
    13e2:	80 83       	st	Z, r24
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	a2 83       	std	Z+2, r26	; 0x02
    13e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ea:	8e 01       	movw	r16, r28
    13ec:	03 5b       	subi	r16, 0xB3	; 179
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	fe 01       	movw	r30, r28
    13f2:	ef 5a       	subi	r30, 0xAF	; 175
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	60 81       	ld	r22, Z
    13f8:	71 81       	ldd	r23, Z+1	; 0x01
    13fa:	82 81       	ldd	r24, Z+2	; 0x02
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4a ef       	ldi	r20, 0xFA	; 250
    1404:	54 e4       	ldi	r21, 0x44	; 68
    1406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	f8 01       	movw	r30, r16
    1410:	80 83       	st	Z, r24
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	a2 83       	std	Z+2, r26	; 0x02
    1416:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1418:	fe 01       	movw	r30, r28
    141a:	e3 5b       	subi	r30, 0xB3	; 179
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e8       	ldi	r20, 0x80	; 128
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1432:	88 23       	and	r24, r24
    1434:	44 f4       	brge	.+16     	; 0x1446 <New_Pass+0x8e0>
		__ticks = 1;
    1436:	fe 01       	movw	r30, r28
    1438:	e5 5b       	subi	r30, 0xB5	; 181
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	80 83       	st	Z, r24
    1444:	64 c0       	rjmp	.+200    	; 0x150e <New_Pass+0x9a8>
	else if (__tmp > 65535)
    1446:	fe 01       	movw	r30, r28
    1448:	e3 5b       	subi	r30, 0xB3	; 179
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	0c f0       	brlt	.+2      	; 0x1466 <New_Pass+0x900>
    1464:	43 c0       	rjmp	.+134    	; 0x14ec <New_Pass+0x986>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	fe 01       	movw	r30, r28
    1468:	ef 5a       	subi	r30, 0xAF	; 175
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e2       	ldi	r20, 0x20	; 32
    147a:	51 e4       	ldi	r21, 0x41	; 65
    147c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	8e 01       	movw	r16, r28
    1486:	05 5b       	subi	r16, 0xB5	; 181
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	f8 01       	movw	r30, r16
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	80 83       	st	Z, r24
    149c:	1f c0       	rjmp	.+62     	; 0x14dc <New_Pass+0x976>
    149e:	fe 01       	movw	r30, r28
    14a0:	e7 5b       	subi	r30, 0xB7	; 183
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	88 ec       	ldi	r24, 0xC8	; 200
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
    14ac:	fe 01       	movw	r30, r28
    14ae:	e7 5b       	subi	r30, 0xB7	; 183
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <New_Pass+0x950>
    14ba:	fe 01       	movw	r30, r28
    14bc:	e7 5b       	subi	r30, 0xB7	; 183
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	de 01       	movw	r26, r28
    14c6:	a5 5b       	subi	r26, 0xB5	; 181
    14c8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ca:	fe 01       	movw	r30, r28
    14cc:	e5 5b       	subi	r30, 0xB5	; 181
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	9c 93       	st	X, r25
    14da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	fe 01       	movw	r30, r28
    14de:	e5 5b       	subi	r30, 0xB5	; 181
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	d1 f6       	brne	.-76     	; 0x149e <New_Pass+0x938>
    14ea:	b4 c0       	rjmp	.+360    	; 0x1654 <New_Pass+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ec:	8e 01       	movw	r16, r28
    14ee:	05 5b       	subi	r16, 0xB5	; 181
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	fe 01       	movw	r30, r28
    14f4:	e3 5b       	subi	r30, 0xB3	; 179
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	f8 01       	movw	r30, r16
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24
    150e:	de 01       	movw	r26, r28
    1510:	a9 5b       	subi	r26, 0xB9	; 185
    1512:	bf 4f       	sbci	r27, 0xFF	; 255
    1514:	fe 01       	movw	r30, r28
    1516:	e5 5b       	subi	r30, 0xB5	; 181
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	9c 93       	st	X, r25
    1522:	8e 93       	st	-X, r24
    1524:	fe 01       	movw	r30, r28
    1526:	e9 5b       	subi	r30, 0xB9	; 185
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <New_Pass+0x9c8>
    1532:	fe 01       	movw	r30, r28
    1534:	e9 5b       	subi	r30, 0xB9	; 185
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	80 83       	st	Z, r24
    153c:	8b c0       	rjmp	.+278    	; 0x1654 <New_Pass+0xaee>
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
		{
			key = KEYPAD_getPressedKey();
    153e:	0e 94 f5 16 	call	0x2dea	; 0x2dea <KEYPAD_getPressedKey>
    1542:	fe 01       	movw	r30, r28
    1544:	eb 55       	subi	r30, 0x5B	; 91
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	80 83       	st	Z, r24
    154a:	fe 01       	movw	r30, r28
    154c:	ed 5b       	subi	r30, 0xBD	; 189
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a8 e4       	ldi	r26, 0x48	; 72
    1556:	b2 e4       	ldi	r27, 0x42	; 66
    1558:	80 83       	st	Z, r24
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	a2 83       	std	Z+2, r26	; 0x02
    155e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1560:	8e 01       	movw	r16, r28
    1562:	01 5c       	subi	r16, 0xC1	; 193
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	fe 01       	movw	r30, r28
    1568:	ed 5b       	subi	r30, 0xBD	; 189
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
    1570:	82 81       	ldd	r24, Z+2	; 0x02
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	4a ef       	ldi	r20, 0xFA	; 250
    157a:	54 e4       	ldi	r21, 0x44	; 68
    157c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	f8 01       	movw	r30, r16
    1586:	80 83       	st	Z, r24
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	a2 83       	std	Z+2, r26	; 0x02
    158c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    158e:	fe 01       	movw	r30, r28
    1590:	ff 96       	adiw	r30, 0x3f	; 63
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <New_Pass+0xa4e>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9e af       	std	Y+62, r25	; 0x3e
    15b0:	8d af       	std	Y+61, r24	; 0x3d
    15b2:	46 c0       	rjmp	.+140    	; 0x1640 <New_Pass+0xada>
	else if (__tmp > 65535)
    15b4:	fe 01       	movw	r30, r28
    15b6:	ff 96       	adiw	r30, 0x3f	; 63
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	64 f5       	brge	.+88     	; 0x1628 <New_Pass+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	fe 01       	movw	r30, r28
    15d2:	ed 5b       	subi	r30, 0xBD	; 189
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e af       	std	Y+62, r25	; 0x3e
    15fc:	8d af       	std	Y+61, r24	; 0x3d
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <New_Pass+0xab8>
    1600:	88 ec       	ldi	r24, 0xC8	; 200
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9c af       	std	Y+60, r25	; 0x3c
    1606:	8b af       	std	Y+59, r24	; 0x3b
    1608:	8b ad       	ldd	r24, Y+59	; 0x3b
    160a:	9c ad       	ldd	r25, Y+60	; 0x3c
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <New_Pass+0xaa6>
    1610:	9c af       	std	Y+60, r25	; 0x3c
    1612:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8d ad       	ldd	r24, Y+61	; 0x3d
    1616:	9e ad       	ldd	r25, Y+62	; 0x3e
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	9e af       	std	Y+62, r25	; 0x3e
    161c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1620:	9e ad       	ldd	r25, Y+62	; 0x3e
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <New_Pass+0xa9a>
    1626:	16 c0       	rjmp	.+44     	; 0x1654 <New_Pass+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	fe 01       	movw	r30, r28
    162a:	ff 96       	adiw	r30, 0x3f	; 63
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9e af       	std	Y+62, r25	; 0x3e
    163e:	8d af       	std	Y+61, r24	; 0x3d
    1640:	8d ad       	ldd	r24, Y+61	; 0x3d
    1642:	9e ad       	ldd	r25, Y+62	; 0x3e
    1644:	9a af       	std	Y+58, r25	; 0x3a
    1646:	89 af       	std	Y+57, r24	; 0x39
    1648:	89 ad       	ldd	r24, Y+57	; 0x39
    164a:	9a ad       	ldd	r25, Y+58	; 0x3a
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <New_Pass+0xae6>
    1650:	9a af       	std	Y+58, r25	; 0x3a
    1652:	89 af       	std	Y+57, r24	; 0x39
	for(count_pass=0; count_pass<5; count_pass++)
	{
		key = KEYPAD_getPressedKey();
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
    1654:	fe 01       	movw	r30, r28
    1656:	eb 55       	subi	r30, 0x5B	; 91
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	8a 30       	cpi	r24, 0x0A	; 10
    165e:	08 f0       	brcs	.+2      	; 0x1662 <New_Pass+0xafc>
    1660:	6e cf       	rjmp	.-292    	; 0x153e <New_Pass+0x9d8>
		{
			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		LCD_displayStringRowColumn(1,count_pass+10,"*");
    1662:	fe 01       	movw	r30, r28
    1664:	ed 55       	subi	r30, 0x5D	; 93
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 81       	ld	r24, Z
    166a:	98 2f       	mov	r25, r24
    166c:	96 5f       	subi	r25, 0xF6	; 246
    166e:	20 e7       	ldi	r18, 0x70	; 112
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	69 2f       	mov	r22, r25
    1676:	a9 01       	movw	r20, r18
    1678:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	ac e8       	ldi	r26, 0x8C	; 140
    1682:	b2 e4       	ldi	r27, 0x42	; 66
    1684:	8d ab       	std	Y+53, r24	; 0x35
    1686:	9e ab       	std	Y+54, r25	; 0x36
    1688:	af ab       	std	Y+55, r26	; 0x37
    168a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168c:	6d a9       	ldd	r22, Y+53	; 0x35
    168e:	7e a9       	ldd	r23, Y+54	; 0x36
    1690:	8f a9       	ldd	r24, Y+55	; 0x37
    1692:	98 ad       	ldd	r25, Y+56	; 0x38
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a ef       	ldi	r20, 0xFA	; 250
    169a:	54 e4       	ldi	r21, 0x44	; 68
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	89 ab       	std	Y+49, r24	; 0x31
    16a6:	9a ab       	std	Y+50, r25	; 0x32
    16a8:	ab ab       	std	Y+51, r26	; 0x33
    16aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16ac:	69 a9       	ldd	r22, Y+49	; 0x31
    16ae:	7a a9       	ldd	r23, Y+50	; 0x32
    16b0:	8b a9       	ldd	r24, Y+51	; 0x33
    16b2:	9c a9       	ldd	r25, Y+52	; 0x34
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e8       	ldi	r20, 0x80	; 128
    16ba:	5f e3       	ldi	r21, 0x3F	; 63
    16bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c0:	88 23       	and	r24, r24
    16c2:	2c f4       	brge	.+10     	; 0x16ce <New_Pass+0xb68>
		__ticks = 1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	98 ab       	std	Y+48, r25	; 0x30
    16ca:	8f a7       	std	Y+47, r24	; 0x2f
    16cc:	3f c0       	rjmp	.+126    	; 0x174c <New_Pass+0xbe6>
	else if (__tmp > 65535)
    16ce:	69 a9       	ldd	r22, Y+49	; 0x31
    16d0:	7a a9       	ldd	r23, Y+50	; 0x32
    16d2:	8b a9       	ldd	r24, Y+51	; 0x33
    16d4:	9c a9       	ldd	r25, Y+52	; 0x34
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	4c f5       	brge	.+82     	; 0x1738 <New_Pass+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e6:	6d a9       	ldd	r22, Y+53	; 0x35
    16e8:	7e a9       	ldd	r23, Y+54	; 0x36
    16ea:	8f a9       	ldd	r24, Y+55	; 0x37
    16ec:	98 ad       	ldd	r25, Y+56	; 0x38
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	98 ab       	std	Y+48, r25	; 0x30
    170c:	8f a7       	std	Y+47, r24	; 0x2f
    170e:	0f c0       	rjmp	.+30     	; 0x172e <New_Pass+0xbc8>
    1710:	88 ec       	ldi	r24, 0xC8	; 200
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9e a7       	std	Y+46, r25	; 0x2e
    1716:	8d a7       	std	Y+45, r24	; 0x2d
    1718:	8d a5       	ldd	r24, Y+45	; 0x2d
    171a:	9e a5       	ldd	r25, Y+46	; 0x2e
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <New_Pass+0xbb6>
    1720:	9e a7       	std	Y+46, r25	; 0x2e
    1722:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	8f a5       	ldd	r24, Y+47	; 0x2f
    1726:	98 a9       	ldd	r25, Y+48	; 0x30
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	98 ab       	std	Y+48, r25	; 0x30
    172c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1730:	98 a9       	ldd	r25, Y+48	; 0x30
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	69 f7       	brne	.-38     	; 0x1710 <New_Pass+0xbaa>
    1736:	14 c0       	rjmp	.+40     	; 0x1760 <New_Pass+0xbfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	69 a9       	ldd	r22, Y+49	; 0x31
    173a:	7a a9       	ldd	r23, Y+50	; 0x32
    173c:	8b a9       	ldd	r24, Y+51	; 0x33
    173e:	9c a9       	ldd	r25, Y+52	; 0x34
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	98 ab       	std	Y+48, r25	; 0x30
    174a:	8f a7       	std	Y+47, r24	; 0x2f
    174c:	8f a5       	ldd	r24, Y+47	; 0x2f
    174e:	98 a9       	ldd	r25, Y+48	; 0x30
    1750:	9c a7       	std	Y+44, r25	; 0x2c
    1752:	8b a7       	std	Y+43, r24	; 0x2b
    1754:	8b a5       	ldd	r24, Y+43	; 0x2b
    1756:	9c a5       	ldd	r25, Y+44	; 0x2c
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <New_Pass+0xbf2>
    175c:	9c a7       	std	Y+44, r25	; 0x2c
    175e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(70);
		re_pass= re_pass*10 + key;
    1760:	fe 01       	movw	r30, r28
    1762:	e5 56       	subi	r30, 0x65	; 101
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	a2 81       	ldd	r26, Z+2	; 0x02
    176c:	b3 81       	ldd	r27, Z+3	; 0x03
    176e:	2a e0       	ldi	r18, 0x0A	; 10
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	bc 01       	movw	r22, r24
    1778:	cd 01       	movw	r24, r26
    177a:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__mulsi3>
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	fe 01       	movw	r30, r28
    1784:	eb 55       	subi	r30, 0x5B	; 91
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e0       	ldi	r26, 0x00	; 0
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	fe 01       	movw	r30, r28
    1794:	e5 56       	subi	r30, 0x65	; 101
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	82 0f       	add	r24, r18
    179a:	93 1f       	adc	r25, r19
    179c:	a4 1f       	adc	r26, r20
    179e:	b5 1f       	adc	r27, r21
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	aa e7       	ldi	r26, 0x7A	; 122
    17ae:	b3 e4       	ldi	r27, 0x43	; 67
    17b0:	8f a3       	std	Y+39, r24	; 0x27
    17b2:	98 a7       	std	Y+40, r25	; 0x28
    17b4:	a9 a7       	std	Y+41, r26	; 0x29
    17b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b8:	6f a1       	ldd	r22, Y+39	; 0x27
    17ba:	78 a5       	ldd	r23, Y+40	; 0x28
    17bc:	89 a5       	ldd	r24, Y+41	; 0x29
    17be:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a ef       	ldi	r20, 0xFA	; 250
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	8b a3       	std	Y+35, r24	; 0x23
    17d2:	9c a3       	std	Y+36, r25	; 0x24
    17d4:	ad a3       	std	Y+37, r26	; 0x25
    17d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17d8:	6b a1       	ldd	r22, Y+35	; 0x23
    17da:	7c a1       	ldd	r23, Y+36	; 0x24
    17dc:	8d a1       	ldd	r24, Y+37	; 0x25
    17de:	9e a1       	ldd	r25, Y+38	; 0x26
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	2c f4       	brge	.+10     	; 0x17fa <New_Pass+0xc94>
		__ticks = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9a a3       	std	Y+34, r25	; 0x22
    17f6:	89 a3       	std	Y+33, r24	; 0x21
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <New_Pass+0xd12>
	else if (__tmp > 65535)
    17fa:	6b a1       	ldd	r22, Y+35	; 0x23
    17fc:	7c a1       	ldd	r23, Y+36	; 0x24
    17fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1800:	9e a1       	ldd	r25, Y+38	; 0x26
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180e:	18 16       	cp	r1, r24
    1810:	4c f5       	brge	.+82     	; 0x1864 <New_Pass+0xcfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	6f a1       	ldd	r22, Y+39	; 0x27
    1814:	78 a5       	ldd	r23, Y+40	; 0x28
    1816:	89 a5       	ldd	r24, Y+41	; 0x29
    1818:	9a a5       	ldd	r25, Y+42	; 0x2a
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9a a3       	std	Y+34, r25	; 0x22
    1838:	89 a3       	std	Y+33, r24	; 0x21
    183a:	0f c0       	rjmp	.+30     	; 0x185a <New_Pass+0xcf4>
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	98 a3       	std	Y+32, r25	; 0x20
    1842:	8f 8f       	std	Y+31, r24	; 0x1f
    1844:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1846:	98 a1       	ldd	r25, Y+32	; 0x20
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <New_Pass+0xce2>
    184c:	98 a3       	std	Y+32, r25	; 0x20
    184e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	89 a1       	ldd	r24, Y+33	; 0x21
    1852:	9a a1       	ldd	r25, Y+34	; 0x22
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	9a a3       	std	Y+34, r25	; 0x22
    1858:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	89 a1       	ldd	r24, Y+33	; 0x21
    185c:	9a a1       	ldd	r25, Y+34	; 0x22
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	69 f7       	brne	.-38     	; 0x183c <New_Pass+0xcd6>
    1862:	14 c0       	rjmp	.+40     	; 0x188c <New_Pass+0xd26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1864:	6b a1       	ldd	r22, Y+35	; 0x23
    1866:	7c a1       	ldd	r23, Y+36	; 0x24
    1868:	8d a1       	ldd	r24, Y+37	; 0x25
    186a:	9e a1       	ldd	r25, Y+38	; 0x26
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9a a3       	std	Y+34, r25	; 0x22
    1876:	89 a3       	std	Y+33, r24	; 0x21
    1878:	89 a1       	ldd	r24, Y+33	; 0x21
    187a:	9a a1       	ldd	r25, Y+34	; 0x22
    187c:	9e 8f       	std	Y+30, r25	; 0x1e
    187e:	8d 8f       	std	Y+29, r24	; 0x1d
    1880:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1882:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <New_Pass+0xd1e>
    1888:	9e 8f       	std	Y+30, r25	; 0x1e
    188a:	8d 8f       	std	Y+29, r24	; 0x1d

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Re-enter The");
	LCD_displayStringRowColumn(1,0,"Same Pass:");

	for(count_pass=0; count_pass<5; count_pass++)
    188c:	de 01       	movw	r26, r28
    188e:	ad 55       	subi	r26, 0x5D	; 93
    1890:	bf 4f       	sbci	r27, 0xFF	; 255
    1892:	fe 01       	movw	r30, r28
    1894:	ed 55       	subi	r30, 0x5D	; 93
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	8f 5f       	subi	r24, 0xFF	; 255
    189c:	8c 93       	st	X, r24
    189e:	fe 01       	movw	r30, r28
    18a0:	ed 55       	subi	r30, 0x5D	; 93
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 81       	ld	r24, Z
    18a6:	85 30       	cpi	r24, 0x05	; 5
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <New_Pass+0xd46>
    18aa:	8e cd       	rjmp	.-1252   	; 0x13c8 <New_Pass+0x862>
		LCD_displayStringRowColumn(1,count_pass+10,"*");
		_delay_ms(70);
		re_pass= re_pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
    18ac:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Press =");
    18b0:	22 e7       	ldi	r18, 0x72	; 114
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	a9 01       	movw	r20, r18
    18ba:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
    18be:	78 c0       	rjmp	.+240    	; 0x19b0 <New_Pass+0xe4a>
	while(key!='=')
	{
		key=KEYPAD_getPressedKey();
    18c0:	0e 94 f5 16 	call	0x2dea	; 0x2dea <KEYPAD_getPressedKey>
    18c4:	fe 01       	movw	r30, r28
    18c6:	eb 55       	subi	r30, 0x5B	; 91
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 83       	st	Z, r24
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a8 e4       	ldi	r26, 0x48	; 72
    18d2:	b2 e4       	ldi	r27, 0x42	; 66
    18d4:	89 8f       	std	Y+25, r24	; 0x19
    18d6:	9a 8f       	std	Y+26, r25	; 0x1a
    18d8:	ab 8f       	std	Y+27, r26	; 0x1b
    18da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	69 8d       	ldd	r22, Y+25	; 0x19
    18de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8d 8b       	std	Y+21, r24	; 0x15
    18f6:	9e 8b       	std	Y+22, r25	; 0x16
    18f8:	af 8b       	std	Y+23, r26	; 0x17
    18fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18fc:	6d 89       	ldd	r22, Y+21	; 0x15
    18fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1900:	8f 89       	ldd	r24, Y+23	; 0x17
    1902:	98 8d       	ldd	r25, Y+24	; 0x18
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <New_Pass+0xdb8>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9c 8b       	std	Y+20, r25	; 0x14
    191a:	8b 8b       	std	Y+19, r24	; 0x13
    191c:	3f c0       	rjmp	.+126    	; 0x199c <New_Pass+0xe36>
	else if (__tmp > 65535)
    191e:	6d 89       	ldd	r22, Y+21	; 0x15
    1920:	7e 89       	ldd	r23, Y+22	; 0x16
    1922:	8f 89       	ldd	r24, Y+23	; 0x17
    1924:	98 8d       	ldd	r25, Y+24	; 0x18
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <New_Pass+0xe22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	69 8d       	ldd	r22, Y+25	; 0x19
    1938:	7a 8d       	ldd	r23, Y+26	; 0x1a
    193a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9c 8b       	std	Y+20, r25	; 0x14
    195c:	8b 8b       	std	Y+19, r24	; 0x13
    195e:	0f c0       	rjmp	.+30     	; 0x197e <New_Pass+0xe18>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9a 8b       	std	Y+18, r25	; 0x12
    1966:	89 8b       	std	Y+17, r24	; 0x11
    1968:	89 89       	ldd	r24, Y+17	; 0x11
    196a:	9a 89       	ldd	r25, Y+18	; 0x12
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <New_Pass+0xe06>
    1970:	9a 8b       	std	Y+18, r25	; 0x12
    1972:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9c 8b       	std	Y+20, r25	; 0x14
    197c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8b 89       	ldd	r24, Y+19	; 0x13
    1980:	9c 89       	ldd	r25, Y+20	; 0x14
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <New_Pass+0xdfa>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <New_Pass+0xe4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	6d 89       	ldd	r22, Y+21	; 0x15
    198a:	7e 89       	ldd	r23, Y+22	; 0x16
    198c:	8f 89       	ldd	r24, Y+23	; 0x17
    198e:	98 8d       	ldd	r25, Y+24	; 0x18
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9c 8b       	std	Y+20, r25	; 0x14
    199a:	8b 8b       	std	Y+19, r24	; 0x13
    199c:	8b 89       	ldd	r24, Y+19	; 0x13
    199e:	9c 89       	ldd	r25, Y+20	; 0x14
    19a0:	98 8b       	std	Y+16, r25	; 0x10
    19a2:	8f 87       	std	Y+15, r24	; 0x0f
    19a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a6:	98 89       	ldd	r25, Y+16	; 0x10
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <New_Pass+0xe42>
    19ac:	98 8b       	std	Y+16, r25	; 0x10
    19ae:	8f 87       	std	Y+15, r24	; 0x0f
		re_pass= re_pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Press =");
	while(key!='=')
    19b0:	fe 01       	movw	r30, r28
    19b2:	eb 55       	subi	r30, 0x5B	; 91
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	8d 33       	cpi	r24, 0x3D	; 61
    19ba:	09 f0       	breq	.+2      	; 0x19be <New_Pass+0xe58>
    19bc:	81 cf       	rjmp	.-254    	; 0x18c0 <New_Pass+0xd5a>
		key=KEYPAD_getPressedKey();
		_delay_ms(50);
	}


	if(re_pass == new_pass)
    19be:	fe 01       	movw	r30, r28
    19c0:	e5 56       	subi	r30, 0x65	; 101
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	de 01       	movw	r26, r28
    19c6:	a1 56       	subi	r26, 0x61	; 97
    19c8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ca:	20 81       	ld	r18, Z
    19cc:	31 81       	ldd	r19, Z+1	; 0x01
    19ce:	42 81       	ldd	r20, Z+2	; 0x02
    19d0:	53 81       	ldd	r21, Z+3	; 0x03
    19d2:	8d 91       	ld	r24, X+
    19d4:	9d 91       	ld	r25, X+
    19d6:	0d 90       	ld	r0, X+
    19d8:	bc 91       	ld	r27, X
    19da:	a0 2d       	mov	r26, r0
    19dc:	28 17       	cp	r18, r24
    19de:	39 07       	cpc	r19, r25
    19e0:	4a 07       	cpc	r20, r26
    19e2:	5b 07       	cpc	r21, r27
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <New_Pass+0xe82>
    19e6:	5a c0       	rjmp	.+180    	; 0x1a9c <New_Pass+0xf36>
	{
		UART_sendByte(SAVE);
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>
		for(count_pass=0;count_pass<5;count_pass++)
    19f0:	fe 01       	movw	r30, r28
    19f2:	ed 55       	subi	r30, 0x5D	; 93
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	10 82       	st	Z, r1
    19f8:	44 c0       	rjmp	.+136    	; 0x1a82 <New_Pass+0xf1c>
		{
			pass = re_pass % 10;
    19fa:	fe 01       	movw	r30, r28
    19fc:	e5 56       	subi	r30, 0x65	; 101
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	a2 81       	ldd	r26, Z+2	; 0x02
    1a06:	b3 81       	ldd	r27, Z+3	; 0x03
    1a08:	2a e0       	ldi	r18, 0x0A	; 10
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	bc 01       	movw	r22, r24
    1a12:	cd 01       	movw	r24, r26
    1a14:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__divmodsi4>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ec 55       	subi	r30, 0x5C	; 92
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 83       	st	Z, r24
			while(UART_recieveByte()!= M2_READY);
    1a24:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <UART_recieveByte>
    1a28:	80 32       	cpi	r24, 0x20	; 32
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	d9 f7       	brne	.-10     	; 0x1a24 <New_Pass+0xebe>
			UART_sendByte(pass);
    1a2e:	fe 01       	movw	r30, r28
    1a30:	ec 55       	subi	r30, 0x5C	; 92
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	80 81       	ld	r24, Z
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>
			re_pass /= 10;
    1a3e:	8e 01       	movw	r16, r28
    1a40:	05 56       	subi	r16, 0x65	; 101
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	fe 01       	movw	r30, r28
    1a46:	e5 56       	subi	r30, 0x65	; 101
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a50:	b3 81       	ldd	r27, Z+3	; 0x03
    1a52:	2a e0       	ldi	r18, 0x0A	; 10
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__divmodsi4>
    1a62:	da 01       	movw	r26, r20
    1a64:	c9 01       	movw	r24, r18
    1a66:	f8 01       	movw	r30, r16
    1a68:	80 83       	st	Z, r24
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	a2 83       	std	Z+2, r26	; 0x02
    1a6e:	b3 83       	std	Z+3, r27	; 0x03


	if(re_pass == new_pass)
	{
		UART_sendByte(SAVE);
		for(count_pass=0;count_pass<5;count_pass++)
    1a70:	de 01       	movw	r26, r28
    1a72:	ad 55       	subi	r26, 0x5D	; 93
    1a74:	bf 4f       	sbci	r27, 0xFF	; 255
    1a76:	fe 01       	movw	r30, r28
    1a78:	ed 55       	subi	r30, 0x5D	; 93
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	8c 93       	st	X, r24
    1a82:	fe 01       	movw	r30, r28
    1a84:	ed 55       	subi	r30, 0x5D	; 93
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	85 30       	cpi	r24, 0x05	; 5
    1a8c:	08 f4       	brcc	.+2      	; 0x1a90 <New_Pass+0xf2a>
    1a8e:	b5 cf       	rjmp	.-150    	; 0x19fa <New_Pass+0xe94>
			pass = re_pass % 10;
			while(UART_recieveByte()!= M2_READY);
			UART_sendByte(pass);
			re_pass /= 10;
		}
		while(UART_recieveByte()!= END_SAVING);
    1a90:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <UART_recieveByte>
    1a94:	83 30       	cpi	r24, 0x03	; 3
    1a96:	91 05       	cpc	r25, r1
    1a98:	d9 f7       	brne	.-10     	; 0x1a90 <New_Pass+0xf2a>
    1a9a:	7d c0       	rjmp	.+250    	; 0x1b96 <New_Pass+0x1030>
	}
	else
	{
		LCD_clearScreen();
    1a9c:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"NOT MATCHING");
    1aa0:	2a e9       	ldi	r18, 0x9A	; 154
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	a9 01       	movw	r20, r18
    1aaa:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	aa ef       	ldi	r26, 0xFA	; 250
    1ab4:	b3 e4       	ldi	r27, 0x43	; 67
    1ab6:	8b 87       	std	Y+11, r24	; 0x0b
    1ab8:	9c 87       	std	Y+12, r25	; 0x0c
    1aba:	ad 87       	std	Y+13, r26	; 0x0d
    1abc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	8f 83       	std	Y+7, r24	; 0x07
    1ad8:	98 87       	std	Y+8, r25	; 0x08
    1ada:	a9 87       	std	Y+9, r26	; 0x09
    1adc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ade:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae0:	78 85       	ldd	r23, Y+8	; 0x08
    1ae2:	89 85       	ldd	r24, Y+9	; 0x09
    1ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <New_Pass+0xf9a>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <New_Pass+0x1018>
	else if (__tmp > 65535)
    1b00:	6f 81       	ldd	r22, Y+7	; 0x07
    1b02:	78 85       	ldd	r23, Y+8	; 0x08
    1b04:	89 85       	ldd	r24, Y+9	; 0x09
    1b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <New_Pass+0x1004>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <New_Pass+0xffa>
    1b42:	88 ec       	ldi	r24, 0xC8	; 200
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9c 83       	std	Y+4, r25	; 0x04
    1b48:	8b 83       	std	Y+3, r24	; 0x03
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <New_Pass+0xfe8>
    1b52:	9c 83       	std	Y+4, r25	; 0x04
    1b54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <New_Pass+0xfdc>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <New_Pass+0x102c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	9a 83       	std	Y+2, r25	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <New_Pass+0x1024>
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		New_Pass();
    1b92:	0e 94 b3 05 	call	0xb66	; 0xb66 <New_Pass>
	}
}
    1b96:	cb 55       	subi	r28, 0x5B	; 91
    1b98:	df 4f       	sbci	r29, 0xFF	; 255
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	08 95       	ret

00001bae <Check_Pass>:

void Check_Pass(const Timer1_ConfigType * Config_Ptr)
{
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	ce 55       	subi	r28, 0x5E	; 94
    1bbc:	d0 40       	sbci	r29, 0x00	; 0
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e3 5a       	subi	r30, 0xA3	; 163
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
	sint32 pass=0;
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e7 5a       	subi	r30, 0xA7	; 167
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	10 82       	st	Z, r1
    1bda:	11 82       	std	Z+1, r1	; 0x01
    1bdc:	12 82       	std	Z+2, r1	; 0x02
    1bde:	13 82       	std	Z+3, r1	; 0x03

	uint8 count_pass,key=0,pass_digit=0,error_pass=0;
    1be0:	fe 01       	movw	r30, r28
    1be2:	e9 5a       	subi	r30, 0xA9	; 169
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	10 82       	st	Z, r1
    1be8:	fe 01       	movw	r30, r28
    1bea:	ea 5a       	subi	r30, 0xAA	; 170
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	10 82       	st	Z, r1
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	eb 5a       	subi	r30, 0xAB	; 171
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	10 82       	st	Z, r1

	LCD_clearScreen();
    1bf8:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter pass:");
    1bfc:	27 ea       	ldi	r18, 0xA7	; 167
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	a9 01       	movw	r20, r18
    1c06:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>

	for(count_pass=0; count_pass<5; count_pass++)
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e8 5a       	subi	r30, 0xA8	; 168
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	10 82       	st	Z, r1
    1c12:	68 c2       	rjmp	.+1232   	; 0x20e4 <Check_Pass+0x536>
	{
		key = KEYPAD_getPressedKey();
    1c14:	0e 94 f5 16 	call	0x2dea	; 0x2dea <KEYPAD_getPressedKey>
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e9 5a       	subi	r30, 0xA9	; 169
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 83       	st	Z, r24
    1c20:	fe 01       	movw	r30, r28
    1c22:	ef 5a       	subi	r30, 0xAF	; 175
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a8 e4       	ldi	r26, 0x48	; 72
    1c2c:	b2 e4       	ldi	r27, 0x42	; 66
    1c2e:	80 83       	st	Z, r24
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	a2 83       	std	Z+2, r26	; 0x02
    1c34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	8e 01       	movw	r16, r28
    1c38:	03 5b       	subi	r16, 0xB3	; 179
    1c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	ef 5a       	subi	r30, 0xAF	; 175
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	60 81       	ld	r22, Z
    1c44:	71 81       	ldd	r23, Z+1	; 0x01
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	4a ef       	ldi	r20, 0xFA	; 250
    1c50:	54 e4       	ldi	r21, 0x44	; 68
    1c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	80 83       	st	Z, r24
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	a2 83       	std	Z+2, r26	; 0x02
    1c62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c64:	fe 01       	movw	r30, r28
    1c66:	e3 5b       	subi	r30, 0xB3	; 179
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	44 f4       	brge	.+16     	; 0x1c92 <Check_Pass+0xe4>
		__ticks = 1;
    1c82:	fe 01       	movw	r30, r28
    1c84:	e5 5b       	subi	r30, 0xB5	; 181
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
    1c90:	64 c0       	rjmp	.+200    	; 0x1d5a <Check_Pass+0x1ac>
	else if (__tmp > 65535)
    1c92:	fe 01       	movw	r30, r28
    1c94:	e3 5b       	subi	r30, 0xB3	; 179
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	3f ef       	ldi	r19, 0xFF	; 255
    1ca4:	4f e7       	ldi	r20, 0x7F	; 127
    1ca6:	57 e4       	ldi	r21, 0x47	; 71
    1ca8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cac:	18 16       	cp	r1, r24
    1cae:	0c f0       	brlt	.+2      	; 0x1cb2 <Check_Pass+0x104>
    1cb0:	43 c0       	rjmp	.+134    	; 0x1d38 <Check_Pass+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	ef 5a       	subi	r30, 0xAF	; 175
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	60 81       	ld	r22, Z
    1cba:	71 81       	ldd	r23, Z+1	; 0x01
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e2       	ldi	r20, 0x20	; 32
    1cc6:	51 e4       	ldi	r21, 0x41	; 65
    1cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	8e 01       	movw	r16, r28
    1cd2:	05 5b       	subi	r16, 0xB5	; 181
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	bc 01       	movw	r22, r24
    1cd8:	cd 01       	movw	r24, r26
    1cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	91 83       	std	Z+1, r25	; 0x01
    1ce6:	80 83       	st	Z, r24
    1ce8:	1f c0       	rjmp	.+62     	; 0x1d28 <Check_Pass+0x17a>
    1cea:	fe 01       	movw	r30, r28
    1cec:	e7 5b       	subi	r30, 0xB7	; 183
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	88 ec       	ldi	r24, 0xC8	; 200
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e7 5b       	subi	r30, 0xB7	; 183
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	80 81       	ld	r24, Z
    1d00:	91 81       	ldd	r25, Z+1	; 0x01
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <Check_Pass+0x154>
    1d06:	fe 01       	movw	r30, r28
    1d08:	e7 5b       	subi	r30, 0xB7	; 183
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	de 01       	movw	r26, r28
    1d12:	a5 5b       	subi	r26, 0xB5	; 181
    1d14:	bf 4f       	sbci	r27, 0xFF	; 255
    1d16:	fe 01       	movw	r30, r28
    1d18:	e5 5b       	subi	r30, 0xB5	; 181
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	11 96       	adiw	r26, 0x01	; 1
    1d24:	9c 93       	st	X, r25
    1d26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e5 5b       	subi	r30, 0xB5	; 181
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	91 81       	ldd	r25, Z+1	; 0x01
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	d1 f6       	brne	.-76     	; 0x1cea <Check_Pass+0x13c>
    1d36:	b4 c0       	rjmp	.+360    	; 0x1ea0 <Check_Pass+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	8e 01       	movw	r16, r28
    1d3a:	05 5b       	subi	r16, 0xB5	; 181
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e3 5b       	subi	r30, 0xB3	; 179
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	f8 01       	movw	r30, r16
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
    1d5a:	de 01       	movw	r26, r28
    1d5c:	a9 5b       	subi	r26, 0xB9	; 185
    1d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d60:	fe 01       	movw	r30, r28
    1d62:	e5 5b       	subi	r30, 0xB5	; 181
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	11 96       	adiw	r26, 0x01	; 1
    1d6c:	9c 93       	st	X, r25
    1d6e:	8e 93       	st	-X, r24
    1d70:	fe 01       	movw	r30, r28
    1d72:	e9 5b       	subi	r30, 0xB9	; 185
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <Check_Pass+0x1cc>
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e9 5b       	subi	r30, 0xB9	; 185
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
    1d88:	8b c0       	rjmp	.+278    	; 0x1ea0 <Check_Pass+0x2f2>
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
		{
			key = KEYPAD_getPressedKey();
    1d8a:	0e 94 f5 16 	call	0x2dea	; 0x2dea <KEYPAD_getPressedKey>
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e9 5a       	subi	r30, 0xA9	; 169
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 83       	st	Z, r24
    1d96:	fe 01       	movw	r30, r28
    1d98:	ed 5b       	subi	r30, 0xBD	; 189
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a8 e4       	ldi	r26, 0x48	; 72
    1da2:	b2 e4       	ldi	r27, 0x42	; 66
    1da4:	80 83       	st	Z, r24
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	a2 83       	std	Z+2, r26	; 0x02
    1daa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	8e 01       	movw	r16, r28
    1dae:	01 5c       	subi	r16, 0xC1	; 193
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	ed 5b       	subi	r30, 0xBD	; 189
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a ef       	ldi	r20, 0xFA	; 250
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	80 83       	st	Z, r24
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	a2 83       	std	Z+2, r26	; 0x02
    1dd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dda:	fe 01       	movw	r30, r28
    1ddc:	ff 96       	adiw	r30, 0x3f	; 63
    1dde:	60 81       	ld	r22, Z
    1de0:	71 81       	ldd	r23, Z+1	; 0x01
    1de2:	82 81       	ldd	r24, Z+2	; 0x02
    1de4:	93 81       	ldd	r25, Z+3	; 0x03
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e8       	ldi	r20, 0x80	; 128
    1dec:	5f e3       	ldi	r21, 0x3F	; 63
    1dee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df2:	88 23       	and	r24, r24
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <Check_Pass+0x252>
		__ticks = 1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9e af       	std	Y+62, r25	; 0x3e
    1dfc:	8d af       	std	Y+61, r24	; 0x3d
    1dfe:	46 c0       	rjmp	.+140    	; 0x1e8c <Check_Pass+0x2de>
	else if (__tmp > 65535)
    1e00:	fe 01       	movw	r30, r28
    1e02:	ff 96       	adiw	r30, 0x3f	; 63
    1e04:	60 81       	ld	r22, Z
    1e06:	71 81       	ldd	r23, Z+1	; 0x01
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	64 f5       	brge	.+88     	; 0x1e74 <Check_Pass+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ed 5b       	subi	r30, 0xBD	; 189
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	93 81       	ldd	r25, Z+3	; 0x03
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e2       	ldi	r20, 0x20	; 32
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9e af       	std	Y+62, r25	; 0x3e
    1e48:	8d af       	std	Y+61, r24	; 0x3d
    1e4a:	0f c0       	rjmp	.+30     	; 0x1e6a <Check_Pass+0x2bc>
    1e4c:	88 ec       	ldi	r24, 0xC8	; 200
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9c af       	std	Y+60, r25	; 0x3c
    1e52:	8b af       	std	Y+59, r24	; 0x3b
    1e54:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e56:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <Check_Pass+0x2aa>
    1e5c:	9c af       	std	Y+60, r25	; 0x3c
    1e5e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e62:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	9e af       	std	Y+62, r25	; 0x3e
    1e68:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	69 f7       	brne	.-38     	; 0x1e4c <Check_Pass+0x29e>
    1e72:	16 c0       	rjmp	.+44     	; 0x1ea0 <Check_Pass+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e74:	fe 01       	movw	r30, r28
    1e76:	ff 96       	adiw	r30, 0x3f	; 63
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	93 81       	ldd	r25, Z+3	; 0x03
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9e af       	std	Y+62, r25	; 0x3e
    1e8a:	8d af       	std	Y+61, r24	; 0x3d
    1e8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e90:	9a af       	std	Y+58, r25	; 0x3a
    1e92:	89 af       	std	Y+57, r24	; 0x39
    1e94:	89 ad       	ldd	r24, Y+57	; 0x39
    1e96:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <Check_Pass+0x2ea>
    1e9c:	9a af       	std	Y+58, r25	; 0x3a
    1e9e:	89 af       	std	Y+57, r24	; 0x39
	for(count_pass=0; count_pass<5; count_pass++)
	{
		key = KEYPAD_getPressedKey();
		_delay_ms(50);

		while(!((key >= 0) && (key <= 9)))
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e9 5a       	subi	r30, 0xA9	; 169
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8a 30       	cpi	r24, 0x0A	; 10
    1eaa:	08 f0       	brcs	.+2      	; 0x1eae <Check_Pass+0x300>
    1eac:	6e cf       	rjmp	.-292    	; 0x1d8a <Check_Pass+0x1dc>
		{
			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		LCD_displayStringRowColumn(1,count_pass,"*");
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e8 5a       	subi	r30, 0xA8	; 168
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	20 e7       	ldi	r18, 0x70	; 112
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	60 81       	ld	r22, Z
    1ebc:	a9 01       	movw	r20, r18
    1ebe:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	ac e8       	ldi	r26, 0x8C	; 140
    1ec8:	b2 e4       	ldi	r27, 0x42	; 66
    1eca:	8d ab       	std	Y+53, r24	; 0x35
    1ecc:	9e ab       	std	Y+54, r25	; 0x36
    1ece:	af ab       	std	Y+55, r26	; 0x37
    1ed0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ed8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	4a ef       	ldi	r20, 0xFA	; 250
    1ee0:	54 e4       	ldi	r21, 0x44	; 68
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	89 ab       	std	Y+49, r24	; 0x31
    1eec:	9a ab       	std	Y+50, r25	; 0x32
    1eee:	ab ab       	std	Y+51, r26	; 0x33
    1ef0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ef2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef8:	9c a9       	ldd	r25, Y+52	; 0x34
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e8       	ldi	r20, 0x80	; 128
    1f00:	5f e3       	ldi	r21, 0x3F	; 63
    1f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <Check_Pass+0x366>
		__ticks = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	98 ab       	std	Y+48, r25	; 0x30
    1f10:	8f a7       	std	Y+47, r24	; 0x2f
    1f12:	3f c0       	rjmp	.+126    	; 0x1f92 <Check_Pass+0x3e4>
	else if (__tmp > 65535)
    1f14:	69 a9       	ldd	r22, Y+49	; 0x31
    1f16:	7a a9       	ldd	r23, Y+50	; 0x32
    1f18:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	57 e4       	ldi	r21, 0x47	; 71
    1f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	4c f5       	brge	.+82     	; 0x1f7e <Check_Pass+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f30:	8f a9       	ldd	r24, Y+55	; 0x37
    1f32:	98 ad       	ldd	r25, Y+56	; 0x38
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	98 ab       	std	Y+48, r25	; 0x30
    1f52:	8f a7       	std	Y+47, r24	; 0x2f
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <Check_Pass+0x3c6>
    1f56:	88 ec       	ldi	r24, 0xC8	; 200
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9e a7       	std	Y+46, r25	; 0x2e
    1f5c:	8d a7       	std	Y+45, r24	; 0x2d
    1f5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f60:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <Check_Pass+0x3b4>
    1f66:	9e a7       	std	Y+46, r25	; 0x2e
    1f68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	98 ab       	std	Y+48, r25	; 0x30
    1f72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f76:	98 a9       	ldd	r25, Y+48	; 0x30
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <Check_Pass+0x3a8>
    1f7c:	14 c0       	rjmp	.+40     	; 0x1fa6 <Check_Pass+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f80:	7a a9       	ldd	r23, Y+50	; 0x32
    1f82:	8b a9       	ldd	r24, Y+51	; 0x33
    1f84:	9c a9       	ldd	r25, Y+52	; 0x34
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	98 ab       	std	Y+48, r25	; 0x30
    1f90:	8f a7       	std	Y+47, r24	; 0x2f
    1f92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f94:	98 a9       	ldd	r25, Y+48	; 0x30
    1f96:	9c a7       	std	Y+44, r25	; 0x2c
    1f98:	8b a7       	std	Y+43, r24	; 0x2b
    1f9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <Check_Pass+0x3f0>
    1fa2:	9c a7       	std	Y+44, r25	; 0x2c
    1fa4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(70);
		pass= pass*10 + key;
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e7 5a       	subi	r30, 0xA7	; 167
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	a2 81       	ldd	r26, Z+2	; 0x02
    1fb2:	b3 81       	ldd	r27, Z+3	; 0x03
    1fb4:	2a e0       	ldi	r18, 0x0A	; 10
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__mulsi3>
    1fc4:	9b 01       	movw	r18, r22
    1fc6:	ac 01       	movw	r20, r24
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e9 5a       	subi	r30, 0xA9	; 169
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	a0 e0       	ldi	r26, 0x00	; 0
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e7 5a       	subi	r30, 0xA7	; 167
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	82 0f       	add	r24, r18
    1fe0:	93 1f       	adc	r25, r19
    1fe2:	a4 1f       	adc	r26, r20
    1fe4:	b5 1f       	adc	r27, r21
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	a2 83       	std	Z+2, r26	; 0x02
    1fec:	b3 83       	std	Z+3, r27	; 0x03
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	aa e7       	ldi	r26, 0x7A	; 122
    1ff4:	b3 e4       	ldi	r27, 0x43	; 67
    1ff6:	8f a3       	std	Y+39, r24	; 0x27
    1ff8:	98 a7       	std	Y+40, r25	; 0x28
    1ffa:	a9 a7       	std	Y+41, r26	; 0x29
    1ffc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6f a1       	ldd	r22, Y+39	; 0x27
    2000:	78 a5       	ldd	r23, Y+40	; 0x28
    2002:	89 a5       	ldd	r24, Y+41	; 0x29
    2004:	9a a5       	ldd	r25, Y+42	; 0x2a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a ef       	ldi	r20, 0xFA	; 250
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8b a3       	std	Y+35, r24	; 0x23
    2018:	9c a3       	std	Y+36, r25	; 0x24
    201a:	ad a3       	std	Y+37, r26	; 0x25
    201c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    201e:	6b a1       	ldd	r22, Y+35	; 0x23
    2020:	7c a1       	ldd	r23, Y+36	; 0x24
    2022:	8d a1       	ldd	r24, Y+37	; 0x25
    2024:	9e a1       	ldd	r25, Y+38	; 0x26
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <Check_Pass+0x492>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9a a3       	std	Y+34, r25	; 0x22
    203c:	89 a3       	std	Y+33, r24	; 0x21
    203e:	3f c0       	rjmp	.+126    	; 0x20be <Check_Pass+0x510>
	else if (__tmp > 65535)
    2040:	6b a1       	ldd	r22, Y+35	; 0x23
    2042:	7c a1       	ldd	r23, Y+36	; 0x24
    2044:	8d a1       	ldd	r24, Y+37	; 0x25
    2046:	9e a1       	ldd	r25, Y+38	; 0x26
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <Check_Pass+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6f a1       	ldd	r22, Y+39	; 0x27
    205a:	78 a5       	ldd	r23, Y+40	; 0x28
    205c:	89 a5       	ldd	r24, Y+41	; 0x29
    205e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9a a3       	std	Y+34, r25	; 0x22
    207e:	89 a3       	std	Y+33, r24	; 0x21
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <Check_Pass+0x4f2>
    2082:	88 ec       	ldi	r24, 0xC8	; 200
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	98 a3       	std	Y+32, r25	; 0x20
    2088:	8f 8f       	std	Y+31, r24	; 0x1f
    208a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    208c:	98 a1       	ldd	r25, Y+32	; 0x20
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <Check_Pass+0x4e0>
    2092:	98 a3       	std	Y+32, r25	; 0x20
    2094:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	89 a1       	ldd	r24, Y+33	; 0x21
    2098:	9a a1       	ldd	r25, Y+34	; 0x22
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9a a3       	std	Y+34, r25	; 0x22
    209e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	89 a1       	ldd	r24, Y+33	; 0x21
    20a2:	9a a1       	ldd	r25, Y+34	; 0x22
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <Check_Pass+0x4d4>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <Check_Pass+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6b a1       	ldd	r22, Y+35	; 0x23
    20ac:	7c a1       	ldd	r23, Y+36	; 0x24
    20ae:	8d a1       	ldd	r24, Y+37	; 0x25
    20b0:	9e a1       	ldd	r25, Y+38	; 0x26
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9a a3       	std	Y+34, r25	; 0x22
    20bc:	89 a3       	std	Y+33, r24	; 0x21
    20be:	89 a1       	ldd	r24, Y+33	; 0x21
    20c0:	9a a1       	ldd	r25, Y+34	; 0x22
    20c2:	9e 8f       	std	Y+30, r25	; 0x1e
    20c4:	8d 8f       	std	Y+29, r24	; 0x1d
    20c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <Check_Pass+0x51c>
    20ce:	9e 8f       	std	Y+30, r25	; 0x1e
    20d0:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 count_pass,key=0,pass_digit=0,error_pass=0;

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Enter pass:");

	for(count_pass=0; count_pass<5; count_pass++)
    20d2:	de 01       	movw	r26, r28
    20d4:	a8 5a       	subi	r26, 0xA8	; 168
    20d6:	bf 4f       	sbci	r27, 0xFF	; 255
    20d8:	fe 01       	movw	r30, r28
    20da:	e8 5a       	subi	r30, 0xA8	; 168
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	80 81       	ld	r24, Z
    20e0:	8f 5f       	subi	r24, 0xFF	; 255
    20e2:	8c 93       	st	X, r24
    20e4:	fe 01       	movw	r30, r28
    20e6:	e8 5a       	subi	r30, 0xA8	; 168
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 81       	ld	r24, Z
    20ec:	85 30       	cpi	r24, 0x05	; 5
    20ee:	08 f4       	brcc	.+2      	; 0x20f2 <Check_Pass+0x544>
    20f0:	91 cd       	rjmp	.-1246   	; 0x1c14 <Check_Pass+0x66>
		LCD_displayStringRowColumn(1,count_pass,"*");
		_delay_ms(70);
		pass= pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
    20f2:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Press =");
    20f6:	22 e7       	ldi	r18, 0x72	; 114
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	a9 01       	movw	r20, r18
    2100:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
    2104:	78 c0       	rjmp	.+240    	; 0x21f6 <Check_Pass+0x648>
	while(key!='=')
	{
		key=KEYPAD_getPressedKey();
    2106:	0e 94 f5 16 	call	0x2dea	; 0x2dea <KEYPAD_getPressedKey>
    210a:	fe 01       	movw	r30, r28
    210c:	e9 5a       	subi	r30, 0xA9	; 169
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 83       	st	Z, r24
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a8 e4       	ldi	r26, 0x48	; 72
    2118:	b2 e4       	ldi	r27, 0x42	; 66
    211a:	89 8f       	std	Y+25, r24	; 0x19
    211c:	9a 8f       	std	Y+26, r25	; 0x1a
    211e:	ab 8f       	std	Y+27, r26	; 0x1b
    2120:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	69 8d       	ldd	r22, Y+25	; 0x19
    2124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a ef       	ldi	r20, 0xFA	; 250
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8d 8b       	std	Y+21, r24	; 0x15
    213c:	9e 8b       	std	Y+22, r25	; 0x16
    213e:	af 8b       	std	Y+23, r26	; 0x17
    2140:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2142:	6d 89       	ldd	r22, Y+21	; 0x15
    2144:	7e 89       	ldd	r23, Y+22	; 0x16
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	98 8d       	ldd	r25, Y+24	; 0x18
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <Check_Pass+0x5b6>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9c 8b       	std	Y+20, r25	; 0x14
    2160:	8b 8b       	std	Y+19, r24	; 0x13
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <Check_Pass+0x634>
	else if (__tmp > 65535)
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <Check_Pass+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	69 8d       	ldd	r22, Y+25	; 0x19
    217e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <Check_Pass+0x616>
    21a6:	88 ec       	ldi	r24, 0xC8	; 200
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9a 8b       	std	Y+18, r25	; 0x12
    21ac:	89 8b       	std	Y+17, r24	; 0x11
    21ae:	89 89       	ldd	r24, Y+17	; 0x11
    21b0:	9a 89       	ldd	r25, Y+18	; 0x12
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <Check_Pass+0x604>
    21b6:	9a 8b       	std	Y+18, r25	; 0x12
    21b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <Check_Pass+0x5f8>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <Check_Pass+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9c 8b       	std	Y+20, r25	; 0x14
    21e0:	8b 8b       	std	Y+19, r24	; 0x13
    21e2:	8b 89       	ldd	r24, Y+19	; 0x13
    21e4:	9c 89       	ldd	r25, Y+20	; 0x14
    21e6:	98 8b       	std	Y+16, r25	; 0x10
    21e8:	8f 87       	std	Y+15, r24	; 0x0f
    21ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ec:	98 89       	ldd	r25, Y+16	; 0x10
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <Check_Pass+0x640>
    21f2:	98 8b       	std	Y+16, r25	; 0x10
    21f4:	8f 87       	std	Y+15, r24	; 0x0f
		pass= pass*10 + key;
		_delay_ms(250);
	}
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Press =");
	while(key!='=')
    21f6:	fe 01       	movw	r30, r28
    21f8:	e9 5a       	subi	r30, 0xA9	; 169
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	8d 33       	cpi	r24, 0x3D	; 61
    2200:	09 f0       	breq	.+2      	; 0x2204 <Check_Pass+0x656>
    2202:	81 cf       	rjmp	.-254    	; 0x2106 <Check_Pass+0x558>
		key=KEYPAD_getPressedKey();
		_delay_ms(50);
	}


	UART_sendByte(CHECK_PASS);
    2204:	84 e0       	ldi	r24, 0x04	; 4
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>

	for(count_pass=0; count_pass<5; count_pass++)
    220c:	fe 01       	movw	r30, r28
    220e:	e8 5a       	subi	r30, 0xA8	; 168
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	10 82       	st	Z, r1
    2214:	4c c0       	rjmp	.+152    	; 0x22ae <Check_Pass+0x700>
	{
		pass_digit = pass % 10;
    2216:	fe 01       	movw	r30, r28
    2218:	e7 5a       	subi	r30, 0xA7	; 167
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	91 81       	ldd	r25, Z+1	; 0x01
    2220:	a2 81       	ldd	r26, Z+2	; 0x02
    2222:	b3 81       	ldd	r27, Z+3	; 0x03
    2224:	2a e0       	ldi	r18, 0x0A	; 10
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	bc 01       	movw	r22, r24
    222e:	cd 01       	movw	r24, r26
    2230:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__divmodsi4>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	fe 01       	movw	r30, r28
    223a:	ea 5a       	subi	r30, 0xAA	; 170
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 83       	st	Z, r24
		UART_sendByte(pass_digit);
    2240:	fe 01       	movw	r30, r28
    2242:	ea 5a       	subi	r30, 0xAA	; 170
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>

		if(UART_recieveByte() == Error_pass)
    2250:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <UART_recieveByte>
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	49 f4       	brne	.+18     	; 0x226a <Check_Pass+0x6bc>
		{
			error_pass ++;
    2258:	de 01       	movw	r26, r28
    225a:	ab 5a       	subi	r26, 0xAB	; 171
    225c:	bf 4f       	sbci	r27, 0xFF	; 255
    225e:	fe 01       	movw	r30, r28
    2260:	eb 5a       	subi	r30, 0xAB	; 171
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	8f 5f       	subi	r24, 0xFF	; 255
    2268:	8c 93       	st	X, r24
		}
		pass /= 10;
    226a:	8e 01       	movw	r16, r28
    226c:	07 5a       	subi	r16, 0xA7	; 167
    226e:	1f 4f       	sbci	r17, 0xFF	; 255
    2270:	fe 01       	movw	r30, r28
    2272:	e7 5a       	subi	r30, 0xA7	; 167
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 81       	ld	r24, Z
    2278:	91 81       	ldd	r25, Z+1	; 0x01
    227a:	a2 81       	ldd	r26, Z+2	; 0x02
    227c:	b3 81       	ldd	r27, Z+3	; 0x03
    227e:	2a e0       	ldi	r18, 0x0A	; 10
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__divmodsi4>
    228e:	da 01       	movw	r26, r20
    2290:	c9 01       	movw	r24, r18
    2292:	f8 01       	movw	r30, r16
    2294:	80 83       	st	Z, r24
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	a2 83       	std	Z+2, r26	; 0x02
    229a:	b3 83       	std	Z+3, r27	; 0x03
	}


	UART_sendByte(CHECK_PASS);

	for(count_pass=0; count_pass<5; count_pass++)
    229c:	de 01       	movw	r26, r28
    229e:	a8 5a       	subi	r26, 0xA8	; 168
    22a0:	bf 4f       	sbci	r27, 0xFF	; 255
    22a2:	fe 01       	movw	r30, r28
    22a4:	e8 5a       	subi	r30, 0xA8	; 168
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	8c 93       	st	X, r24
    22ae:	fe 01       	movw	r30, r28
    22b0:	e8 5a       	subi	r30, 0xA8	; 168
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 81       	ld	r24, Z
    22b6:	85 30       	cpi	r24, 0x05	; 5
    22b8:	08 f4       	brcc	.+2      	; 0x22bc <Check_Pass+0x70e>
    22ba:	ad cf       	rjmp	.-166    	; 0x2216 <Check_Pass+0x668>
			error_pass ++;
		}
		pass /= 10;
	}

	if(error_pass != 0)
    22bc:	fe 01       	movw	r30, r28
    22be:	eb 5a       	subi	r30, 0xAB	; 171
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	88 23       	and	r24, r24
    22c6:	09 f4       	brne	.+2      	; 0x22ca <Check_Pass+0x71c>
    22c8:	be c0       	rjmp	.+380    	; 0x2446 <Check_Pass+0x898>
	{
		counter_error ++;
    22ca:	80 91 3f 01 	lds	r24, 0x013F
    22ce:	8f 5f       	subi	r24, 0xFF	; 255
    22d0:	80 93 3f 01 	sts	0x013F, r24
		UART_sendByte(counter_error);
    22d4:	80 91 3f 01 	lds	r24, 0x013F
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>

		if(counter_error < 3)
    22e0:	80 91 3f 01 	lds	r24, 0x013F
    22e4:	83 30       	cpi	r24, 0x03	; 3
    22e6:	08 f0       	brcs	.+2      	; 0x22ea <Check_Pass+0x73c>
    22e8:	83 c0       	rjmp	.+262    	; 0x23f0 <Check_Pass+0x842>
		{
			LCD_clearScreen();
    22ea:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"INCORRECT PASS");
    22ee:	27 eb       	ldi	r18, 0xB7	; 183
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	a9 01       	movw	r20, r18
    22f8:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	aa ef       	ldi	r26, 0xFA	; 250
    2302:	b3 e4       	ldi	r27, 0x43	; 67
    2304:	8b 87       	std	Y+11, r24	; 0x0b
    2306:	9c 87       	std	Y+12, r25	; 0x0c
    2308:	ad 87       	std	Y+13, r26	; 0x0d
    230a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	6b 85       	ldd	r22, Y+11	; 0x0b
    230e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2310:	8d 85       	ldd	r24, Y+13	; 0x0d
    2312:	9e 85       	ldd	r25, Y+14	; 0x0e
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a ef       	ldi	r20, 0xFA	; 250
    231a:	54 e4       	ldi	r21, 0x44	; 68
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	8f 83       	std	Y+7, r24	; 0x07
    2326:	98 87       	std	Y+8, r25	; 0x08
    2328:	a9 87       	std	Y+9, r26	; 0x09
    232a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    232c:	6f 81       	ldd	r22, Y+7	; 0x07
    232e:	78 85       	ldd	r23, Y+8	; 0x08
    2330:	89 85       	ldd	r24, Y+9	; 0x09
    2332:	9a 85       	ldd	r25, Y+10	; 0x0a
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5f e3       	ldi	r21, 0x3F	; 63
    233c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2340:	88 23       	and	r24, r24
    2342:	2c f4       	brge	.+10     	; 0x234e <Check_Pass+0x7a0>
		__ticks = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	3f c0       	rjmp	.+126    	; 0x23cc <Check_Pass+0x81e>
	else if (__tmp > 65535)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	57 e4       	ldi	r21, 0x47	; 71
    235e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2362:	18 16       	cp	r1, r24
    2364:	4c f5       	brge	.+82     	; 0x23b8 <Check_Pass+0x80a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	6b 85       	ldd	r22, Y+11	; 0x0b
    2368:	7c 85       	ldd	r23, Y+12	; 0x0c
    236a:	8d 85       	ldd	r24, Y+13	; 0x0d
    236c:	9e 85       	ldd	r25, Y+14	; 0x0e
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <Check_Pass+0x800>
    2390:	88 ec       	ldi	r24, 0xC8	; 200
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9c 83       	std	Y+4, r25	; 0x04
    2396:	8b 83       	std	Y+3, r24	; 0x03
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <Check_Pass+0x7ee>
    23a0:	9c 83       	std	Y+4, r25	; 0x04
    23a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	69 f7       	brne	.-38     	; 0x2390 <Check_Pass+0x7e2>
    23b6:	14 c0       	rjmp	.+40     	; 0x23e0 <Check_Pass+0x832>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ba:	78 85       	ldd	r23, Y+8	; 0x08
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	9e 83       	std	Y+6, r25	; 0x06
    23ca:	8d 83       	std	Y+5, r24	; 0x05
    23cc:	8d 81       	ldd	r24, Y+5	; 0x05
    23ce:	9e 81       	ldd	r25, Y+6	; 0x06
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	9a 81       	ldd	r25, Y+2	; 0x02
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <Check_Pass+0x82a>
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			Check_Pass(Config_Ptr);
    23e0:	fe 01       	movw	r30, r28
    23e2:	e3 5a       	subi	r30, 0xA3	; 163
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <Check_Pass>
    23ee:	31 c0       	rjmp	.+98     	; 0x2452 <Check_Pass+0x8a4>
		}
		else
		{
			LCD_clearScreen();
    23f0:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>


			Timer1_init(Config_Ptr);
    23f4:	fe 01       	movw	r30, r28
    23f6:	e3 5a       	subi	r30, 0xA3	; 163
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <Timer1_init>
			g_tick =0;
    2402:	10 92 3d 01 	sts	0x013D, r1
    2406:	10 92 3c 01 	sts	0x013C, r1
			g_calc_sec_flag =0;
    240a:	10 92 3e 01 	sts	0x013E, r1
    240e:	0e c0       	rjmp	.+28     	; 0x242c <Check_Pass+0x87e>
			while (g_tick != 60)
			{
				LCD_displayStringRowColumn(0,0,"Wait 60 Sec");
    2410:	26 ec       	ldi	r18, 0xC6	; 198
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	a9 01       	movw	r20, r18
    241a:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"el7a2 7aramy");
    241e:	22 ed       	ldi	r18, 0xD2	; 210
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	a9 01       	movw	r20, r18
    2428:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>


			Timer1_init(Config_Ptr);
			g_tick =0;
			g_calc_sec_flag =0;
			while (g_tick != 60)
    242c:	80 91 3c 01 	lds	r24, 0x013C
    2430:	90 91 3d 01 	lds	r25, 0x013D
    2434:	8c 33       	cpi	r24, 0x3C	; 60
    2436:	91 05       	cpc	r25, r1
    2438:	59 f7       	brne	.-42     	; 0x2410 <Check_Pass+0x862>
			{
				LCD_displayStringRowColumn(0,0,"Wait 60 Sec");
				LCD_displayStringRowColumn(1,0,"el7a2 7aramy");
			}

			counter_error = 0;
    243a:	10 92 3f 01 	sts	0x013F, r1
			return_flag =1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	80 93 40 01 	sts	0x0140, r24
    2444:	06 c0       	rjmp	.+12     	; 0x2452 <Check_Pass+0x8a4>
		}
	}
	else
	{
		UART_sendByte(4);
    2446:	84 e0       	ldi	r24, 0x04	; 4
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>
		counter_error = 0;
    244e:	10 92 3f 01 	sts	0x013F, r1
	}
}
    2452:	c2 5a       	subi	r28, 0xA2	; 162
    2454:	df 4f       	sbci	r29, 0xFF	; 255
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	1f 91       	pop	r17
    2466:	0f 91       	pop	r16
    2468:	08 95       	ret

0000246a <Open_Door>:
void Open_Door(const Timer1_ConfigType * Config_Ptr)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <Open_Door+0x6>
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(UNLOCK_DOOR);
    2478:	86 e0       	ldi	r24, 0x06	; 6
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>

	LCD_clearScreen();
    2480:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
	Timer1_init(Config_Ptr);
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <Timer1_init>
	g_tick =0;
    248c:	10 92 3d 01 	sts	0x013D, r1
    2490:	10 92 3c 01 	sts	0x013C, r1
	g_calc_sec_flag =0;
    2494:	10 92 3e 01 	sts	0x013E, r1
    2498:	07 c0       	rjmp	.+14     	; 0x24a8 <Open_Door+0x3e>

	while(g_tick != 15)
	{
		LCD_displayStringRowColumn(0,0,"Opening Door..");
    249a:	2f ed       	ldi	r18, 0xDF	; 223
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	a9 01       	movw	r20, r18
    24a4:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
	LCD_clearScreen();
	Timer1_init(Config_Ptr);
	g_tick =0;
	g_calc_sec_flag =0;

	while(g_tick != 15)
    24a8:	80 91 3c 01 	lds	r24, 0x013C
    24ac:	90 91 3d 01 	lds	r25, 0x013D
    24b0:	8f 30       	cpi	r24, 0x0F	; 15
    24b2:	91 05       	cpc	r25, r1
    24b4:	91 f7       	brne	.-28     	; 0x249a <Open_Door+0x30>
	{
		LCD_displayStringRowColumn(0,0,"Opening Door..");
	}

	LCD_clearScreen();
    24b6:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
	g_tick =0;
    24ba:	10 92 3d 01 	sts	0x013D, r1
    24be:	10 92 3c 01 	sts	0x013C, r1
	g_calc_sec_flag =0;
    24c2:	10 92 3e 01 	sts	0x013E, r1
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <Open_Door+0x6c>

	while(g_tick != 3)
	{
		LCD_displayStringRowColumn(0,0,"Door Opened");
    24c8:	2e ee       	ldi	r18, 0xEE	; 238
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	a9 01       	movw	r20, r18
    24d2:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>

	LCD_clearScreen();
	g_tick =0;
	g_calc_sec_flag =0;

	while(g_tick != 3)
    24d6:	80 91 3c 01 	lds	r24, 0x013C
    24da:	90 91 3d 01 	lds	r25, 0x013D
    24de:	83 30       	cpi	r24, 0x03	; 3
    24e0:	91 05       	cpc	r25, r1
    24e2:	91 f7       	brne	.-28     	; 0x24c8 <Open_Door+0x5e>
	{
		LCD_displayStringRowColumn(0,0,"Door Opened");
	}

	LCD_clearScreen();
    24e4:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
	g_tick =0;
    24e8:	10 92 3d 01 	sts	0x013D, r1
    24ec:	10 92 3c 01 	sts	0x013C, r1
	g_calc_sec_flag =0;
    24f0:	10 92 3e 01 	sts	0x013E, r1
    24f4:	07 c0       	rjmp	.+14     	; 0x2504 <Open_Door+0x9a>

	while(g_tick!= 15)
	{
		LCD_displayStringRowColumn(0,0,"Closing Door..");
    24f6:	2a ef       	ldi	r18, 0xFA	; 250
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	a9 01       	movw	r20, r18
    2500:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>

	LCD_clearScreen();
	g_tick =0;
	g_calc_sec_flag =0;

	while(g_tick!= 15)
    2504:	80 91 3c 01 	lds	r24, 0x013C
    2508:	90 91 3d 01 	lds	r25, 0x013D
    250c:	8f 30       	cpi	r24, 0x0F	; 15
    250e:	91 05       	cpc	r25, r1
    2510:	91 f7       	brne	.-28     	; 0x24f6 <Open_Door+0x8c>
	{
		LCD_displayStringRowColumn(0,0,"Closing Door..");
	}
}
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <Main_Menu>:

void Main_Menu(const Timer1_ConfigType * Config_Ptr)
{
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	61 97       	sbiw	r28, 0x11	; 17
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	99 8b       	std	Y+17, r25	; 0x11
    2532:	88 8b       	std	Y+16, r24	; 0x10
	uint8 key=0;
    2534:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
    2536:	0e 94 9f 1c 	call	0x393e	; 0x393e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
    253a:	29 e0       	ldi	r18, 0x09	; 9
    253c:	31 e0       	ldi	r19, 0x01	; 1
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	a9 01       	movw	r20, r18
    2544:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    2548:	27 e1       	ldi	r18, 0x17	; 23
    254a:	31 e0       	ldi	r19, 0x01	; 1
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	a9 01       	movw	r20, r18
    2552:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_displayStringRowColumn>
    2556:	75 c0       	rjmp	.+234    	; 0x2642 <Main_Menu+0x126>

	while((key != '+') && (key != '-'))
	{
		key = KEYPAD_getPressedKey();
    2558:	0e 94 f5 16 	call	0x2dea	; 0x2dea <KEYPAD_getPressedKey>
    255c:	8f 87       	std	Y+15, r24	; 0x0f
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	a8 e4       	ldi	r26, 0x48	; 72
    2564:	b2 e4       	ldi	r27, 0x42	; 66
    2566:	8b 87       	std	Y+11, r24	; 0x0b
    2568:	9c 87       	std	Y+12, r25	; 0x0c
    256a:	ad 87       	std	Y+13, r26	; 0x0d
    256c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2570:	7c 85       	ldd	r23, Y+12	; 0x0c
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	9e 85       	ldd	r25, Y+14	; 0x0e
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4a ef       	ldi	r20, 0xFA	; 250
    257c:	54 e4       	ldi	r21, 0x44	; 68
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	8f 83       	std	Y+7, r24	; 0x07
    2588:	98 87       	std	Y+8, r25	; 0x08
    258a:	a9 87       	std	Y+9, r26	; 0x09
    258c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e8       	ldi	r20, 0x80	; 128
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	2c f4       	brge	.+10     	; 0x25b0 <Main_Menu+0x94>
		__ticks = 1;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	3f c0       	rjmp	.+126    	; 0x262e <Main_Menu+0x112>
	else if (__tmp > 65535)
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	3f ef       	ldi	r19, 0xFF	; 255
    25bc:	4f e7       	ldi	r20, 0x7F	; 127
    25be:	57 e4       	ldi	r21, 0x47	; 71
    25c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c4:	18 16       	cp	r1, r24
    25c6:	4c f5       	brge	.+82     	; 0x261a <Main_Menu+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    25cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e2       	ldi	r20, 0x20	; 32
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <Main_Menu+0xf4>
    25f2:	88 ec       	ldi	r24, 0xC8	; 200
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <Main_Menu+0xe2>
    2602:	9c 83       	std	Y+4, r25	; 0x04
    2604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	69 f7       	brne	.-38     	; 0x25f2 <Main_Menu+0xd6>
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <Main_Menu+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <Main_Menu+0x11e>
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
	LCD_displayStringRowColumn(1,0,"- : Change Pass");

	while((key != '+') && (key != '-'))
    2642:	8f 85       	ldd	r24, Y+15	; 0x0f
    2644:	8b 32       	cpi	r24, 0x2B	; 43
    2646:	21 f0       	breq	.+8      	; 0x2650 <Main_Menu+0x134>
    2648:	8f 85       	ldd	r24, Y+15	; 0x0f
    264a:	8d 32       	cpi	r24, 0x2D	; 45
    264c:	09 f0       	breq	.+2      	; 0x2650 <Main_Menu+0x134>
    264e:	84 cf       	rjmp	.-248    	; 0x2558 <Main_Menu+0x3c>
	{
		key = KEYPAD_getPressedKey();
		_delay_ms(50);
	}

	Check_Pass(Config_Ptr);
    2650:	88 89       	ldd	r24, Y+16	; 0x10
    2652:	99 89       	ldd	r25, Y+17	; 0x11
    2654:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <Check_Pass>
	UART_sendByte(return_flag);
    2658:	80 91 40 01 	lds	r24, 0x0140
    265c:	88 2f       	mov	r24, r24
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>


	if(return_flag == 0)
    2664:	80 91 40 01 	lds	r24, 0x0140
    2668:	88 23       	and	r24, r24
    266a:	81 f4       	brne	.+32     	; 0x268c <Main_Menu+0x170>
	{
		UART_sendByte(key);
    266c:	8f 85       	ldd	r24, Y+15	; 0x0f
    266e:	88 2f       	mov	r24, r24
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>
		if (key == '-')
    2676:	8f 85       	ldd	r24, Y+15	; 0x0f
    2678:	8d 32       	cpi	r24, 0x2D	; 45
    267a:	19 f4       	brne	.+6      	; 0x2682 <Main_Menu+0x166>
		{
			New_Pass();
    267c:	0e 94 b3 05 	call	0xb66	; 0xb66 <New_Pass>
    2680:	07 c0       	rjmp	.+14     	; 0x2690 <Main_Menu+0x174>

		}
		else
		{
			Open_Door(Config_Ptr);
    2682:	88 89       	ldd	r24, Y+16	; 0x10
    2684:	99 89       	ldd	r25, Y+17	; 0x11
    2686:	0e 94 35 12 	call	0x246a	; 0x246a <Open_Door>
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <Main_Menu+0x174>
		}
	}
	else
	{
		return_flag=0;
    268c:	10 92 40 01 	sts	0x0140, r1
	}

}
    2690:	61 96       	adiw	r28, 0x11	; 17
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <main>:
int main(void)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	67 97       	sbiw	r28, 0x17	; 23
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61



	SREG|=(1<<7);
    26b6:	af e5       	ldi	r26, 0x5F	; 95
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	ef e5       	ldi	r30, 0x5F	; 95
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	80 68       	ori	r24, 0x80	; 128
    26c2:	8c 93       	st	X, r24
	LCD_init();
    26c4:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_init>

	Timer1_ConfigType Timer_Config = {PRESCALER_1024,CTC,0,6000};
    26c8:	ce 01       	movw	r24, r28
    26ca:	01 96       	adiw	r24, 0x01	; 1
    26cc:	9f 87       	std	Y+15, r25	; 0x0f
    26ce:	8e 87       	std	Y+14, r24	; 0x0e
    26d0:	e6 e3       	ldi	r30, 0x36	; 54
    26d2:	f1 e0       	ldi	r31, 0x01	; 1
    26d4:	f9 8b       	std	Y+17, r31	; 0x11
    26d6:	e8 8b       	std	Y+16, r30	; 0x10
    26d8:	f6 e0       	ldi	r31, 0x06	; 6
    26da:	fa 8b       	std	Y+18, r31	; 0x12
    26dc:	e8 89       	ldd	r30, Y+16	; 0x10
    26de:	f9 89       	ldd	r31, Y+17	; 0x11
    26e0:	00 80       	ld	r0, Z
    26e2:	88 89       	ldd	r24, Y+16	; 0x10
    26e4:	99 89       	ldd	r25, Y+17	; 0x11
    26e6:	01 96       	adiw	r24, 0x01	; 1
    26e8:	99 8b       	std	Y+17, r25	; 0x11
    26ea:	88 8b       	std	Y+16, r24	; 0x10
    26ec:	ee 85       	ldd	r30, Y+14	; 0x0e
    26ee:	ff 85       	ldd	r31, Y+15	; 0x0f
    26f0:	00 82       	st	Z, r0
    26f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    26f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	9f 87       	std	Y+15, r25	; 0x0f
    26fa:	8e 87       	std	Y+14, r24	; 0x0e
    26fc:	9a 89       	ldd	r25, Y+18	; 0x12
    26fe:	91 50       	subi	r25, 0x01	; 1
    2700:	9a 8b       	std	Y+18, r25	; 0x12
    2702:	ea 89       	ldd	r30, Y+18	; 0x12
    2704:	ee 23       	and	r30, r30
    2706:	51 f7       	brne	.-44     	; 0x26dc <main+0x3a>
		Timer1_setCallBack(Calculate_time);
    2708:	83 ea       	ldi	r24, 0xA3	; 163
    270a:	95 e0       	ldi	r25, 0x05	; 5
    270c:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <Timer1_setCallBack>

	UART_ConfigType UART_Config={BIT_DATA_8,DISABLED,ONE_BIT,9600};
    2710:	ce 01       	movw	r24, r28
    2712:	07 96       	adiw	r24, 0x07	; 7
    2714:	9c 8b       	std	Y+20, r25	; 0x14
    2716:	8b 8b       	std	Y+19, r24	; 0x13
    2718:	ef e2       	ldi	r30, 0x2F	; 47
    271a:	f1 e0       	ldi	r31, 0x01	; 1
    271c:	fe 8b       	std	Y+22, r31	; 0x16
    271e:	ed 8b       	std	Y+21, r30	; 0x15
    2720:	f7 e0       	ldi	r31, 0x07	; 7
    2722:	ff 8b       	std	Y+23, r31	; 0x17
    2724:	ed 89       	ldd	r30, Y+21	; 0x15
    2726:	fe 89       	ldd	r31, Y+22	; 0x16
    2728:	00 80       	ld	r0, Z
    272a:	8d 89       	ldd	r24, Y+21	; 0x15
    272c:	9e 89       	ldd	r25, Y+22	; 0x16
    272e:	01 96       	adiw	r24, 0x01	; 1
    2730:	9e 8b       	std	Y+22, r25	; 0x16
    2732:	8d 8b       	std	Y+21, r24	; 0x15
    2734:	eb 89       	ldd	r30, Y+19	; 0x13
    2736:	fc 89       	ldd	r31, Y+20	; 0x14
    2738:	00 82       	st	Z, r0
    273a:	8b 89       	ldd	r24, Y+19	; 0x13
    273c:	9c 89       	ldd	r25, Y+20	; 0x14
    273e:	01 96       	adiw	r24, 0x01	; 1
    2740:	9c 8b       	std	Y+20, r25	; 0x14
    2742:	8b 8b       	std	Y+19, r24	; 0x13
    2744:	9f 89       	ldd	r25, Y+23	; 0x17
    2746:	91 50       	subi	r25, 0x01	; 1
    2748:	9f 8b       	std	Y+23, r25	; 0x17
    274a:	ef 89       	ldd	r30, Y+23	; 0x17
    274c:	ee 23       	and	r30, r30
    274e:	51 f7       	brne	.-44     	; 0x2724 <main+0x82>
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(&UART_Config);
    2750:	ce 01       	movw	r24, r28
    2752:	07 96       	adiw	r24, 0x07	; 7
    2754:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <UART_init>

	UART_sendByte(M1_READY);
    2758:	80 e1       	ldi	r24, 0x10	; 16
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>
	New_Pass();
    2760:	0e 94 b3 05 	call	0xb66	; 0xb66 <New_Pass>
	{




			Main_Menu(& Timer_Config);
    2764:	ce 01       	movw	r24, r28
    2766:	01 96       	adiw	r24, 0x01	; 1
    2768:	0e 94 8e 12 	call	0x251c	; 0x251c <Main_Menu>
    276c:	fb cf       	rjmp	.-10     	; 0x2764 <main+0xc2>

0000276e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	00 d0       	rcall	.+0      	; 0x2774 <GPIO_setupPinDirection+0x6>
    2774:	00 d0       	rcall	.+0      	; 0x2776 <GPIO_setupPinDirection+0x8>
    2776:	0f 92       	push	r0
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	6a 83       	std	Y+2, r22	; 0x02
    2780:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	88 30       	cpi	r24, 0x08	; 8
    2786:	08 f0       	brcs	.+2      	; 0x278a <GPIO_setupPinDirection+0x1c>
    2788:	d5 c0       	rjmp	.+426    	; 0x2934 <GPIO_setupPinDirection+0x1c6>
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	84 30       	cpi	r24, 0x04	; 4
    278e:	08 f0       	brcs	.+2      	; 0x2792 <GPIO_setupPinDirection+0x24>
    2790:	d1 c0       	rjmp	.+418    	; 0x2934 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	3d 83       	std	Y+5, r19	; 0x05
    279a:	2c 83       	std	Y+4, r18	; 0x04
    279c:	8c 81       	ldd	r24, Y+4	; 0x04
    279e:	9d 81       	ldd	r25, Y+5	; 0x05
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	91 05       	cpc	r25, r1
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <GPIO_setupPinDirection+0x3a>
    27a6:	43 c0       	rjmp	.+134    	; 0x282e <GPIO_setupPinDirection+0xc0>
    27a8:	2c 81       	ldd	r18, Y+4	; 0x04
    27aa:	3d 81       	ldd	r19, Y+5	; 0x05
    27ac:	22 30       	cpi	r18, 0x02	; 2
    27ae:	31 05       	cpc	r19, r1
    27b0:	2c f4       	brge	.+10     	; 0x27bc <GPIO_setupPinDirection+0x4e>
    27b2:	8c 81       	ldd	r24, Y+4	; 0x04
    27b4:	9d 81       	ldd	r25, Y+5	; 0x05
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	71 f0       	breq	.+28     	; 0x27d6 <GPIO_setupPinDirection+0x68>
    27ba:	bc c0       	rjmp	.+376    	; 0x2934 <GPIO_setupPinDirection+0x1c6>
    27bc:	2c 81       	ldd	r18, Y+4	; 0x04
    27be:	3d 81       	ldd	r19, Y+5	; 0x05
    27c0:	22 30       	cpi	r18, 0x02	; 2
    27c2:	31 05       	cpc	r19, r1
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <GPIO_setupPinDirection+0x5a>
    27c6:	5f c0       	rjmp	.+190    	; 0x2886 <GPIO_setupPinDirection+0x118>
    27c8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ca:	9d 81       	ldd	r25, Y+5	; 0x05
    27cc:	83 30       	cpi	r24, 0x03	; 3
    27ce:	91 05       	cpc	r25, r1
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <GPIO_setupPinDirection+0x66>
    27d2:	85 c0       	rjmp	.+266    	; 0x28de <GPIO_setupPinDirection+0x170>
    27d4:	af c0       	rjmp	.+350    	; 0x2934 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	a1 f4       	brne	.+40     	; 0x2804 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    27dc:	aa e3       	ldi	r26, 0x3A	; 58
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	ea e3       	ldi	r30, 0x3A	; 58
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	48 2f       	mov	r20, r24
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	02 2e       	mov	r0, r18
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <GPIO_setupPinDirection+0x8c>
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	0a 94       	dec	r0
    27fc:	e2 f7       	brpl	.-8      	; 0x27f6 <GPIO_setupPinDirection+0x88>
    27fe:	84 2b       	or	r24, r20
    2800:	8c 93       	st	X, r24
    2802:	98 c0       	rjmp	.+304    	; 0x2934 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2804:	aa e3       	ldi	r26, 0x3A	; 58
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	ea e3       	ldi	r30, 0x3A	; 58
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	48 2f       	mov	r20, r24
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	02 2e       	mov	r0, r18
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <GPIO_setupPinDirection+0xb4>
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	0a 94       	dec	r0
    2824:	e2 f7       	brpl	.-8      	; 0x281e <GPIO_setupPinDirection+0xb0>
    2826:	80 95       	com	r24
    2828:	84 23       	and	r24, r20
    282a:	8c 93       	st	X, r24
    282c:	83 c0       	rjmp	.+262    	; 0x2934 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	a1 f4       	brne	.+40     	; 0x285c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2834:	a7 e3       	ldi	r26, 0x37	; 55
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e7 e3       	ldi	r30, 0x37	; 55
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	48 2f       	mov	r20, r24
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	02 2e       	mov	r0, r18
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <GPIO_setupPinDirection+0xe4>
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	0a 94       	dec	r0
    2854:	e2 f7       	brpl	.-8      	; 0x284e <GPIO_setupPinDirection+0xe0>
    2856:	84 2b       	or	r24, r20
    2858:	8c 93       	st	X, r24
    285a:	6c c0       	rjmp	.+216    	; 0x2934 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    285c:	a7 e3       	ldi	r26, 0x37	; 55
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	e7 e3       	ldi	r30, 0x37	; 55
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	48 2f       	mov	r20, r24
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	02 2e       	mov	r0, r18
    2874:	02 c0       	rjmp	.+4      	; 0x287a <GPIO_setupPinDirection+0x10c>
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	0a 94       	dec	r0
    287c:	e2 f7       	brpl	.-8      	; 0x2876 <GPIO_setupPinDirection+0x108>
    287e:	80 95       	com	r24
    2880:	84 23       	and	r24, r20
    2882:	8c 93       	st	X, r24
    2884:	57 c0       	rjmp	.+174    	; 0x2934 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	a1 f4       	brne	.+40     	; 0x28b4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    288c:	a4 e3       	ldi	r26, 0x34	; 52
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	e4 e3       	ldi	r30, 0x34	; 52
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	48 2f       	mov	r20, r24
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	02 2e       	mov	r0, r18
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <GPIO_setupPinDirection+0x13c>
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	0a 94       	dec	r0
    28ac:	e2 f7       	brpl	.-8      	; 0x28a6 <GPIO_setupPinDirection+0x138>
    28ae:	84 2b       	or	r24, r20
    28b0:	8c 93       	st	X, r24
    28b2:	40 c0       	rjmp	.+128    	; 0x2934 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    28b4:	a4 e3       	ldi	r26, 0x34	; 52
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e4 e3       	ldi	r30, 0x34	; 52
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	48 2f       	mov	r20, r24
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	02 2e       	mov	r0, r18
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <GPIO_setupPinDirection+0x164>
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	0a 94       	dec	r0
    28d4:	e2 f7       	brpl	.-8      	; 0x28ce <GPIO_setupPinDirection+0x160>
    28d6:	80 95       	com	r24
    28d8:	84 23       	and	r24, r20
    28da:	8c 93       	st	X, r24
    28dc:	2b c0       	rjmp	.+86     	; 0x2934 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    28de:	8b 81       	ldd	r24, Y+3	; 0x03
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	a1 f4       	brne	.+40     	; 0x290c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    28e4:	a1 e3       	ldi	r26, 0x31	; 49
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e1 e3       	ldi	r30, 0x31	; 49
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	48 2f       	mov	r20, r24
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	02 2e       	mov	r0, r18
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <GPIO_setupPinDirection+0x194>
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	0a 94       	dec	r0
    2904:	e2 f7       	brpl	.-8      	; 0x28fe <GPIO_setupPinDirection+0x190>
    2906:	84 2b       	or	r24, r20
    2908:	8c 93       	st	X, r24
    290a:	14 c0       	rjmp	.+40     	; 0x2934 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    290c:	a1 e3       	ldi	r26, 0x31	; 49
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e1 e3       	ldi	r30, 0x31	; 49
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	48 2f       	mov	r20, r24
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	02 2e       	mov	r0, r18
    2924:	02 c0       	rjmp	.+4      	; 0x292a <GPIO_setupPinDirection+0x1bc>
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	0a 94       	dec	r0
    292c:	e2 f7       	brpl	.-8      	; 0x2926 <GPIO_setupPinDirection+0x1b8>
    292e:	80 95       	com	r24
    2930:	84 23       	and	r24, r20
    2932:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	00 d0       	rcall	.+0      	; 0x294a <GPIO_writePin+0x6>
    294a:	00 d0       	rcall	.+0      	; 0x294c <GPIO_writePin+0x8>
    294c:	0f 92       	push	r0
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	6a 83       	std	Y+2, r22	; 0x02
    2956:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	88 30       	cpi	r24, 0x08	; 8
    295c:	08 f0       	brcs	.+2      	; 0x2960 <GPIO_writePin+0x1c>
    295e:	d5 c0       	rjmp	.+426    	; 0x2b0a <GPIO_writePin+0x1c6>
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	84 30       	cpi	r24, 0x04	; 4
    2964:	08 f0       	brcs	.+2      	; 0x2968 <GPIO_writePin+0x24>
    2966:	d1 c0       	rjmp	.+418    	; 0x2b0a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	3d 83       	std	Y+5, r19	; 0x05
    2970:	2c 83       	std	Y+4, r18	; 0x04
    2972:	8c 81       	ldd	r24, Y+4	; 0x04
    2974:	9d 81       	ldd	r25, Y+5	; 0x05
    2976:	81 30       	cpi	r24, 0x01	; 1
    2978:	91 05       	cpc	r25, r1
    297a:	09 f4       	brne	.+2      	; 0x297e <GPIO_writePin+0x3a>
    297c:	43 c0       	rjmp	.+134    	; 0x2a04 <GPIO_writePin+0xc0>
    297e:	2c 81       	ldd	r18, Y+4	; 0x04
    2980:	3d 81       	ldd	r19, Y+5	; 0x05
    2982:	22 30       	cpi	r18, 0x02	; 2
    2984:	31 05       	cpc	r19, r1
    2986:	2c f4       	brge	.+10     	; 0x2992 <GPIO_writePin+0x4e>
    2988:	8c 81       	ldd	r24, Y+4	; 0x04
    298a:	9d 81       	ldd	r25, Y+5	; 0x05
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	71 f0       	breq	.+28     	; 0x29ac <GPIO_writePin+0x68>
    2990:	bc c0       	rjmp	.+376    	; 0x2b0a <GPIO_writePin+0x1c6>
    2992:	2c 81       	ldd	r18, Y+4	; 0x04
    2994:	3d 81       	ldd	r19, Y+5	; 0x05
    2996:	22 30       	cpi	r18, 0x02	; 2
    2998:	31 05       	cpc	r19, r1
    299a:	09 f4       	brne	.+2      	; 0x299e <GPIO_writePin+0x5a>
    299c:	5f c0       	rjmp	.+190    	; 0x2a5c <GPIO_writePin+0x118>
    299e:	8c 81       	ldd	r24, Y+4	; 0x04
    29a0:	9d 81       	ldd	r25, Y+5	; 0x05
    29a2:	83 30       	cpi	r24, 0x03	; 3
    29a4:	91 05       	cpc	r25, r1
    29a6:	09 f4       	brne	.+2      	; 0x29aa <GPIO_writePin+0x66>
    29a8:	85 c0       	rjmp	.+266    	; 0x2ab4 <GPIO_writePin+0x170>
    29aa:	af c0       	rjmp	.+350    	; 0x2b0a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	81 30       	cpi	r24, 0x01	; 1
    29b0:	a1 f4       	brne	.+40     	; 0x29da <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    29b2:	ab e3       	ldi	r26, 0x3B	; 59
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	eb e3       	ldi	r30, 0x3B	; 59
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	48 2f       	mov	r20, r24
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
    29c0:	28 2f       	mov	r18, r24
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	02 2e       	mov	r0, r18
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <GPIO_writePin+0x8c>
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	0a 94       	dec	r0
    29d2:	e2 f7       	brpl	.-8      	; 0x29cc <GPIO_writePin+0x88>
    29d4:	84 2b       	or	r24, r20
    29d6:	8c 93       	st	X, r24
    29d8:	98 c0       	rjmp	.+304    	; 0x2b0a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    29da:	ab e3       	ldi	r26, 0x3B	; 59
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	eb e3       	ldi	r30, 0x3B	; 59
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	48 2f       	mov	r20, r24
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	02 2e       	mov	r0, r18
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <GPIO_writePin+0xb4>
    29f4:	88 0f       	add	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	0a 94       	dec	r0
    29fa:	e2 f7       	brpl	.-8      	; 0x29f4 <GPIO_writePin+0xb0>
    29fc:	80 95       	com	r24
    29fe:	84 23       	and	r24, r20
    2a00:	8c 93       	st	X, r24
    2a02:	83 c0       	rjmp	.+262    	; 0x2b0a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	81 30       	cpi	r24, 0x01	; 1
    2a08:	a1 f4       	brne	.+40     	; 0x2a32 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2a0a:	a8 e3       	ldi	r26, 0x38	; 56
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e8 e3       	ldi	r30, 0x38	; 56
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	48 2f       	mov	r20, r24
    2a16:	8a 81       	ldd	r24, Y+2	; 0x02
    2a18:	28 2f       	mov	r18, r24
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	02 2e       	mov	r0, r18
    2a22:	02 c0       	rjmp	.+4      	; 0x2a28 <GPIO_writePin+0xe4>
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	0a 94       	dec	r0
    2a2a:	e2 f7       	brpl	.-8      	; 0x2a24 <GPIO_writePin+0xe0>
    2a2c:	84 2b       	or	r24, r20
    2a2e:	8c 93       	st	X, r24
    2a30:	6c c0       	rjmp	.+216    	; 0x2b0a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2a32:	a8 e3       	ldi	r26, 0x38	; 56
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e8 e3       	ldi	r30, 0x38	; 56
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	48 2f       	mov	r20, r24
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	28 2f       	mov	r18, r24
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	02 2e       	mov	r0, r18
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <GPIO_writePin+0x10c>
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	0a 94       	dec	r0
    2a52:	e2 f7       	brpl	.-8      	; 0x2a4c <GPIO_writePin+0x108>
    2a54:	80 95       	com	r24
    2a56:	84 23       	and	r24, r20
    2a58:	8c 93       	st	X, r24
    2a5a:	57 c0       	rjmp	.+174    	; 0x2b0a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	a1 f4       	brne	.+40     	; 0x2a8a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2a62:	a5 e3       	ldi	r26, 0x35	; 53
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e5 e3       	ldi	r30, 0x35	; 53
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	48 2f       	mov	r20, r24
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	02 2e       	mov	r0, r18
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <GPIO_writePin+0x13c>
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	0a 94       	dec	r0
    2a82:	e2 f7       	brpl	.-8      	; 0x2a7c <GPIO_writePin+0x138>
    2a84:	84 2b       	or	r24, r20
    2a86:	8c 93       	st	X, r24
    2a88:	40 c0       	rjmp	.+128    	; 0x2b0a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2a8a:	a5 e3       	ldi	r26, 0x35	; 53
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e5 e3       	ldi	r30, 0x35	; 53
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	48 2f       	mov	r20, r24
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	02 2e       	mov	r0, r18
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <GPIO_writePin+0x164>
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	0a 94       	dec	r0
    2aaa:	e2 f7       	brpl	.-8      	; 0x2aa4 <GPIO_writePin+0x160>
    2aac:	80 95       	com	r24
    2aae:	84 23       	and	r24, r20
    2ab0:	8c 93       	st	X, r24
    2ab2:	2b c0       	rjmp	.+86     	; 0x2b0a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	81 30       	cpi	r24, 0x01	; 1
    2ab8:	a1 f4       	brne	.+40     	; 0x2ae2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2aba:	a2 e3       	ldi	r26, 0x32	; 50
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e2 e3       	ldi	r30, 0x32	; 50
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	48 2f       	mov	r20, r24
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	02 2e       	mov	r0, r18
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <GPIO_writePin+0x194>
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	0a 94       	dec	r0
    2ada:	e2 f7       	brpl	.-8      	; 0x2ad4 <GPIO_writePin+0x190>
    2adc:	84 2b       	or	r24, r20
    2ade:	8c 93       	st	X, r24
    2ae0:	14 c0       	rjmp	.+40     	; 0x2b0a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2ae2:	a2 e3       	ldi	r26, 0x32	; 50
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e2 e3       	ldi	r30, 0x32	; 50
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	48 2f       	mov	r20, r24
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	28 2f       	mov	r18, r24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	02 2e       	mov	r0, r18
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <GPIO_writePin+0x1bc>
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	0a 94       	dec	r0
    2b02:	e2 f7       	brpl	.-8      	; 0x2afc <GPIO_writePin+0x1b8>
    2b04:	80 95       	com	r24
    2b06:	84 23       	and	r24, r20
    2b08:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <GPIO_readPin+0x6>
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <GPIO_readPin+0x8>
    2b22:	0f 92       	push	r0
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	8a 83       	std	Y+2, r24	; 0x02
    2b2a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2b2c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	88 30       	cpi	r24, 0x08	; 8
    2b32:	08 f0       	brcs	.+2      	; 0x2b36 <GPIO_readPin+0x1c>
    2b34:	84 c0       	rjmp	.+264    	; 0x2c3e <GPIO_readPin+0x124>
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	84 30       	cpi	r24, 0x04	; 4
    2b3a:	08 f0       	brcs	.+2      	; 0x2b3e <GPIO_readPin+0x24>
    2b3c:	80 c0       	rjmp	.+256    	; 0x2c3e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	3d 83       	std	Y+5, r19	; 0x05
    2b46:	2c 83       	std	Y+4, r18	; 0x04
    2b48:	4c 81       	ldd	r20, Y+4	; 0x04
    2b4a:	5d 81       	ldd	r21, Y+5	; 0x05
    2b4c:	41 30       	cpi	r20, 0x01	; 1
    2b4e:	51 05       	cpc	r21, r1
    2b50:	79 f1       	breq	.+94     	; 0x2bb0 <GPIO_readPin+0x96>
    2b52:	8c 81       	ldd	r24, Y+4	; 0x04
    2b54:	9d 81       	ldd	r25, Y+5	; 0x05
    2b56:	82 30       	cpi	r24, 0x02	; 2
    2b58:	91 05       	cpc	r25, r1
    2b5a:	34 f4       	brge	.+12     	; 0x2b68 <GPIO_readPin+0x4e>
    2b5c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b5e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b60:	21 15       	cp	r18, r1
    2b62:	31 05       	cpc	r19, r1
    2b64:	69 f0       	breq	.+26     	; 0x2b80 <GPIO_readPin+0x66>
    2b66:	6b c0       	rjmp	.+214    	; 0x2c3e <GPIO_readPin+0x124>
    2b68:	4c 81       	ldd	r20, Y+4	; 0x04
    2b6a:	5d 81       	ldd	r21, Y+5	; 0x05
    2b6c:	42 30       	cpi	r20, 0x02	; 2
    2b6e:	51 05       	cpc	r21, r1
    2b70:	b9 f1       	breq	.+110    	; 0x2be0 <GPIO_readPin+0xc6>
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	9d 81       	ldd	r25, Y+5	; 0x05
    2b76:	83 30       	cpi	r24, 0x03	; 3
    2b78:	91 05       	cpc	r25, r1
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <GPIO_readPin+0x64>
    2b7c:	49 c0       	rjmp	.+146    	; 0x2c10 <GPIO_readPin+0xf6>
    2b7e:	5f c0       	rjmp	.+190    	; 0x2c3e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2b80:	e9 e3       	ldi	r30, 0x39	; 57
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	88 2f       	mov	r24, r24
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a9 01       	movw	r20, r18
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <GPIO_readPin+0x7e>
    2b94:	55 95       	asr	r21
    2b96:	47 95       	ror	r20
    2b98:	8a 95       	dec	r24
    2b9a:	e2 f7       	brpl	.-8      	; 0x2b94 <GPIO_readPin+0x7a>
    2b9c:	ca 01       	movw	r24, r20
    2b9e:	81 70       	andi	r24, 0x01	; 1
    2ba0:	90 70       	andi	r25, 0x00	; 0
    2ba2:	88 23       	and	r24, r24
    2ba4:	19 f0       	breq	.+6      	; 0x2bac <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	49 c0       	rjmp	.+146    	; 0x2c3e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2bac:	19 82       	std	Y+1, r1	; 0x01
    2bae:	47 c0       	rjmp	.+142    	; 0x2c3e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2bb0:	e6 e3       	ldi	r30, 0x36	; 54
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a9 01       	movw	r20, r18
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <GPIO_readPin+0xae>
    2bc4:	55 95       	asr	r21
    2bc6:	47 95       	ror	r20
    2bc8:	8a 95       	dec	r24
    2bca:	e2 f7       	brpl	.-8      	; 0x2bc4 <GPIO_readPin+0xaa>
    2bcc:	ca 01       	movw	r24, r20
    2bce:	81 70       	andi	r24, 0x01	; 1
    2bd0:	90 70       	andi	r25, 0x00	; 0
    2bd2:	88 23       	and	r24, r24
    2bd4:	19 f0       	breq	.+6      	; 0x2bdc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	31 c0       	rjmp	.+98     	; 0x2c3e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2bdc:	19 82       	std	Y+1, r1	; 0x01
    2bde:	2f c0       	rjmp	.+94     	; 0x2c3e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2be0:	e3 e3       	ldi	r30, 0x33	; 51
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	28 2f       	mov	r18, r24
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	8b 81       	ldd	r24, Y+3	; 0x03
    2bec:	88 2f       	mov	r24, r24
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a9 01       	movw	r20, r18
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <GPIO_readPin+0xde>
    2bf4:	55 95       	asr	r21
    2bf6:	47 95       	ror	r20
    2bf8:	8a 95       	dec	r24
    2bfa:	e2 f7       	brpl	.-8      	; 0x2bf4 <GPIO_readPin+0xda>
    2bfc:	ca 01       	movw	r24, r20
    2bfe:	81 70       	andi	r24, 0x01	; 1
    2c00:	90 70       	andi	r25, 0x00	; 0
    2c02:	88 23       	and	r24, r24
    2c04:	19 f0       	breq	.+6      	; 0x2c0c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	19 c0       	rjmp	.+50     	; 0x2c3e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2c0c:	19 82       	std	Y+1, r1	; 0x01
    2c0e:	17 c0       	rjmp	.+46     	; 0x2c3e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2c10:	e0 e3       	ldi	r30, 0x30	; 48
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	88 2f       	mov	r24, r24
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	a9 01       	movw	r20, r18
    2c22:	02 c0       	rjmp	.+4      	; 0x2c28 <GPIO_readPin+0x10e>
    2c24:	55 95       	asr	r21
    2c26:	47 95       	ror	r20
    2c28:	8a 95       	dec	r24
    2c2a:	e2 f7       	brpl	.-8      	; 0x2c24 <GPIO_readPin+0x10a>
    2c2c:	ca 01       	movw	r24, r20
    2c2e:	81 70       	andi	r24, 0x01	; 1
    2c30:	90 70       	andi	r25, 0x00	; 0
    2c32:	88 23       	and	r24, r24
    2c34:	19 f0       	breq	.+6      	; 0x2c3c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	89 83       	std	Y+1, r24	; 0x01
    2c3a:	01 c0       	rjmp	.+2      	; 0x2c3e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2c3c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <GPIO_setupPortDirection+0x6>
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <GPIO_setupPortDirection+0x8>
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	84 30       	cpi	r24, 0x04	; 4
    2c64:	90 f5       	brcc	.+100    	; 0x2cca <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	3c 83       	std	Y+4, r19	; 0x04
    2c6e:	2b 83       	std	Y+3, r18	; 0x03
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	81 30       	cpi	r24, 0x01	; 1
    2c76:	91 05       	cpc	r25, r1
    2c78:	d1 f0       	breq	.+52     	; 0x2cae <GPIO_setupPortDirection+0x5e>
    2c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c7e:	22 30       	cpi	r18, 0x02	; 2
    2c80:	31 05       	cpc	r19, r1
    2c82:	2c f4       	brge	.+10     	; 0x2c8e <GPIO_setupPortDirection+0x3e>
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	9c 81       	ldd	r25, Y+4	; 0x04
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	61 f0       	breq	.+24     	; 0x2ca4 <GPIO_setupPortDirection+0x54>
    2c8c:	1e c0       	rjmp	.+60     	; 0x2cca <GPIO_setupPortDirection+0x7a>
    2c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c90:	3c 81       	ldd	r19, Y+4	; 0x04
    2c92:	22 30       	cpi	r18, 0x02	; 2
    2c94:	31 05       	cpc	r19, r1
    2c96:	81 f0       	breq	.+32     	; 0x2cb8 <GPIO_setupPortDirection+0x68>
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9c:	83 30       	cpi	r24, 0x03	; 3
    2c9e:	91 05       	cpc	r25, r1
    2ca0:	81 f0       	breq	.+32     	; 0x2cc2 <GPIO_setupPortDirection+0x72>
    2ca2:	13 c0       	rjmp	.+38     	; 0x2cca <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2ca4:	ea e3       	ldi	r30, 0x3A	; 58
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	80 83       	st	Z, r24
    2cac:	0e c0       	rjmp	.+28     	; 0x2cca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2cae:	e7 e3       	ldi	r30, 0x37	; 55
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	80 83       	st	Z, r24
    2cb6:	09 c0       	rjmp	.+18     	; 0x2cca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2cb8:	e4 e3       	ldi	r30, 0x34	; 52
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	80 83       	st	Z, r24
    2cc0:	04 c0       	rjmp	.+8      	; 0x2cca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2cc2:	e1 e3       	ldi	r30, 0x31	; 49
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	80 83       	st	Z, r24
			break;
		}
	}
}
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	00 d0       	rcall	.+0      	; 0x2cde <GPIO_writePort+0x6>
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <GPIO_writePort+0x8>
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	89 83       	std	Y+1, r24	; 0x01
    2ce6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	84 30       	cpi	r24, 0x04	; 4
    2cec:	90 f5       	brcc	.+100    	; 0x2d52 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	3c 83       	std	Y+4, r19	; 0x04
    2cf6:	2b 83       	std	Y+3, r18	; 0x03
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfc:	81 30       	cpi	r24, 0x01	; 1
    2cfe:	91 05       	cpc	r25, r1
    2d00:	d1 f0       	breq	.+52     	; 0x2d36 <GPIO_writePort+0x5e>
    2d02:	2b 81       	ldd	r18, Y+3	; 0x03
    2d04:	3c 81       	ldd	r19, Y+4	; 0x04
    2d06:	22 30       	cpi	r18, 0x02	; 2
    2d08:	31 05       	cpc	r19, r1
    2d0a:	2c f4       	brge	.+10     	; 0x2d16 <GPIO_writePort+0x3e>
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	61 f0       	breq	.+24     	; 0x2d2c <GPIO_writePort+0x54>
    2d14:	1e c0       	rjmp	.+60     	; 0x2d52 <GPIO_writePort+0x7a>
    2d16:	2b 81       	ldd	r18, Y+3	; 0x03
    2d18:	3c 81       	ldd	r19, Y+4	; 0x04
    2d1a:	22 30       	cpi	r18, 0x02	; 2
    2d1c:	31 05       	cpc	r19, r1
    2d1e:	81 f0       	breq	.+32     	; 0x2d40 <GPIO_writePort+0x68>
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	9c 81       	ldd	r25, Y+4	; 0x04
    2d24:	83 30       	cpi	r24, 0x03	; 3
    2d26:	91 05       	cpc	r25, r1
    2d28:	81 f0       	breq	.+32     	; 0x2d4a <GPIO_writePort+0x72>
    2d2a:	13 c0       	rjmp	.+38     	; 0x2d52 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2d2c:	eb e3       	ldi	r30, 0x3B	; 59
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	80 83       	st	Z, r24
    2d34:	0e c0       	rjmp	.+28     	; 0x2d52 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2d36:	e8 e3       	ldi	r30, 0x38	; 56
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	80 83       	st	Z, r24
    2d3e:	09 c0       	rjmp	.+18     	; 0x2d52 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2d40:	e5 e3       	ldi	r30, 0x35	; 53
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	80 83       	st	Z, r24
    2d48:	04 c0       	rjmp	.+8      	; 0x2d52 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2d4a:	e2 e3       	ldi	r30, 0x32	; 50
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	80 83       	st	Z, r24
			break;
		}
	}
}
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <GPIO_readPort+0x6>
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <GPIO_readPort+0x8>
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2d6e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	84 30       	cpi	r24, 0x04	; 4
    2d74:	90 f5       	brcc	.+100    	; 0x2dda <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	3c 83       	std	Y+4, r19	; 0x04
    2d7e:	2b 83       	std	Y+3, r18	; 0x03
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	9c 81       	ldd	r25, Y+4	; 0x04
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	91 05       	cpc	r25, r1
    2d88:	d1 f0       	breq	.+52     	; 0x2dbe <GPIO_readPort+0x5e>
    2d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d8e:	22 30       	cpi	r18, 0x02	; 2
    2d90:	31 05       	cpc	r19, r1
    2d92:	2c f4       	brge	.+10     	; 0x2d9e <GPIO_readPort+0x3e>
    2d94:	8b 81       	ldd	r24, Y+3	; 0x03
    2d96:	9c 81       	ldd	r25, Y+4	; 0x04
    2d98:	00 97       	sbiw	r24, 0x00	; 0
    2d9a:	61 f0       	breq	.+24     	; 0x2db4 <GPIO_readPort+0x54>
    2d9c:	1e c0       	rjmp	.+60     	; 0x2dda <GPIO_readPort+0x7a>
    2d9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2da0:	3c 81       	ldd	r19, Y+4	; 0x04
    2da2:	22 30       	cpi	r18, 0x02	; 2
    2da4:	31 05       	cpc	r19, r1
    2da6:	81 f0       	breq	.+32     	; 0x2dc8 <GPIO_readPort+0x68>
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	83 30       	cpi	r24, 0x03	; 3
    2dae:	91 05       	cpc	r25, r1
    2db0:	81 f0       	breq	.+32     	; 0x2dd2 <GPIO_readPort+0x72>
    2db2:	13 c0       	rjmp	.+38     	; 0x2dda <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2db4:	e9 e3       	ldi	r30, 0x39	; 57
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	0e c0       	rjmp	.+28     	; 0x2dda <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2dbe:	e6 e3       	ldi	r30, 0x36	; 54
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	89 83       	std	Y+1, r24	; 0x01
    2dc6:	09 c0       	rjmp	.+18     	; 0x2dda <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2dc8:	e3 e3       	ldi	r30, 0x33	; 51
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	89 83       	std	Y+1, r24	; 0x01
    2dd0:	04 c0       	rjmp	.+8      	; 0x2dda <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2dd2:	e0 e3       	ldi	r30, 0x30	; 48
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	cf 91       	pop	r28
    2de6:	df 91       	pop	r29
    2de8:	08 95       	ret

00002dea <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2dea:	df 93       	push	r29
    2dec:	cf 93       	push	r28
    2dee:	00 d0       	rcall	.+0      	; 0x2df0 <KEYPAD_getPressedKey+0x6>
    2df0:	0f 92       	push	r0
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2df6:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2df8:	1b 82       	std	Y+3, r1	; 0x03
    2dfa:	43 c0       	rjmp	.+134    	; 0x2e82 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	0e 94 28 16 	call	0x2c50	; 0x2c50 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	98 2f       	mov	r25, r24
    2e08:	9c 5f       	subi	r25, 0xFC	; 252
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	69 2f       	mov	r22, r25
    2e0e:	41 e0       	ldi	r20, 0x01	; 1
    2e10:	0e 94 b7 13 	call	0x276e	; 0x276e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	88 2f       	mov	r24, r24
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9c 01       	movw	r18, r24
    2e1c:	2c 5f       	subi	r18, 0xFC	; 252
    2e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <KEYPAD_getPressedKey+0x40>
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	2a 95       	dec	r18
    2e2c:	e2 f7       	brpl	.-8      	; 0x2e26 <KEYPAD_getPressedKey+0x3c>
    2e2e:	80 95       	com	r24
    2e30:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	69 81       	ldd	r22, Y+1	; 0x01
    2e36:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2e3a:	1a 82       	std	Y+2, r1	; 0x02
    2e3c:	1c c0       	rjmp	.+56     	; 0x2e76 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	6a 81       	ldd	r22, Y+2	; 0x02
    2e42:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <GPIO_readPin>
    2e46:	88 23       	and	r24, r24
    2e48:	99 f4       	brne	.+38     	; 0x2e70 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	88 2f       	mov	r24, r24
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	98 2f       	mov	r25, r24
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	89 0f       	add	r24, r25
    2e5e:	8f 5f       	subi	r24, 0xFF	; 255
    2e60:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	8f 5f       	subi	r24, 0xFF	; 255
    2e74:	8a 83       	std	Y+2, r24	; 0x02
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	84 30       	cpi	r24, 0x04	; 4
    2e7a:	08 f3       	brcs	.-62     	; 0x2e3e <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	8f 5f       	subi	r24, 0xFF	; 255
    2e80:	8b 83       	std	Y+3, r24	; 0x03
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	84 30       	cpi	r24, 0x04	; 4
    2e86:	08 f4       	brcc	.+2      	; 0x2e8a <KEYPAD_getPressedKey+0xa0>
    2e88:	b9 cf       	rjmp	.-142    	; 0x2dfc <KEYPAD_getPressedKey+0x12>
    2e8a:	b6 cf       	rjmp	.-148    	; 0x2df8 <KEYPAD_getPressedKey+0xe>

00002e8c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2e9a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	3c 83       	std	Y+4, r19	; 0x04
    2ea4:	2b 83       	std	Y+3, r18	; 0x03
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eaa:	88 30       	cpi	r24, 0x08	; 8
    2eac:	91 05       	cpc	r25, r1
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2eb0:	70 c0       	rjmp	.+224    	; 0x2f92 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2eb2:	2b 81       	ldd	r18, Y+3	; 0x03
    2eb4:	3c 81       	ldd	r19, Y+4	; 0x04
    2eb6:	29 30       	cpi	r18, 0x09	; 9
    2eb8:	31 05       	cpc	r19, r1
    2eba:	5c f5       	brge	.+86     	; 0x2f12 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec0:	84 30       	cpi	r24, 0x04	; 4
    2ec2:	91 05       	cpc	r25, r1
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2ec6:	59 c0       	rjmp	.+178    	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0xee>
    2ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eca:	3c 81       	ldd	r19, Y+4	; 0x04
    2ecc:	25 30       	cpi	r18, 0x05	; 5
    2ece:	31 05       	cpc	r19, r1
    2ed0:	9c f4       	brge	.+38     	; 0x2ef8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	82 30       	cpi	r24, 0x02	; 2
    2ed8:	91 05       	cpc	r25, r1
    2eda:	09 f4       	brne	.+2      	; 0x2ede <KEYPAD_4x4_adjustKeyNumber+0x52>
    2edc:	48 c0       	rjmp	.+144    	; 0x2f6e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2ede:	2b 81       	ldd	r18, Y+3	; 0x03
    2ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ee2:	23 30       	cpi	r18, 0x03	; 3
    2ee4:	31 05       	cpc	r19, r1
    2ee6:	0c f0       	brlt	.+2      	; 0x2eea <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2ee8:	45 c0       	rjmp	.+138    	; 0x2f74 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	9c 81       	ldd	r25, Y+4	; 0x04
    2eee:	81 30       	cpi	r24, 0x01	; 1
    2ef0:	91 05       	cpc	r25, r1
    2ef2:	09 f4       	brne	.+2      	; 0x2ef6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2ef4:	39 c0       	rjmp	.+114    	; 0x2f68 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2ef6:	67 c0       	rjmp	.+206    	; 0x2fc6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    2efa:	3c 81       	ldd	r19, Y+4	; 0x04
    2efc:	26 30       	cpi	r18, 0x06	; 6
    2efe:	31 05       	cpc	r19, r1
    2f00:	09 f4       	brne	.+2      	; 0x2f04 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2f02:	41 c0       	rjmp	.+130    	; 0x2f86 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	9c 81       	ldd	r25, Y+4	; 0x04
    2f08:	87 30       	cpi	r24, 0x07	; 7
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	0c f0       	brlt	.+2      	; 0x2f10 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2f0e:	3e c0       	rjmp	.+124    	; 0x2f8c <KEYPAD_4x4_adjustKeyNumber+0x100>
    2f10:	37 c0       	rjmp	.+110    	; 0x2f80 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2f12:	2b 81       	ldd	r18, Y+3	; 0x03
    2f14:	3c 81       	ldd	r19, Y+4	; 0x04
    2f16:	2c 30       	cpi	r18, 0x0C	; 12
    2f18:	31 05       	cpc	r19, r1
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <KEYPAD_4x4_adjustKeyNumber+0x92>
    2f1c:	46 c0       	rjmp	.+140    	; 0x2faa <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	9c 81       	ldd	r25, Y+4	; 0x04
    2f22:	8d 30       	cpi	r24, 0x0D	; 13
    2f24:	91 05       	cpc	r25, r1
    2f26:	5c f4       	brge	.+22     	; 0x2f3e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2f28:	2b 81       	ldd	r18, Y+3	; 0x03
    2f2a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f2c:	2a 30       	cpi	r18, 0x0A	; 10
    2f2e:	31 05       	cpc	r19, r1
    2f30:	b1 f1       	breq	.+108    	; 0x2f9e <KEYPAD_4x4_adjustKeyNumber+0x112>
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	9c 81       	ldd	r25, Y+4	; 0x04
    2f36:	8b 30       	cpi	r24, 0x0B	; 11
    2f38:	91 05       	cpc	r25, r1
    2f3a:	a4 f5       	brge	.+104    	; 0x2fa4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2f3c:	2d c0       	rjmp	.+90     	; 0x2f98 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2f3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2f40:	3c 81       	ldd	r19, Y+4	; 0x04
    2f42:	2e 30       	cpi	r18, 0x0E	; 14
    2f44:	31 05       	cpc	r19, r1
    2f46:	b9 f1       	breq	.+110    	; 0x2fb6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4c:	8e 30       	cpi	r24, 0x0E	; 14
    2f4e:	91 05       	cpc	r25, r1
    2f50:	7c f1       	brlt	.+94     	; 0x2fb0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2f52:	2b 81       	ldd	r18, Y+3	; 0x03
    2f54:	3c 81       	ldd	r19, Y+4	; 0x04
    2f56:	2f 30       	cpi	r18, 0x0F	; 15
    2f58:	31 05       	cpc	r19, r1
    2f5a:	79 f1       	breq	.+94     	; 0x2fba <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f60:	80 31       	cpi	r24, 0x10	; 16
    2f62:	91 05       	cpc	r25, r1
    2f64:	69 f1       	breq	.+90     	; 0x2fc0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2f66:	2f c0       	rjmp	.+94     	; 0x2fc6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2f68:	87 e0       	ldi	r24, 0x07	; 7
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	2e c0       	rjmp	.+92     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2f6e:	88 e0       	ldi	r24, 0x08	; 8
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	2b c0       	rjmp	.+86     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2f74:	89 e0       	ldi	r24, 0x09	; 9
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	28 c0       	rjmp	.+80     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2f7a:	85 e2       	ldi	r24, 0x25	; 37
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	25 c0       	rjmp	.+74     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2f80:	84 e0       	ldi	r24, 0x04	; 4
    2f82:	89 83       	std	Y+1, r24	; 0x01
    2f84:	22 c0       	rjmp	.+68     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2f86:	85 e0       	ldi	r24, 0x05	; 5
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	1f c0       	rjmp	.+62     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2f8c:	86 e0       	ldi	r24, 0x06	; 6
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	1c c0       	rjmp	.+56     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2f92:	8a e2       	ldi	r24, 0x2A	; 42
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	19 c0       	rjmp	.+50     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	16 c0       	rjmp	.+44     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	13 c0       	rjmp	.+38     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2fa4:	83 e0       	ldi	r24, 0x03	; 3
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	10 c0       	rjmp	.+32     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2faa:	8d e2       	ldi	r24, 0x2D	; 45
    2fac:	89 83       	std	Y+1, r24	; 0x01
    2fae:	0d c0       	rjmp	.+26     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2fb0:	8d e0       	ldi	r24, 0x0D	; 13
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	0a c0       	rjmp	.+20     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2fb6:	19 82       	std	Y+1, r1	; 0x01
    2fb8:	08 c0       	rjmp	.+16     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2fba:	8d e3       	ldi	r24, 0x3D	; 61
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	05 c0       	rjmp	.+10     	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2fc0:	8b e2       	ldi	r24, 0x2B	; 43
    2fc2:	89 83       	std	Y+1, r24	; 0x01
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	60 e0       	ldi	r22, 0x00	; 0
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	0e 94 b7 13 	call	0x276e	; 0x276e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2fec:	82 e0       	ldi	r24, 0x02	; 2
    2fee:	61 e0       	ldi	r22, 0x01	; 1
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	0e 94 b7 13 	call	0x276e	; 0x276e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	62 e0       	ldi	r22, 0x02	; 2
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	0e 94 b7 13 	call	0x276e	; 0x276e <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	6f ef       	ldi	r22, 0xFF	; 255
    3004:	0e 94 28 16 	call	0x2c50	; 0x2c50 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    3008:	88 e3       	ldi	r24, 0x38	; 56
    300a:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    300e:	8c e0       	ldi	r24, 0x0C	; 12
    3010:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_sendCommand>
}
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	e9 97       	sbiw	r28, 0x39	; 57
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3036:	82 e0       	ldi	r24, 0x02	; 2
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	40 e0       	ldi	r20, 0x00	; 0
    303c:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    3040:	82 e0       	ldi	r24, 0x02	; 2
    3042:	61 e0       	ldi	r22, 0x01	; 1
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_writePin>
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	a0 e8       	ldi	r26, 0x80	; 128
    3050:	bf e3       	ldi	r27, 0x3F	; 63
    3052:	8d ab       	std	Y+53, r24	; 0x35
    3054:	9e ab       	std	Y+54, r25	; 0x36
    3056:	af ab       	std	Y+55, r26	; 0x37
    3058:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305a:	6d a9       	ldd	r22, Y+53	; 0x35
    305c:	7e a9       	ldd	r23, Y+54	; 0x36
    305e:	8f a9       	ldd	r24, Y+55	; 0x37
    3060:	98 ad       	ldd	r25, Y+56	; 0x38
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	4a ef       	ldi	r20, 0xFA	; 250
    3068:	54 e4       	ldi	r21, 0x44	; 68
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	89 ab       	std	Y+49, r24	; 0x31
    3074:	9a ab       	std	Y+50, r25	; 0x32
    3076:	ab ab       	std	Y+51, r26	; 0x33
    3078:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    307a:	69 a9       	ldd	r22, Y+49	; 0x31
    307c:	7a a9       	ldd	r23, Y+50	; 0x32
    307e:	8b a9       	ldd	r24, Y+51	; 0x33
    3080:	9c a9       	ldd	r25, Y+52	; 0x34
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	40 e8       	ldi	r20, 0x80	; 128
    3088:	5f e3       	ldi	r21, 0x3F	; 63
    308a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    308e:	88 23       	and	r24, r24
    3090:	2c f4       	brge	.+10     	; 0x309c <LCD_sendCommand+0x7c>
		__ticks = 1;
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	98 ab       	std	Y+48, r25	; 0x30
    3098:	8f a7       	std	Y+47, r24	; 0x2f
    309a:	3f c0       	rjmp	.+126    	; 0x311a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    309c:	69 a9       	ldd	r22, Y+49	; 0x31
    309e:	7a a9       	ldd	r23, Y+50	; 0x32
    30a0:	8b a9       	ldd	r24, Y+51	; 0x33
    30a2:	9c a9       	ldd	r25, Y+52	; 0x34
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	3f ef       	ldi	r19, 0xFF	; 255
    30a8:	4f e7       	ldi	r20, 0x7F	; 127
    30aa:	57 e4       	ldi	r21, 0x47	; 71
    30ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b0:	18 16       	cp	r1, r24
    30b2:	4c f5       	brge	.+82     	; 0x3106 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b4:	6d a9       	ldd	r22, Y+53	; 0x35
    30b6:	7e a9       	ldd	r23, Y+54	; 0x36
    30b8:	8f a9       	ldd	r24, Y+55	; 0x37
    30ba:	98 ad       	ldd	r25, Y+56	; 0x38
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e2       	ldi	r20, 0x20	; 32
    30c2:	51 e4       	ldi	r21, 0x41	; 65
    30c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	bc 01       	movw	r22, r24
    30ce:	cd 01       	movw	r24, r26
    30d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	98 ab       	std	Y+48, r25	; 0x30
    30da:	8f a7       	std	Y+47, r24	; 0x2f
    30dc:	0f c0       	rjmp	.+30     	; 0x30fc <LCD_sendCommand+0xdc>
    30de:	88 ec       	ldi	r24, 0xC8	; 200
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	9e a7       	std	Y+46, r25	; 0x2e
    30e4:	8d a7       	std	Y+45, r24	; 0x2d
    30e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    30e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <LCD_sendCommand+0xca>
    30ee:	9e a7       	std	Y+46, r25	; 0x2e
    30f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f4:	98 a9       	ldd	r25, Y+48	; 0x30
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	98 ab       	std	Y+48, r25	; 0x30
    30fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	69 f7       	brne	.-38     	; 0x30de <LCD_sendCommand+0xbe>
    3104:	14 c0       	rjmp	.+40     	; 0x312e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3106:	69 a9       	ldd	r22, Y+49	; 0x31
    3108:	7a a9       	ldd	r23, Y+50	; 0x32
    310a:	8b a9       	ldd	r24, Y+51	; 0x33
    310c:	9c a9       	ldd	r25, Y+52	; 0x34
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	98 ab       	std	Y+48, r25	; 0x30
    3118:	8f a7       	std	Y+47, r24	; 0x2f
    311a:	8f a5       	ldd	r24, Y+47	; 0x2f
    311c:	98 a9       	ldd	r25, Y+48	; 0x30
    311e:	9c a7       	std	Y+44, r25	; 0x2c
    3120:	8b a7       	std	Y+43, r24	; 0x2b
    3122:	8b a5       	ldd	r24, Y+43	; 0x2b
    3124:	9c a5       	ldd	r25, Y+44	; 0x2c
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	f1 f7       	brne	.-4      	; 0x3126 <LCD_sendCommand+0x106>
    312a:	9c a7       	std	Y+44, r25	; 0x2c
    312c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    312e:	82 e0       	ldi	r24, 0x02	; 2
    3130:	62 e0       	ldi	r22, 0x02	; 2
    3132:	41 e0       	ldi	r20, 0x01	; 1
    3134:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_writePin>
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	a0 e8       	ldi	r26, 0x80	; 128
    313e:	bf e3       	ldi	r27, 0x3F	; 63
    3140:	8f a3       	std	Y+39, r24	; 0x27
    3142:	98 a7       	std	Y+40, r25	; 0x28
    3144:	a9 a7       	std	Y+41, r26	; 0x29
    3146:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3148:	6f a1       	ldd	r22, Y+39	; 0x27
    314a:	78 a5       	ldd	r23, Y+40	; 0x28
    314c:	89 a5       	ldd	r24, Y+41	; 0x29
    314e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	4a ef       	ldi	r20, 0xFA	; 250
    3156:	54 e4       	ldi	r21, 0x44	; 68
    3158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	8b a3       	std	Y+35, r24	; 0x23
    3162:	9c a3       	std	Y+36, r25	; 0x24
    3164:	ad a3       	std	Y+37, r26	; 0x25
    3166:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3168:	6b a1       	ldd	r22, Y+35	; 0x23
    316a:	7c a1       	ldd	r23, Y+36	; 0x24
    316c:	8d a1       	ldd	r24, Y+37	; 0x25
    316e:	9e a1       	ldd	r25, Y+38	; 0x26
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e8       	ldi	r20, 0x80	; 128
    3176:	5f e3       	ldi	r21, 0x3F	; 63
    3178:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    317c:	88 23       	and	r24, r24
    317e:	2c f4       	brge	.+10     	; 0x318a <LCD_sendCommand+0x16a>
		__ticks = 1;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9a a3       	std	Y+34, r25	; 0x22
    3186:	89 a3       	std	Y+33, r24	; 0x21
    3188:	3f c0       	rjmp	.+126    	; 0x3208 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    318a:	6b a1       	ldd	r22, Y+35	; 0x23
    318c:	7c a1       	ldd	r23, Y+36	; 0x24
    318e:	8d a1       	ldd	r24, Y+37	; 0x25
    3190:	9e a1       	ldd	r25, Y+38	; 0x26
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	3f ef       	ldi	r19, 0xFF	; 255
    3196:	4f e7       	ldi	r20, 0x7F	; 127
    3198:	57 e4       	ldi	r21, 0x47	; 71
    319a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    319e:	18 16       	cp	r1, r24
    31a0:	4c f5       	brge	.+82     	; 0x31f4 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a2:	6f a1       	ldd	r22, Y+39	; 0x27
    31a4:	78 a5       	ldd	r23, Y+40	; 0x28
    31a6:	89 a5       	ldd	r24, Y+41	; 0x29
    31a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	40 e2       	ldi	r20, 0x20	; 32
    31b0:	51 e4       	ldi	r21, 0x41	; 65
    31b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	bc 01       	movw	r22, r24
    31bc:	cd 01       	movw	r24, r26
    31be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	9a a3       	std	Y+34, r25	; 0x22
    31c8:	89 a3       	std	Y+33, r24	; 0x21
    31ca:	0f c0       	rjmp	.+30     	; 0x31ea <LCD_sendCommand+0x1ca>
    31cc:	88 ec       	ldi	r24, 0xC8	; 200
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	98 a3       	std	Y+32, r25	; 0x20
    31d2:	8f 8f       	std	Y+31, r24	; 0x1f
    31d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31d6:	98 a1       	ldd	r25, Y+32	; 0x20
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	f1 f7       	brne	.-4      	; 0x31d8 <LCD_sendCommand+0x1b8>
    31dc:	98 a3       	std	Y+32, r25	; 0x20
    31de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e0:	89 a1       	ldd	r24, Y+33	; 0x21
    31e2:	9a a1       	ldd	r25, Y+34	; 0x22
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	9a a3       	std	Y+34, r25	; 0x22
    31e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ea:	89 a1       	ldd	r24, Y+33	; 0x21
    31ec:	9a a1       	ldd	r25, Y+34	; 0x22
    31ee:	00 97       	sbiw	r24, 0x00	; 0
    31f0:	69 f7       	brne	.-38     	; 0x31cc <LCD_sendCommand+0x1ac>
    31f2:	14 c0       	rjmp	.+40     	; 0x321c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f4:	6b a1       	ldd	r22, Y+35	; 0x23
    31f6:	7c a1       	ldd	r23, Y+36	; 0x24
    31f8:	8d a1       	ldd	r24, Y+37	; 0x25
    31fa:	9e a1       	ldd	r25, Y+38	; 0x26
    31fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	9a a3       	std	Y+34, r25	; 0x22
    3206:	89 a3       	std	Y+33, r24	; 0x21
    3208:	89 a1       	ldd	r24, Y+33	; 0x21
    320a:	9a a1       	ldd	r25, Y+34	; 0x22
    320c:	9e 8f       	std	Y+30, r25	; 0x1e
    320e:	8d 8f       	std	Y+29, r24	; 0x1d
    3210:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3212:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <LCD_sendCommand+0x1f4>
    3218:	9e 8f       	std	Y+30, r25	; 0x1e
    321a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	69 ad       	ldd	r22, Y+57	; 0x39
    3220:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <GPIO_writePort>
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	a0 e8       	ldi	r26, 0x80	; 128
    322a:	bf e3       	ldi	r27, 0x3F	; 63
    322c:	89 8f       	std	Y+25, r24	; 0x19
    322e:	9a 8f       	std	Y+26, r25	; 0x1a
    3230:	ab 8f       	std	Y+27, r26	; 0x1b
    3232:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3234:	69 8d       	ldd	r22, Y+25	; 0x19
    3236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    323a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	4a ef       	ldi	r20, 0xFA	; 250
    3242:	54 e4       	ldi	r21, 0x44	; 68
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	8d 8b       	std	Y+21, r24	; 0x15
    324e:	9e 8b       	std	Y+22, r25	; 0x16
    3250:	af 8b       	std	Y+23, r26	; 0x17
    3252:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3254:	6d 89       	ldd	r22, Y+21	; 0x15
    3256:	7e 89       	ldd	r23, Y+22	; 0x16
    3258:	8f 89       	ldd	r24, Y+23	; 0x17
    325a:	98 8d       	ldd	r25, Y+24	; 0x18
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e8       	ldi	r20, 0x80	; 128
    3262:	5f e3       	ldi	r21, 0x3F	; 63
    3264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3268:	88 23       	and	r24, r24
    326a:	2c f4       	brge	.+10     	; 0x3276 <LCD_sendCommand+0x256>
		__ticks = 1;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	9c 8b       	std	Y+20, r25	; 0x14
    3272:	8b 8b       	std	Y+19, r24	; 0x13
    3274:	3f c0       	rjmp	.+126    	; 0x32f4 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    3276:	6d 89       	ldd	r22, Y+21	; 0x15
    3278:	7e 89       	ldd	r23, Y+22	; 0x16
    327a:	8f 89       	ldd	r24, Y+23	; 0x17
    327c:	98 8d       	ldd	r25, Y+24	; 0x18
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	3f ef       	ldi	r19, 0xFF	; 255
    3282:	4f e7       	ldi	r20, 0x7F	; 127
    3284:	57 e4       	ldi	r21, 0x47	; 71
    3286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    328a:	18 16       	cp	r1, r24
    328c:	4c f5       	brge	.+82     	; 0x32e0 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328e:	69 8d       	ldd	r22, Y+25	; 0x19
    3290:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3292:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3294:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e2       	ldi	r20, 0x20	; 32
    329c:	51 e4       	ldi	r21, 0x41	; 65
    329e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	9c 8b       	std	Y+20, r25	; 0x14
    32b4:	8b 8b       	std	Y+19, r24	; 0x13
    32b6:	0f c0       	rjmp	.+30     	; 0x32d6 <LCD_sendCommand+0x2b6>
    32b8:	88 ec       	ldi	r24, 0xC8	; 200
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	9a 8b       	std	Y+18, r25	; 0x12
    32be:	89 8b       	std	Y+17, r24	; 0x11
    32c0:	89 89       	ldd	r24, Y+17	; 0x11
    32c2:	9a 89       	ldd	r25, Y+18	; 0x12
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <LCD_sendCommand+0x2a4>
    32c8:	9a 8b       	std	Y+18, r25	; 0x12
    32ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32cc:	8b 89       	ldd	r24, Y+19	; 0x13
    32ce:	9c 89       	ldd	r25, Y+20	; 0x14
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	9c 8b       	std	Y+20, r25	; 0x14
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d6:	8b 89       	ldd	r24, Y+19	; 0x13
    32d8:	9c 89       	ldd	r25, Y+20	; 0x14
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	69 f7       	brne	.-38     	; 0x32b8 <LCD_sendCommand+0x298>
    32de:	14 c0       	rjmp	.+40     	; 0x3308 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e0:	6d 89       	ldd	r22, Y+21	; 0x15
    32e2:	7e 89       	ldd	r23, Y+22	; 0x16
    32e4:	8f 89       	ldd	r24, Y+23	; 0x17
    32e6:	98 8d       	ldd	r25, Y+24	; 0x18
    32e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	9c 8b       	std	Y+20, r25	; 0x14
    32f2:	8b 8b       	std	Y+19, r24	; 0x13
    32f4:	8b 89       	ldd	r24, Y+19	; 0x13
    32f6:	9c 89       	ldd	r25, Y+20	; 0x14
    32f8:	98 8b       	std	Y+16, r25	; 0x10
    32fa:	8f 87       	std	Y+15, r24	; 0x0f
    32fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32fe:	98 89       	ldd	r25, Y+16	; 0x10
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <LCD_sendCommand+0x2e0>
    3304:	98 8b       	std	Y+16, r25	; 0x10
    3306:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3308:	82 e0       	ldi	r24, 0x02	; 2
    330a:	62 e0       	ldi	r22, 0x02	; 2
    330c:	40 e0       	ldi	r20, 0x00	; 0
    330e:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_writePin>
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	a0 e8       	ldi	r26, 0x80	; 128
    3318:	bf e3       	ldi	r27, 0x3F	; 63
    331a:	8b 87       	std	Y+11, r24	; 0x0b
    331c:	9c 87       	std	Y+12, r25	; 0x0c
    331e:	ad 87       	std	Y+13, r26	; 0x0d
    3320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3322:	6b 85       	ldd	r22, Y+11	; 0x0b
    3324:	7c 85       	ldd	r23, Y+12	; 0x0c
    3326:	8d 85       	ldd	r24, Y+13	; 0x0d
    3328:	9e 85       	ldd	r25, Y+14	; 0x0e
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	4a ef       	ldi	r20, 0xFA	; 250
    3330:	54 e4       	ldi	r21, 0x44	; 68
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	8f 83       	std	Y+7, r24	; 0x07
    333c:	98 87       	std	Y+8, r25	; 0x08
    333e:	a9 87       	std	Y+9, r26	; 0x09
    3340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3342:	6f 81       	ldd	r22, Y+7	; 0x07
    3344:	78 85       	ldd	r23, Y+8	; 0x08
    3346:	89 85       	ldd	r24, Y+9	; 0x09
    3348:	9a 85       	ldd	r25, Y+10	; 0x0a
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e8       	ldi	r20, 0x80	; 128
    3350:	5f e3       	ldi	r21, 0x3F	; 63
    3352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3356:	88 23       	and	r24, r24
    3358:	2c f4       	brge	.+10     	; 0x3364 <LCD_sendCommand+0x344>
		__ticks = 1;
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	9e 83       	std	Y+6, r25	; 0x06
    3360:	8d 83       	std	Y+5, r24	; 0x05
    3362:	3f c0       	rjmp	.+126    	; 0x33e2 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    3364:	6f 81       	ldd	r22, Y+7	; 0x07
    3366:	78 85       	ldd	r23, Y+8	; 0x08
    3368:	89 85       	ldd	r24, Y+9	; 0x09
    336a:	9a 85       	ldd	r25, Y+10	; 0x0a
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	3f ef       	ldi	r19, 0xFF	; 255
    3370:	4f e7       	ldi	r20, 0x7F	; 127
    3372:	57 e4       	ldi	r21, 0x47	; 71
    3374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3378:	18 16       	cp	r1, r24
    337a:	4c f5       	brge	.+82     	; 0x33ce <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    337c:	6b 85       	ldd	r22, Y+11	; 0x0b
    337e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3380:	8d 85       	ldd	r24, Y+13	; 0x0d
    3382:	9e 85       	ldd	r25, Y+14	; 0x0e
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	40 e2       	ldi	r20, 0x20	; 32
    338a:	51 e4       	ldi	r21, 0x41	; 65
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	bc 01       	movw	r22, r24
    3396:	cd 01       	movw	r24, r26
    3398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	9e 83       	std	Y+6, r25	; 0x06
    33a2:	8d 83       	std	Y+5, r24	; 0x05
    33a4:	0f c0       	rjmp	.+30     	; 0x33c4 <LCD_sendCommand+0x3a4>
    33a6:	88 ec       	ldi	r24, 0xC8	; 200
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	9c 83       	std	Y+4, r25	; 0x04
    33ac:	8b 83       	std	Y+3, r24	; 0x03
    33ae:	8b 81       	ldd	r24, Y+3	; 0x03
    33b0:	9c 81       	ldd	r25, Y+4	; 0x04
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <LCD_sendCommand+0x392>
    33b6:	9c 83       	std	Y+4, r25	; 0x04
    33b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	9e 83       	std	Y+6, r25	; 0x06
    33c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	9e 81       	ldd	r25, Y+6	; 0x06
    33c8:	00 97       	sbiw	r24, 0x00	; 0
    33ca:	69 f7       	brne	.-38     	; 0x33a6 <LCD_sendCommand+0x386>
    33cc:	14 c0       	rjmp	.+40     	; 0x33f6 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ce:	6f 81       	ldd	r22, Y+7	; 0x07
    33d0:	78 85       	ldd	r23, Y+8	; 0x08
    33d2:	89 85       	ldd	r24, Y+9	; 0x09
    33d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	9e 81       	ldd	r25, Y+6	; 0x06
    33e6:	9a 83       	std	Y+2, r25	; 0x02
    33e8:	89 83       	std	Y+1, r24	; 0x01
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	9a 81       	ldd	r25, Y+2	; 0x02
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <LCD_sendCommand+0x3ce>
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    33f6:	e9 96       	adiw	r28, 0x39	; 57
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	cf 91       	pop	r28
    3404:	df 91       	pop	r29
    3406:	08 95       	ret

00003408 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3408:	df 93       	push	r29
    340a:	cf 93       	push	r28
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	e9 97       	sbiw	r28, 0x39	; 57
    3412:	0f b6       	in	r0, 0x3f	; 63
    3414:	f8 94       	cli
    3416:	de bf       	out	0x3e, r29	; 62
    3418:	0f be       	out	0x3f, r0	; 63
    341a:	cd bf       	out	0x3d, r28	; 61
    341c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	41 e0       	ldi	r20, 0x01	; 1
    3424:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    3428:	82 e0       	ldi	r24, 0x02	; 2
    342a:	61 e0       	ldi	r22, 0x01	; 1
    342c:	40 e0       	ldi	r20, 0x00	; 0
    342e:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_writePin>
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	a0 e8       	ldi	r26, 0x80	; 128
    3438:	bf e3       	ldi	r27, 0x3F	; 63
    343a:	8d ab       	std	Y+53, r24	; 0x35
    343c:	9e ab       	std	Y+54, r25	; 0x36
    343e:	af ab       	std	Y+55, r26	; 0x37
    3440:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3442:	6d a9       	ldd	r22, Y+53	; 0x35
    3444:	7e a9       	ldd	r23, Y+54	; 0x36
    3446:	8f a9       	ldd	r24, Y+55	; 0x37
    3448:	98 ad       	ldd	r25, Y+56	; 0x38
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	4a ef       	ldi	r20, 0xFA	; 250
    3450:	54 e4       	ldi	r21, 0x44	; 68
    3452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	89 ab       	std	Y+49, r24	; 0x31
    345c:	9a ab       	std	Y+50, r25	; 0x32
    345e:	ab ab       	std	Y+51, r26	; 0x33
    3460:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3462:	69 a9       	ldd	r22, Y+49	; 0x31
    3464:	7a a9       	ldd	r23, Y+50	; 0x32
    3466:	8b a9       	ldd	r24, Y+51	; 0x33
    3468:	9c a9       	ldd	r25, Y+52	; 0x34
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	40 e8       	ldi	r20, 0x80	; 128
    3470:	5f e3       	ldi	r21, 0x3F	; 63
    3472:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3476:	88 23       	and	r24, r24
    3478:	2c f4       	brge	.+10     	; 0x3484 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	98 ab       	std	Y+48, r25	; 0x30
    3480:	8f a7       	std	Y+47, r24	; 0x2f
    3482:	3f c0       	rjmp	.+126    	; 0x3502 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    3484:	69 a9       	ldd	r22, Y+49	; 0x31
    3486:	7a a9       	ldd	r23, Y+50	; 0x32
    3488:	8b a9       	ldd	r24, Y+51	; 0x33
    348a:	9c a9       	ldd	r25, Y+52	; 0x34
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	3f ef       	ldi	r19, 0xFF	; 255
    3490:	4f e7       	ldi	r20, 0x7F	; 127
    3492:	57 e4       	ldi	r21, 0x47	; 71
    3494:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3498:	18 16       	cp	r1, r24
    349a:	4c f5       	brge	.+82     	; 0x34ee <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    349c:	6d a9       	ldd	r22, Y+53	; 0x35
    349e:	7e a9       	ldd	r23, Y+54	; 0x36
    34a0:	8f a9       	ldd	r24, Y+55	; 0x37
    34a2:	98 ad       	ldd	r25, Y+56	; 0x38
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e2       	ldi	r20, 0x20	; 32
    34aa:	51 e4       	ldi	r21, 0x41	; 65
    34ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	bc 01       	movw	r22, r24
    34b6:	cd 01       	movw	r24, r26
    34b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	98 ab       	std	Y+48, r25	; 0x30
    34c2:	8f a7       	std	Y+47, r24	; 0x2f
    34c4:	0f c0       	rjmp	.+30     	; 0x34e4 <LCD_displayCharacter+0xdc>
    34c6:	88 ec       	ldi	r24, 0xC8	; 200
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	9e a7       	std	Y+46, r25	; 0x2e
    34cc:	8d a7       	std	Y+45, r24	; 0x2d
    34ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    34d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	f1 f7       	brne	.-4      	; 0x34d2 <LCD_displayCharacter+0xca>
    34d6:	9e a7       	std	Y+46, r25	; 0x2e
    34d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34da:	8f a5       	ldd	r24, Y+47	; 0x2f
    34dc:	98 a9       	ldd	r25, Y+48	; 0x30
    34de:	01 97       	sbiw	r24, 0x01	; 1
    34e0:	98 ab       	std	Y+48, r25	; 0x30
    34e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    34e6:	98 a9       	ldd	r25, Y+48	; 0x30
    34e8:	00 97       	sbiw	r24, 0x00	; 0
    34ea:	69 f7       	brne	.-38     	; 0x34c6 <LCD_displayCharacter+0xbe>
    34ec:	14 c0       	rjmp	.+40     	; 0x3516 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ee:	69 a9       	ldd	r22, Y+49	; 0x31
    34f0:	7a a9       	ldd	r23, Y+50	; 0x32
    34f2:	8b a9       	ldd	r24, Y+51	; 0x33
    34f4:	9c a9       	ldd	r25, Y+52	; 0x34
    34f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	98 ab       	std	Y+48, r25	; 0x30
    3500:	8f a7       	std	Y+47, r24	; 0x2f
    3502:	8f a5       	ldd	r24, Y+47	; 0x2f
    3504:	98 a9       	ldd	r25, Y+48	; 0x30
    3506:	9c a7       	std	Y+44, r25	; 0x2c
    3508:	8b a7       	std	Y+43, r24	; 0x2b
    350a:	8b a5       	ldd	r24, Y+43	; 0x2b
    350c:	9c a5       	ldd	r25, Y+44	; 0x2c
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <LCD_displayCharacter+0x106>
    3512:	9c a7       	std	Y+44, r25	; 0x2c
    3514:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3516:	82 e0       	ldi	r24, 0x02	; 2
    3518:	62 e0       	ldi	r22, 0x02	; 2
    351a:	41 e0       	ldi	r20, 0x01	; 1
    351c:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_writePin>
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	a0 e8       	ldi	r26, 0x80	; 128
    3526:	bf e3       	ldi	r27, 0x3F	; 63
    3528:	8f a3       	std	Y+39, r24	; 0x27
    352a:	98 a7       	std	Y+40, r25	; 0x28
    352c:	a9 a7       	std	Y+41, r26	; 0x29
    352e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3530:	6f a1       	ldd	r22, Y+39	; 0x27
    3532:	78 a5       	ldd	r23, Y+40	; 0x28
    3534:	89 a5       	ldd	r24, Y+41	; 0x29
    3536:	9a a5       	ldd	r25, Y+42	; 0x2a
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	4a ef       	ldi	r20, 0xFA	; 250
    353e:	54 e4       	ldi	r21, 0x44	; 68
    3540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	8b a3       	std	Y+35, r24	; 0x23
    354a:	9c a3       	std	Y+36, r25	; 0x24
    354c:	ad a3       	std	Y+37, r26	; 0x25
    354e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3550:	6b a1       	ldd	r22, Y+35	; 0x23
    3552:	7c a1       	ldd	r23, Y+36	; 0x24
    3554:	8d a1       	ldd	r24, Y+37	; 0x25
    3556:	9e a1       	ldd	r25, Y+38	; 0x26
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e8       	ldi	r20, 0x80	; 128
    355e:	5f e3       	ldi	r21, 0x3F	; 63
    3560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3564:	88 23       	and	r24, r24
    3566:	2c f4       	brge	.+10     	; 0x3572 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	9a a3       	std	Y+34, r25	; 0x22
    356e:	89 a3       	std	Y+33, r24	; 0x21
    3570:	3f c0       	rjmp	.+126    	; 0x35f0 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    3572:	6b a1       	ldd	r22, Y+35	; 0x23
    3574:	7c a1       	ldd	r23, Y+36	; 0x24
    3576:	8d a1       	ldd	r24, Y+37	; 0x25
    3578:	9e a1       	ldd	r25, Y+38	; 0x26
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	3f ef       	ldi	r19, 0xFF	; 255
    357e:	4f e7       	ldi	r20, 0x7F	; 127
    3580:	57 e4       	ldi	r21, 0x47	; 71
    3582:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3586:	18 16       	cp	r1, r24
    3588:	4c f5       	brge	.+82     	; 0x35dc <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    358a:	6f a1       	ldd	r22, Y+39	; 0x27
    358c:	78 a5       	ldd	r23, Y+40	; 0x28
    358e:	89 a5       	ldd	r24, Y+41	; 0x29
    3590:	9a a5       	ldd	r25, Y+42	; 0x2a
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	40 e2       	ldi	r20, 0x20	; 32
    3598:	51 e4       	ldi	r21, 0x41	; 65
    359a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	bc 01       	movw	r22, r24
    35a4:	cd 01       	movw	r24, r26
    35a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	9a a3       	std	Y+34, r25	; 0x22
    35b0:	89 a3       	std	Y+33, r24	; 0x21
    35b2:	0f c0       	rjmp	.+30     	; 0x35d2 <LCD_displayCharacter+0x1ca>
    35b4:	88 ec       	ldi	r24, 0xC8	; 200
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	98 a3       	std	Y+32, r25	; 0x20
    35ba:	8f 8f       	std	Y+31, r24	; 0x1f
    35bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35be:	98 a1       	ldd	r25, Y+32	; 0x20
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <LCD_displayCharacter+0x1b8>
    35c4:	98 a3       	std	Y+32, r25	; 0x20
    35c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c8:	89 a1       	ldd	r24, Y+33	; 0x21
    35ca:	9a a1       	ldd	r25, Y+34	; 0x22
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	9a a3       	std	Y+34, r25	; 0x22
    35d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d2:	89 a1       	ldd	r24, Y+33	; 0x21
    35d4:	9a a1       	ldd	r25, Y+34	; 0x22
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	69 f7       	brne	.-38     	; 0x35b4 <LCD_displayCharacter+0x1ac>
    35da:	14 c0       	rjmp	.+40     	; 0x3604 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35dc:	6b a1       	ldd	r22, Y+35	; 0x23
    35de:	7c a1       	ldd	r23, Y+36	; 0x24
    35e0:	8d a1       	ldd	r24, Y+37	; 0x25
    35e2:	9e a1       	ldd	r25, Y+38	; 0x26
    35e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	9a a3       	std	Y+34, r25	; 0x22
    35ee:	89 a3       	std	Y+33, r24	; 0x21
    35f0:	89 a1       	ldd	r24, Y+33	; 0x21
    35f2:	9a a1       	ldd	r25, Y+34	; 0x22
    35f4:	9e 8f       	std	Y+30, r25	; 0x1e
    35f6:	8d 8f       	std	Y+29, r24	; 0x1d
    35f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	f1 f7       	brne	.-4      	; 0x35fc <LCD_displayCharacter+0x1f4>
    3600:	9e 8f       	std	Y+30, r25	; 0x1e
    3602:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	69 ad       	ldd	r22, Y+57	; 0x39
    3608:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <GPIO_writePort>
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	a0 e8       	ldi	r26, 0x80	; 128
    3612:	bf e3       	ldi	r27, 0x3F	; 63
    3614:	89 8f       	std	Y+25, r24	; 0x19
    3616:	9a 8f       	std	Y+26, r25	; 0x1a
    3618:	ab 8f       	std	Y+27, r26	; 0x1b
    361a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361c:	69 8d       	ldd	r22, Y+25	; 0x19
    361e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3620:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3622:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	4a ef       	ldi	r20, 0xFA	; 250
    362a:	54 e4       	ldi	r21, 0x44	; 68
    362c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	8d 8b       	std	Y+21, r24	; 0x15
    3636:	9e 8b       	std	Y+22, r25	; 0x16
    3638:	af 8b       	std	Y+23, r26	; 0x17
    363a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    363c:	6d 89       	ldd	r22, Y+21	; 0x15
    363e:	7e 89       	ldd	r23, Y+22	; 0x16
    3640:	8f 89       	ldd	r24, Y+23	; 0x17
    3642:	98 8d       	ldd	r25, Y+24	; 0x18
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	40 e8       	ldi	r20, 0x80	; 128
    364a:	5f e3       	ldi	r21, 0x3F	; 63
    364c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3650:	88 23       	and	r24, r24
    3652:	2c f4       	brge	.+10     	; 0x365e <LCD_displayCharacter+0x256>
		__ticks = 1;
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	9c 8b       	std	Y+20, r25	; 0x14
    365a:	8b 8b       	std	Y+19, r24	; 0x13
    365c:	3f c0       	rjmp	.+126    	; 0x36dc <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    365e:	6d 89       	ldd	r22, Y+21	; 0x15
    3660:	7e 89       	ldd	r23, Y+22	; 0x16
    3662:	8f 89       	ldd	r24, Y+23	; 0x17
    3664:	98 8d       	ldd	r25, Y+24	; 0x18
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	3f ef       	ldi	r19, 0xFF	; 255
    366a:	4f e7       	ldi	r20, 0x7F	; 127
    366c:	57 e4       	ldi	r21, 0x47	; 71
    366e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3672:	18 16       	cp	r1, r24
    3674:	4c f5       	brge	.+82     	; 0x36c8 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3676:	69 8d       	ldd	r22, Y+25	; 0x19
    3678:	7a 8d       	ldd	r23, Y+26	; 0x1a
    367a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    367c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	40 e2       	ldi	r20, 0x20	; 32
    3684:	51 e4       	ldi	r21, 0x41	; 65
    3686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	bc 01       	movw	r22, r24
    3690:	cd 01       	movw	r24, r26
    3692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	9c 8b       	std	Y+20, r25	; 0x14
    369c:	8b 8b       	std	Y+19, r24	; 0x13
    369e:	0f c0       	rjmp	.+30     	; 0x36be <LCD_displayCharacter+0x2b6>
    36a0:	88 ec       	ldi	r24, 0xC8	; 200
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	9a 8b       	std	Y+18, r25	; 0x12
    36a6:	89 8b       	std	Y+17, r24	; 0x11
    36a8:	89 89       	ldd	r24, Y+17	; 0x11
    36aa:	9a 89       	ldd	r25, Y+18	; 0x12
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	f1 f7       	brne	.-4      	; 0x36ac <LCD_displayCharacter+0x2a4>
    36b0:	9a 8b       	std	Y+18, r25	; 0x12
    36b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b4:	8b 89       	ldd	r24, Y+19	; 0x13
    36b6:	9c 89       	ldd	r25, Y+20	; 0x14
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	9c 8b       	std	Y+20, r25	; 0x14
    36bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36be:	8b 89       	ldd	r24, Y+19	; 0x13
    36c0:	9c 89       	ldd	r25, Y+20	; 0x14
    36c2:	00 97       	sbiw	r24, 0x00	; 0
    36c4:	69 f7       	brne	.-38     	; 0x36a0 <LCD_displayCharacter+0x298>
    36c6:	14 c0       	rjmp	.+40     	; 0x36f0 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c8:	6d 89       	ldd	r22, Y+21	; 0x15
    36ca:	7e 89       	ldd	r23, Y+22	; 0x16
    36cc:	8f 89       	ldd	r24, Y+23	; 0x17
    36ce:	98 8d       	ldd	r25, Y+24	; 0x18
    36d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	9c 8b       	std	Y+20, r25	; 0x14
    36da:	8b 8b       	std	Y+19, r24	; 0x13
    36dc:	8b 89       	ldd	r24, Y+19	; 0x13
    36de:	9c 89       	ldd	r25, Y+20	; 0x14
    36e0:	98 8b       	std	Y+16, r25	; 0x10
    36e2:	8f 87       	std	Y+15, r24	; 0x0f
    36e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    36e6:	98 89       	ldd	r25, Y+16	; 0x10
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	f1 f7       	brne	.-4      	; 0x36e8 <LCD_displayCharacter+0x2e0>
    36ec:	98 8b       	std	Y+16, r25	; 0x10
    36ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    36f0:	82 e0       	ldi	r24, 0x02	; 2
    36f2:	62 e0       	ldi	r22, 0x02	; 2
    36f4:	40 e0       	ldi	r20, 0x00	; 0
    36f6:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_writePin>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	a0 e8       	ldi	r26, 0x80	; 128
    3700:	bf e3       	ldi	r27, 0x3F	; 63
    3702:	8b 87       	std	Y+11, r24	; 0x0b
    3704:	9c 87       	std	Y+12, r25	; 0x0c
    3706:	ad 87       	std	Y+13, r26	; 0x0d
    3708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    370a:	6b 85       	ldd	r22, Y+11	; 0x0b
    370c:	7c 85       	ldd	r23, Y+12	; 0x0c
    370e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3710:	9e 85       	ldd	r25, Y+14	; 0x0e
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	4a ef       	ldi	r20, 0xFA	; 250
    3718:	54 e4       	ldi	r21, 0x44	; 68
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	8f 83       	std	Y+7, r24	; 0x07
    3724:	98 87       	std	Y+8, r25	; 0x08
    3726:	a9 87       	std	Y+9, r26	; 0x09
    3728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    372a:	6f 81       	ldd	r22, Y+7	; 0x07
    372c:	78 85       	ldd	r23, Y+8	; 0x08
    372e:	89 85       	ldd	r24, Y+9	; 0x09
    3730:	9a 85       	ldd	r25, Y+10	; 0x0a
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    373e:	88 23       	and	r24, r24
    3740:	2c f4       	brge	.+10     	; 0x374c <LCD_displayCharacter+0x344>
		__ticks = 1;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	9e 83       	std	Y+6, r25	; 0x06
    3748:	8d 83       	std	Y+5, r24	; 0x05
    374a:	3f c0       	rjmp	.+126    	; 0x37ca <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    374c:	6f 81       	ldd	r22, Y+7	; 0x07
    374e:	78 85       	ldd	r23, Y+8	; 0x08
    3750:	89 85       	ldd	r24, Y+9	; 0x09
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	3f ef       	ldi	r19, 0xFF	; 255
    3758:	4f e7       	ldi	r20, 0x7F	; 127
    375a:	57 e4       	ldi	r21, 0x47	; 71
    375c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3760:	18 16       	cp	r1, r24
    3762:	4c f5       	brge	.+82     	; 0x37b6 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3764:	6b 85       	ldd	r22, Y+11	; 0x0b
    3766:	7c 85       	ldd	r23, Y+12	; 0x0c
    3768:	8d 85       	ldd	r24, Y+13	; 0x0d
    376a:	9e 85       	ldd	r25, Y+14	; 0x0e
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e2       	ldi	r20, 0x20	; 32
    3772:	51 e4       	ldi	r21, 0x41	; 65
    3774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	bc 01       	movw	r22, r24
    377e:	cd 01       	movw	r24, r26
    3780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	9e 83       	std	Y+6, r25	; 0x06
    378a:	8d 83       	std	Y+5, r24	; 0x05
    378c:	0f c0       	rjmp	.+30     	; 0x37ac <LCD_displayCharacter+0x3a4>
    378e:	88 ec       	ldi	r24, 0xC8	; 200
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	9c 83       	std	Y+4, r25	; 0x04
    3794:	8b 83       	std	Y+3, r24	; 0x03
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	9c 81       	ldd	r25, Y+4	; 0x04
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <LCD_displayCharacter+0x392>
    379e:	9c 83       	std	Y+4, r25	; 0x04
    37a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a2:	8d 81       	ldd	r24, Y+5	; 0x05
    37a4:	9e 81       	ldd	r25, Y+6	; 0x06
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	9e 83       	std	Y+6, r25	; 0x06
    37aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ac:	8d 81       	ldd	r24, Y+5	; 0x05
    37ae:	9e 81       	ldd	r25, Y+6	; 0x06
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	69 f7       	brne	.-38     	; 0x378e <LCD_displayCharacter+0x386>
    37b4:	14 c0       	rjmp	.+40     	; 0x37de <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b6:	6f 81       	ldd	r22, Y+7	; 0x07
    37b8:	78 85       	ldd	r23, Y+8	; 0x08
    37ba:	89 85       	ldd	r24, Y+9	; 0x09
    37bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	9e 83       	std	Y+6, r25	; 0x06
    37c8:	8d 83       	std	Y+5, r24	; 0x05
    37ca:	8d 81       	ldd	r24, Y+5	; 0x05
    37cc:	9e 81       	ldd	r25, Y+6	; 0x06
    37ce:	9a 83       	std	Y+2, r25	; 0x02
    37d0:	89 83       	std	Y+1, r24	; 0x01
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	9a 81       	ldd	r25, Y+2	; 0x02
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <LCD_displayCharacter+0x3ce>
    37da:	9a 83       	std	Y+2, r25	; 0x02
    37dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    37de:	e9 96       	adiw	r28, 0x39	; 57
    37e0:	0f b6       	in	r0, 0x3f	; 63
    37e2:	f8 94       	cli
    37e4:	de bf       	out	0x3e, r29	; 62
    37e6:	0f be       	out	0x3f, r0	; 63
    37e8:	cd bf       	out	0x3d, r28	; 61
    37ea:	cf 91       	pop	r28
    37ec:	df 91       	pop	r29
    37ee:	08 95       	ret

000037f0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    37f0:	df 93       	push	r29
    37f2:	cf 93       	push	r28
    37f4:	00 d0       	rcall	.+0      	; 0x37f6 <LCD_displayString+0x6>
    37f6:	0f 92       	push	r0
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	9b 83       	std	Y+3, r25	; 0x03
    37fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3800:	19 82       	std	Y+1, r1	; 0x01
    3802:	0e c0       	rjmp	.+28     	; 0x3820 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	28 2f       	mov	r18, r24
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	8a 81       	ldd	r24, Y+2	; 0x02
    380c:	9b 81       	ldd	r25, Y+3	; 0x03
    380e:	fc 01       	movw	r30, r24
    3810:	e2 0f       	add	r30, r18
    3812:	f3 1f       	adc	r31, r19
    3814:	80 81       	ld	r24, Z
    3816:	0e 94 04 1a 	call	0x3408	; 0x3408 <LCD_displayCharacter>
		i++;
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	8f 5f       	subi	r24, 0xFF	; 255
    381e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	28 2f       	mov	r18, r24
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	9b 81       	ldd	r25, Y+3	; 0x03
    382a:	fc 01       	movw	r30, r24
    382c:	e2 0f       	add	r30, r18
    382e:	f3 1f       	adc	r31, r19
    3830:	80 81       	ld	r24, Z
    3832:	88 23       	and	r24, r24
    3834:	39 f7       	brne	.-50     	; 0x3804 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	cf 91       	pop	r28
    383e:	df 91       	pop	r29
    3840:	08 95       	ret

00003842 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	00 d0       	rcall	.+0      	; 0x3848 <LCD_moveCursor+0x6>
    3848:	00 d0       	rcall	.+0      	; 0x384a <LCD_moveCursor+0x8>
    384a:	0f 92       	push	r0
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
    3850:	8a 83       	std	Y+2, r24	; 0x02
    3852:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3854:	8a 81       	ldd	r24, Y+2	; 0x02
    3856:	28 2f       	mov	r18, r24
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	3d 83       	std	Y+5, r19	; 0x05
    385c:	2c 83       	std	Y+4, r18	; 0x04
    385e:	8c 81       	ldd	r24, Y+4	; 0x04
    3860:	9d 81       	ldd	r25, Y+5	; 0x05
    3862:	81 30       	cpi	r24, 0x01	; 1
    3864:	91 05       	cpc	r25, r1
    3866:	c1 f0       	breq	.+48     	; 0x3898 <LCD_moveCursor+0x56>
    3868:	2c 81       	ldd	r18, Y+4	; 0x04
    386a:	3d 81       	ldd	r19, Y+5	; 0x05
    386c:	22 30       	cpi	r18, 0x02	; 2
    386e:	31 05       	cpc	r19, r1
    3870:	2c f4       	brge	.+10     	; 0x387c <LCD_moveCursor+0x3a>
    3872:	8c 81       	ldd	r24, Y+4	; 0x04
    3874:	9d 81       	ldd	r25, Y+5	; 0x05
    3876:	00 97       	sbiw	r24, 0x00	; 0
    3878:	61 f0       	breq	.+24     	; 0x3892 <LCD_moveCursor+0x50>
    387a:	19 c0       	rjmp	.+50     	; 0x38ae <LCD_moveCursor+0x6c>
    387c:	2c 81       	ldd	r18, Y+4	; 0x04
    387e:	3d 81       	ldd	r19, Y+5	; 0x05
    3880:	22 30       	cpi	r18, 0x02	; 2
    3882:	31 05       	cpc	r19, r1
    3884:	69 f0       	breq	.+26     	; 0x38a0 <LCD_moveCursor+0x5e>
    3886:	8c 81       	ldd	r24, Y+4	; 0x04
    3888:	9d 81       	ldd	r25, Y+5	; 0x05
    388a:	83 30       	cpi	r24, 0x03	; 3
    388c:	91 05       	cpc	r25, r1
    388e:	61 f0       	breq	.+24     	; 0x38a8 <LCD_moveCursor+0x66>
    3890:	0e c0       	rjmp	.+28     	; 0x38ae <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	89 83       	std	Y+1, r24	; 0x01
    3896:	0b c0       	rjmp	.+22     	; 0x38ae <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3898:	8b 81       	ldd	r24, Y+3	; 0x03
    389a:	80 5c       	subi	r24, 0xC0	; 192
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	07 c0       	rjmp	.+14     	; 0x38ae <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	80 5f       	subi	r24, 0xF0	; 240
    38a4:	89 83       	std	Y+1, r24	; 0x01
    38a6:	03 c0       	rjmp	.+6      	; 0x38ae <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    38a8:	8b 81       	ldd	r24, Y+3	; 0x03
    38aa:	80 5b       	subi	r24, 0xB0	; 176
    38ac:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	80 68       	ori	r24, 0x80	; 128
    38b2:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_sendCommand>
}
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	08 95       	ret

000038c6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    38c6:	df 93       	push	r29
    38c8:	cf 93       	push	r28
    38ca:	00 d0       	rcall	.+0      	; 0x38cc <LCD_displayStringRowColumn+0x6>
    38cc:	00 d0       	rcall	.+0      	; 0x38ce <LCD_displayStringRowColumn+0x8>
    38ce:	cd b7       	in	r28, 0x3d	; 61
    38d0:	de b7       	in	r29, 0x3e	; 62
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	6a 83       	std	Y+2, r22	; 0x02
    38d6:	5c 83       	std	Y+4, r21	; 0x04
    38d8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	6a 81       	ldd	r22, Y+2	; 0x02
    38de:	0e 94 21 1c 	call	0x3842	; 0x3842 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    38e2:	8b 81       	ldd	r24, Y+3	; 0x03
    38e4:	9c 81       	ldd	r25, Y+4	; 0x04
    38e6:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <LCD_displayString>
}
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	cf 91       	pop	r28
    38f4:	df 91       	pop	r29
    38f6:	08 95       	ret

000038f8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	62 97       	sbiw	r28, 0x12	; 18
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	f8 94       	cli
    3906:	de bf       	out	0x3e, r29	; 62
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	9a 8b       	std	Y+18, r25	; 0x12
    390e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3910:	89 89       	ldd	r24, Y+17	; 0x11
    3912:	9a 89       	ldd	r25, Y+18	; 0x12
    3914:	9e 01       	movw	r18, r28
    3916:	2f 5f       	subi	r18, 0xFF	; 255
    3918:	3f 4f       	sbci	r19, 0xFF	; 255
    391a:	b9 01       	movw	r22, r18
    391c:	4a e0       	ldi	r20, 0x0A	; 10
    391e:	50 e0       	ldi	r21, 0x00	; 0
    3920:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <itoa>
   LCD_displayString(buff); /* Display the string */
    3924:	ce 01       	movw	r24, r28
    3926:	01 96       	adiw	r24, 0x01	; 1
    3928:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <LCD_displayString>
}
    392c:	62 96       	adiw	r28, 0x12	; 18
    392e:	0f b6       	in	r0, 0x3f	; 63
    3930:	f8 94       	cli
    3932:	de bf       	out	0x3e, r29	; 62
    3934:	0f be       	out	0x3f, r0	; 63
    3936:	cd bf       	out	0x3d, r28	; 61
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_sendCommand>
}
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	08 95       	ret

00003952 <__vector_7>:
#include <avr/io.h>
#include <avr/interrupt.h>
static volatile void(*g_callback_ptr) (void)=NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    3952:	1f 92       	push	r1
    3954:	0f 92       	push	r0
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	0f 92       	push	r0
    395a:	11 24       	eor	r1, r1
    395c:	2f 93       	push	r18
    395e:	3f 93       	push	r19
    3960:	4f 93       	push	r20
    3962:	5f 93       	push	r21
    3964:	6f 93       	push	r22
    3966:	7f 93       	push	r23
    3968:	8f 93       	push	r24
    396a:	9f 93       	push	r25
    396c:	af 93       	push	r26
    396e:	bf 93       	push	r27
    3970:	ef 93       	push	r30
    3972:	ff 93       	push	r31
    3974:	df 93       	push	r29
    3976:	cf 93       	push	r28
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
	if(g_callback_ptr != NULL_PTR)
    397c:	80 91 41 01 	lds	r24, 0x0141
    3980:	90 91 42 01 	lds	r25, 0x0142
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	29 f0       	breq	.+10     	; 0x3992 <__vector_7+0x40>
	{
		(*g_callback_ptr)();
    3988:	e0 91 41 01 	lds	r30, 0x0141
    398c:	f0 91 42 01 	lds	r31, 0x0142
    3990:	09 95       	icall
	}
}
    3992:	cf 91       	pop	r28
    3994:	df 91       	pop	r29
    3996:	ff 91       	pop	r31
    3998:	ef 91       	pop	r30
    399a:	bf 91       	pop	r27
    399c:	af 91       	pop	r26
    399e:	9f 91       	pop	r25
    39a0:	8f 91       	pop	r24
    39a2:	7f 91       	pop	r23
    39a4:	6f 91       	pop	r22
    39a6:	5f 91       	pop	r21
    39a8:	4f 91       	pop	r20
    39aa:	3f 91       	pop	r19
    39ac:	2f 91       	pop	r18
    39ae:	0f 90       	pop	r0
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	0f 90       	pop	r0
    39b4:	1f 90       	pop	r1
    39b6:	18 95       	reti

000039b8 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    39b8:	1f 92       	push	r1
    39ba:	0f 92       	push	r0
    39bc:	0f b6       	in	r0, 0x3f	; 63
    39be:	0f 92       	push	r0
    39c0:	11 24       	eor	r1, r1
    39c2:	2f 93       	push	r18
    39c4:	3f 93       	push	r19
    39c6:	4f 93       	push	r20
    39c8:	5f 93       	push	r21
    39ca:	6f 93       	push	r22
    39cc:	7f 93       	push	r23
    39ce:	8f 93       	push	r24
    39d0:	9f 93       	push	r25
    39d2:	af 93       	push	r26
    39d4:	bf 93       	push	r27
    39d6:	ef 93       	push	r30
    39d8:	ff 93       	push	r31
    39da:	df 93       	push	r29
    39dc:	cf 93       	push	r28
    39de:	cd b7       	in	r28, 0x3d	; 61
    39e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callback_ptr != NULL_PTR)
    39e2:	80 91 41 01 	lds	r24, 0x0141
    39e6:	90 91 42 01 	lds	r25, 0x0142
    39ea:	00 97       	sbiw	r24, 0x00	; 0
    39ec:	29 f0       	breq	.+10     	; 0x39f8 <__vector_9+0x40>
	{
		(*g_callback_ptr)();
    39ee:	e0 91 41 01 	lds	r30, 0x0141
    39f2:	f0 91 42 01 	lds	r31, 0x0142
    39f6:	09 95       	icall
	}
}
    39f8:	cf 91       	pop	r28
    39fa:	df 91       	pop	r29
    39fc:	ff 91       	pop	r31
    39fe:	ef 91       	pop	r30
    3a00:	bf 91       	pop	r27
    3a02:	af 91       	pop	r26
    3a04:	9f 91       	pop	r25
    3a06:	8f 91       	pop	r24
    3a08:	7f 91       	pop	r23
    3a0a:	6f 91       	pop	r22
    3a0c:	5f 91       	pop	r21
    3a0e:	4f 91       	pop	r20
    3a10:	3f 91       	pop	r19
    3a12:	2f 91       	pop	r18
    3a14:	0f 90       	pop	r0
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	0f 90       	pop	r0
    3a1a:	1f 90       	pop	r1
    3a1c:	18 95       	reti

00003a1e <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	00 d0       	rcall	.+0      	; 0x3a24 <Timer1_init+0x6>
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
    3a28:	9a 83       	std	Y+2, r25	; 0x02
    3a2a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Config_Ptr->initial_value;
    3a2c:	ac e4       	ldi	r26, 0x4C	; 76
    3a2e:	b0 e0       	ldi	r27, 0x00	; 0
    3a30:	e9 81       	ldd	r30, Y+1	; 0x01
    3a32:	fa 81       	ldd	r31, Y+2	; 0x02
    3a34:	82 81       	ldd	r24, Z+2	; 0x02
    3a36:	93 81       	ldd	r25, Z+3	; 0x03
    3a38:	11 96       	adiw	r26, 0x01	; 1
    3a3a:	9c 93       	st	X, r25
    3a3c:	8e 93       	st	-X, r24
	OCR1A=Config_Ptr->compare_value;
    3a3e:	aa e4       	ldi	r26, 0x4A	; 74
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	e9 81       	ldd	r30, Y+1	; 0x01
    3a44:	fa 81       	ldd	r31, Y+2	; 0x02
    3a46:	84 81       	ldd	r24, Z+4	; 0x04
    3a48:	95 81       	ldd	r25, Z+5	; 0x05
    3a4a:	11 96       	adiw	r26, 0x01	; 1
    3a4c:	9c 93       	st	X, r25
    3a4e:	8e 93       	st	-X, r24
	TCCR1A= (1<<FOC1A)|(1<<FOC1B);
    3a50:	ef e4       	ldi	r30, 0x4F	; 79
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	8c e0       	ldi	r24, 0x0C	; 12
    3a56:	80 83       	st	Z, r24
	TCCR1B= (0xFF & Config_Ptr->prescaler);
    3a58:	ae e4       	ldi	r26, 0x4E	; 78
    3a5a:	b0 e0       	ldi	r27, 0x00	; 0
    3a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a60:	80 81       	ld	r24, Z
    3a62:	8c 93       	st	X, r24
	if(Config_Ptr->mode==NORMAL)
    3a64:	e9 81       	ldd	r30, Y+1	; 0x01
    3a66:	fa 81       	ldd	r31, Y+2	; 0x02
    3a68:	81 81       	ldd	r24, Z+1	; 0x01
    3a6a:	88 23       	and	r24, r24
    3a6c:	91 f4       	brne	.+36     	; 0x3a92 <Timer1_init+0x74>
	{
		TCCR1A|= (Config_Ptr->mode);
    3a6e:	af e4       	ldi	r26, 0x4F	; 79
    3a70:	b0 e0       	ldi	r27, 0x00	; 0
    3a72:	ef e4       	ldi	r30, 0x4F	; 79
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	90 81       	ld	r25, Z
    3a78:	e9 81       	ldd	r30, Y+1	; 0x01
    3a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a7c:	81 81       	ldd	r24, Z+1	; 0x01
    3a7e:	89 2b       	or	r24, r25
    3a80:	8c 93       	st	X, r24
		TIMSK|= (1<<TOIE1);
    3a82:	a9 e5       	ldi	r26, 0x59	; 89
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	e9 e5       	ldi	r30, 0x59	; 89
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	80 81       	ld	r24, Z
    3a8c:	84 60       	ori	r24, 0x04	; 4
    3a8e:	8c 93       	st	X, r24
    3a90:	13 c0       	rjmp	.+38     	; 0x3ab8 <Timer1_init+0x9a>
	}
	else if(Config_Ptr->mode==CTC)
    3a92:	e9 81       	ldd	r30, Y+1	; 0x01
    3a94:	fa 81       	ldd	r31, Y+2	; 0x02
    3a96:	81 81       	ldd	r24, Z+1	; 0x01
    3a98:	84 30       	cpi	r24, 0x04	; 4
    3a9a:	71 f4       	brne	.+28     	; 0x3ab8 <Timer1_init+0x9a>
	{
		TCCR1B|=(1<<WGM12);
    3a9c:	ae e4       	ldi	r26, 0x4E	; 78
    3a9e:	b0 e0       	ldi	r27, 0x00	; 0
    3aa0:	ee e4       	ldi	r30, 0x4E	; 78
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	80 81       	ld	r24, Z
    3aa6:	88 60       	ori	r24, 0x08	; 8
    3aa8:	8c 93       	st	X, r24
		TIMSK|= (1<<OCIE1A);
    3aaa:	a9 e5       	ldi	r26, 0x59	; 89
    3aac:	b0 e0       	ldi	r27, 0x00	; 0
    3aae:	e9 e5       	ldi	r30, 0x59	; 89
    3ab0:	f0 e0       	ldi	r31, 0x00	; 0
    3ab2:	80 81       	ld	r24, Z
    3ab4:	80 61       	ori	r24, 0x10	; 16
    3ab6:	8c 93       	st	X, r24
	}
}
    3ab8:	0f 90       	pop	r0
    3aba:	0f 90       	pop	r0
    3abc:	cf 91       	pop	r28
    3abe:	df 91       	pop	r29
    3ac0:	08 95       	ret

00003ac2 <Timer1_deInit>:

void Timer1_deInit(void)
{
    3ac2:	df 93       	push	r29
    3ac4:	cf 93       	push	r28
    3ac6:	cd b7       	in	r28, 0x3d	; 61
    3ac8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B= NO_CLK;
    3aca:	ee e4       	ldi	r30, 0x4E	; 78
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	10 82       	st	Z, r1
	TCNT1=0;
    3ad0:	ec e4       	ldi	r30, 0x4C	; 76
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	11 82       	std	Z+1, r1	; 0x01
    3ad6:	10 82       	st	Z, r1
	OCR1A=0;
    3ad8:	ea e4       	ldi	r30, 0x4A	; 74
    3ada:	f0 e0       	ldi	r31, 0x00	; 0
    3adc:	11 82       	std	Z+1, r1	; 0x01
    3ade:	10 82       	st	Z, r1
}
    3ae0:	cf 91       	pop	r28
    3ae2:	df 91       	pop	r29
    3ae4:	08 95       	ret

00003ae6 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    3ae6:	df 93       	push	r29
    3ae8:	cf 93       	push	r28
    3aea:	00 d0       	rcall	.+0      	; 0x3aec <Timer1_setCallBack+0x6>
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
    3af0:	9a 83       	std	Y+2, r25	; 0x02
    3af2:	89 83       	std	Y+1, r24	; 0x01
	g_callback_ptr=a_ptr;
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	9a 81       	ldd	r25, Y+2	; 0x02
    3af8:	90 93 42 01 	sts	0x0142, r25
    3afc:	80 93 41 01 	sts	0x0141, r24
}
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	08 95       	ret

00003b0a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	00 d0       	rcall	.+0      	; 0x3b10 <UART_init+0x6>
    3b10:	00 d0       	rcall	.+0      	; 0x3b12 <UART_init+0x8>
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	9c 83       	std	Y+4, r25	; 0x04
    3b18:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3b1a:	1a 82       	std	Y+2, r1	; 0x02
    3b1c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3b1e:	eb e2       	ldi	r30, 0x2B	; 43
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	82 e0       	ldi	r24, 0x02	; 2
    3b24:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3b26:	ea e2       	ldi	r30, 0x2A	; 42
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	88 e1       	ldi	r24, 0x18	; 24
    3b2c:	80 83       	st	Z, r24
	UCSRB=(UCSRB & 0xFB)|(Config_Ptr->bit_data & 0x04);
    3b2e:	aa e2       	ldi	r26, 0x2A	; 42
    3b30:	b0 e0       	ldi	r27, 0x00	; 0
    3b32:	ea e2       	ldi	r30, 0x2A	; 42
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	80 81       	ld	r24, Z
    3b38:	98 2f       	mov	r25, r24
    3b3a:	9b 7f       	andi	r25, 0xFB	; 251
    3b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b40:	80 81       	ld	r24, Z
    3b42:	84 70       	andi	r24, 0x04	; 4
    3b44:	89 2b       	or	r24, r25
    3b46:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3b48:	e0 e4       	ldi	r30, 0x40	; 64
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	80 e8       	ldi	r24, 0x80	; 128
    3b4e:	80 83       	st	Z, r24
	UCSRC=(UCSRC & 0xCF)|((Config_Ptr->parity & 0x03)<<4);
    3b50:	a0 e4       	ldi	r26, 0x40	; 64
    3b52:	b0 e0       	ldi	r27, 0x00	; 0
    3b54:	e0 e4       	ldi	r30, 0x40	; 64
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	80 81       	ld	r24, Z
    3b5a:	28 2f       	mov	r18, r24
    3b5c:	2f 7c       	andi	r18, 0xCF	; 207
    3b5e:	eb 81       	ldd	r30, Y+3	; 0x03
    3b60:	fc 81       	ldd	r31, Y+4	; 0x04
    3b62:	81 81       	ldd	r24, Z+1	; 0x01
    3b64:	88 2f       	mov	r24, r24
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	83 70       	andi	r24, 0x03	; 3
    3b6a:	90 70       	andi	r25, 0x00	; 0
    3b6c:	82 95       	swap	r24
    3b6e:	92 95       	swap	r25
    3b70:	90 7f       	andi	r25, 0xF0	; 240
    3b72:	98 27       	eor	r25, r24
    3b74:	80 7f       	andi	r24, 0xF0	; 240
    3b76:	98 27       	eor	r25, r24
    3b78:	82 2b       	or	r24, r18
    3b7a:	8c 93       	st	X, r24
	UCSRC=(UCSRC & 0xF7)|((Config_Ptr->stop_bit & 0x01)<<3);
    3b7c:	a0 e4       	ldi	r26, 0x40	; 64
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	e0 e4       	ldi	r30, 0x40	; 64
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	28 2f       	mov	r18, r24
    3b88:	27 7f       	andi	r18, 0xF7	; 247
    3b8a:	eb 81       	ldd	r30, Y+3	; 0x03
    3b8c:	fc 81       	ldd	r31, Y+4	; 0x04
    3b8e:	82 81       	ldd	r24, Z+2	; 0x02
    3b90:	88 2f       	mov	r24, r24
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	81 70       	andi	r24, 0x01	; 1
    3b96:	90 70       	andi	r25, 0x00	; 0
    3b98:	88 0f       	add	r24, r24
    3b9a:	99 1f       	adc	r25, r25
    3b9c:	88 0f       	add	r24, r24
    3b9e:	99 1f       	adc	r25, r25
    3ba0:	88 0f       	add	r24, r24
    3ba2:	99 1f       	adc	r25, r25
    3ba4:	82 2b       	or	r24, r18
    3ba6:	8c 93       	st	X, r24
	UCSRC=(UCSRC & 0xF9)|((Config_Ptr->bit_data & 0x03)<<1);
    3ba8:	a0 e4       	ldi	r26, 0x40	; 64
    3baa:	b0 e0       	ldi	r27, 0x00	; 0
    3bac:	e0 e4       	ldi	r30, 0x40	; 64
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	80 81       	ld	r24, Z
    3bb2:	28 2f       	mov	r18, r24
    3bb4:	29 7f       	andi	r18, 0xF9	; 249
    3bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    3bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    3bba:	80 81       	ld	r24, Z
    3bbc:	88 2f       	mov	r24, r24
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	83 70       	andi	r24, 0x03	; 3
    3bc2:	90 70       	andi	r25, 0x00	; 0
    3bc4:	88 0f       	add	r24, r24
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	82 2b       	or	r24, r18
    3bca:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3bcc:	eb 81       	ldd	r30, Y+3	; 0x03
    3bce:	fc 81       	ldd	r31, Y+4	; 0x04
    3bd0:	83 81       	ldd	r24, Z+3	; 0x03
    3bd2:	94 81       	ldd	r25, Z+4	; 0x04
    3bd4:	a5 81       	ldd	r26, Z+5	; 0x05
    3bd6:	b6 81       	ldd	r27, Z+6	; 0x06
    3bd8:	88 0f       	add	r24, r24
    3bda:	99 1f       	adc	r25, r25
    3bdc:	aa 1f       	adc	r26, r26
    3bde:	bb 1f       	adc	r27, r27
    3be0:	88 0f       	add	r24, r24
    3be2:	99 1f       	adc	r25, r25
    3be4:	aa 1f       	adc	r26, r26
    3be6:	bb 1f       	adc	r27, r27
    3be8:	88 0f       	add	r24, r24
    3bea:	99 1f       	adc	r25, r25
    3bec:	aa 1f       	adc	r26, r26
    3bee:	bb 1f       	adc	r27, r27
    3bf0:	9c 01       	movw	r18, r24
    3bf2:	ad 01       	movw	r20, r26
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	92 e1       	ldi	r25, 0x12	; 18
    3bf8:	aa e7       	ldi	r26, 0x7A	; 122
    3bfa:	b0 e0       	ldi	r27, 0x00	; 0
    3bfc:	bc 01       	movw	r22, r24
    3bfe:	cd 01       	movw	r24, r26
    3c00:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__udivmodsi4>
    3c04:	da 01       	movw	r26, r20
    3c06:	c9 01       	movw	r24, r18
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	9a 83       	std	Y+2, r25	; 0x02
    3c0c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3c0e:	e0 e4       	ldi	r30, 0x40	; 64
    3c10:	f0 e0       	ldi	r31, 0x00	; 0
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	9a 81       	ldd	r25, Y+2	; 0x02
    3c16:	89 2f       	mov	r24, r25
    3c18:	99 27       	eor	r25, r25
    3c1a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3c1c:	e9 e2       	ldi	r30, 0x29	; 41
    3c1e:	f0 e0       	ldi	r31, 0x00	; 0
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
    3c22:	80 83       	st	Z, r24
}
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	08 95       	ret

00003c32 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint16 data)
{
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	00 d0       	rcall	.+0      	; 0x3c38 <UART_sendByte+0x6>
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
    3c3c:	9a 83       	std	Y+2, r25	; 0x02
    3c3e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3c40:	eb e2       	ldi	r30, 0x2B	; 43
    3c42:	f0 e0       	ldi	r31, 0x00	; 0
    3c44:	80 81       	ld	r24, Z
    3c46:	88 2f       	mov	r24, r24
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	80 72       	andi	r24, 0x20	; 32
    3c4c:	90 70       	andi	r25, 0x00	; 0
    3c4e:	00 97       	sbiw	r24, 0x00	; 0
    3c50:	b9 f3       	breq	.-18     	; 0x3c40 <UART_sendByte+0xe>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	if(data & 0x0100)
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	9a 81       	ldd	r25, Y+2	; 0x02
    3c56:	80 70       	andi	r24, 0x00	; 0
    3c58:	91 70       	andi	r25, 0x01	; 1
    3c5a:	00 97       	sbiw	r24, 0x00	; 0
    3c5c:	41 f0       	breq	.+16     	; 0x3c6e <UART_sendByte+0x3c>
	{
		SET_BIT(UCSRB,TXB8);
    3c5e:	aa e2       	ldi	r26, 0x2A	; 42
    3c60:	b0 e0       	ldi	r27, 0x00	; 0
    3c62:	ea e2       	ldi	r30, 0x2A	; 42
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	80 81       	ld	r24, Z
    3c68:	81 60       	ori	r24, 0x01	; 1
    3c6a:	8c 93       	st	X, r24
    3c6c:	07 c0       	rjmp	.+14     	; 0x3c7c <UART_sendByte+0x4a>
	}
	else
	{
		CLEAR_BIT(UCSRB,TXB8);
    3c6e:	aa e2       	ldi	r26, 0x2A	; 42
    3c70:	b0 e0       	ldi	r27, 0x00	; 0
    3c72:	ea e2       	ldi	r30, 0x2A	; 42
    3c74:	f0 e0       	ldi	r31, 0x00	; 0
    3c76:	80 81       	ld	r24, Z
    3c78:	8e 7f       	andi	r24, 0xFE	; 254
    3c7a:	8c 93       	st	X, r24
	}
	UDR = data;
    3c7c:	ec e2       	ldi	r30, 0x2C	; 44
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	89 81       	ldd	r24, Y+1	; 0x01
    3c82:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3c84:	0f 90       	pop	r0
    3c86:	0f 90       	pop	r0
    3c88:	cf 91       	pop	r28
    3c8a:	df 91       	pop	r29
    3c8c:	08 95       	ret

00003c8e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint16 UART_recieveByte(void)
{
    3c8e:	df 93       	push	r29
    3c90:	cf 93       	push	r28
    3c92:	00 d0       	rcall	.+0      	; 0x3c94 <UART_recieveByte+0x6>
    3c94:	cd b7       	in	r28, 0x3d	; 61
    3c96:	de b7       	in	r29, 0x3e	; 62

	uint16 return_data;
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3c98:	eb e2       	ldi	r30, 0x2B	; 43
    3c9a:	f0 e0       	ldi	r31, 0x00	; 0
    3c9c:	80 81       	ld	r24, Z
    3c9e:	88 23       	and	r24, r24
    3ca0:	dc f7       	brge	.-10     	; 0x3c98 <UART_recieveByte+0xa>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return_data=((GET_BIT(UCSRB,RXB8))<<8)|(UDR);
    3ca2:	ea e2       	ldi	r30, 0x2A	; 42
    3ca4:	f0 e0       	ldi	r31, 0x00	; 0
    3ca6:	80 81       	ld	r24, Z
    3ca8:	88 2f       	mov	r24, r24
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	82 70       	andi	r24, 0x02	; 2
    3cae:	90 70       	andi	r25, 0x00	; 0
    3cb0:	95 95       	asr	r25
    3cb2:	87 95       	ror	r24
    3cb4:	38 2f       	mov	r19, r24
    3cb6:	22 27       	eor	r18, r18
    3cb8:	ec e2       	ldi	r30, 0x2C	; 44
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	80 81       	ld	r24, Z
    3cbe:	88 2f       	mov	r24, r24
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	82 2b       	or	r24, r18
    3cc4:	93 2b       	or	r25, r19
    3cc6:	9a 83       	std	Y+2, r25	; 0x02
    3cc8:	89 83       	std	Y+1, r24	; 0x01

    return return_data;
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	cf 91       	pop	r28
    3cd4:	df 91       	pop	r29
    3cd6:	08 95       	ret

00003cd8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3cd8:	df 93       	push	r29
    3cda:	cf 93       	push	r28
    3cdc:	00 d0       	rcall	.+0      	; 0x3cde <UART_sendString+0x6>
    3cde:	0f 92       	push	r0
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62
    3ce4:	9b 83       	std	Y+3, r25	; 0x03
    3ce6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ce8:	19 82       	std	Y+1, r1	; 0x01
    3cea:	10 c0       	rjmp	.+32     	; 0x3d0c <UART_sendString+0x34>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	28 2f       	mov	r18, r24
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	e2 0f       	add	r30, r18
    3cfa:	f3 1f       	adc	r31, r19
    3cfc:	80 81       	ld	r24, Z
    3cfe:	88 2f       	mov	r24, r24
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <UART_sendByte>
		i++;
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	8f 5f       	subi	r24, 0xFF	; 255
    3d0a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	28 2f       	mov	r18, r24
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	8a 81       	ldd	r24, Y+2	; 0x02
    3d14:	9b 81       	ldd	r25, Y+3	; 0x03
    3d16:	fc 01       	movw	r30, r24
    3d18:	e2 0f       	add	r30, r18
    3d1a:	f3 1f       	adc	r31, r19
    3d1c:	80 81       	ld	r24, Z
    3d1e:	88 23       	and	r24, r24
    3d20:	29 f7       	brne	.-54     	; 0x3cec <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	cf 91       	pop	r28
    3d2a:	df 91       	pop	r29
    3d2c:	08 95       	ret

00003d2e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3d2e:	0f 93       	push	r16
    3d30:	1f 93       	push	r17
    3d32:	df 93       	push	r29
    3d34:	cf 93       	push	r28
    3d36:	00 d0       	rcall	.+0      	; 0x3d38 <UART_receiveString+0xa>
    3d38:	0f 92       	push	r0
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	9b 83       	std	Y+3, r25	; 0x03
    3d40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3d42:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	28 2f       	mov	r18, r24
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d4e:	8c 01       	movw	r16, r24
    3d50:	02 0f       	add	r16, r18
    3d52:	13 1f       	adc	r17, r19
    3d54:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <UART_recieveByte>
    3d58:	f8 01       	movw	r30, r16
    3d5a:	80 83       	st	Z, r24
    3d5c:	0f c0       	rjmp	.+30     	; 0x3d7c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
    3d60:	8f 5f       	subi	r24, 0xFF	; 255
    3d62:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	28 2f       	mov	r18, r24
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d6e:	8c 01       	movw	r16, r24
    3d70:	02 0f       	add	r16, r18
    3d72:	13 1f       	adc	r17, r19
    3d74:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <UART_recieveByte>
    3d78:	f8 01       	movw	r30, r16
    3d7a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	28 2f       	mov	r18, r24
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	8a 81       	ldd	r24, Y+2	; 0x02
    3d84:	9b 81       	ldd	r25, Y+3	; 0x03
    3d86:	fc 01       	movw	r30, r24
    3d88:	e2 0f       	add	r30, r18
    3d8a:	f3 1f       	adc	r31, r19
    3d8c:	80 81       	ld	r24, Z
    3d8e:	83 32       	cpi	r24, 0x23	; 35
    3d90:	31 f7       	brne	.-52     	; 0x3d5e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	28 2f       	mov	r18, r24
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	e2 0f       	add	r30, r18
    3da0:	f3 1f       	adc	r31, r19
    3da2:	10 82       	st	Z, r1
}
    3da4:	0f 90       	pop	r0
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	cf 91       	pop	r28
    3dac:	df 91       	pop	r29
    3dae:	1f 91       	pop	r17
    3db0:	0f 91       	pop	r16
    3db2:	08 95       	ret

00003db4 <__mulsi3>:
    3db4:	62 9f       	mul	r22, r18
    3db6:	d0 01       	movw	r26, r0
    3db8:	73 9f       	mul	r23, r19
    3dba:	f0 01       	movw	r30, r0
    3dbc:	82 9f       	mul	r24, r18
    3dbe:	e0 0d       	add	r30, r0
    3dc0:	f1 1d       	adc	r31, r1
    3dc2:	64 9f       	mul	r22, r20
    3dc4:	e0 0d       	add	r30, r0
    3dc6:	f1 1d       	adc	r31, r1
    3dc8:	92 9f       	mul	r25, r18
    3dca:	f0 0d       	add	r31, r0
    3dcc:	83 9f       	mul	r24, r19
    3dce:	f0 0d       	add	r31, r0
    3dd0:	74 9f       	mul	r23, r20
    3dd2:	f0 0d       	add	r31, r0
    3dd4:	65 9f       	mul	r22, r21
    3dd6:	f0 0d       	add	r31, r0
    3dd8:	99 27       	eor	r25, r25
    3dda:	72 9f       	mul	r23, r18
    3ddc:	b0 0d       	add	r27, r0
    3dde:	e1 1d       	adc	r30, r1
    3de0:	f9 1f       	adc	r31, r25
    3de2:	63 9f       	mul	r22, r19
    3de4:	b0 0d       	add	r27, r0
    3de6:	e1 1d       	adc	r30, r1
    3de8:	f9 1f       	adc	r31, r25
    3dea:	bd 01       	movw	r22, r26
    3dec:	cf 01       	movw	r24, r30
    3dee:	11 24       	eor	r1, r1
    3df0:	08 95       	ret

00003df2 <__udivmodsi4>:
    3df2:	a1 e2       	ldi	r26, 0x21	; 33
    3df4:	1a 2e       	mov	r1, r26
    3df6:	aa 1b       	sub	r26, r26
    3df8:	bb 1b       	sub	r27, r27
    3dfa:	fd 01       	movw	r30, r26
    3dfc:	0d c0       	rjmp	.+26     	; 0x3e18 <__udivmodsi4_ep>

00003dfe <__udivmodsi4_loop>:
    3dfe:	aa 1f       	adc	r26, r26
    3e00:	bb 1f       	adc	r27, r27
    3e02:	ee 1f       	adc	r30, r30
    3e04:	ff 1f       	adc	r31, r31
    3e06:	a2 17       	cp	r26, r18
    3e08:	b3 07       	cpc	r27, r19
    3e0a:	e4 07       	cpc	r30, r20
    3e0c:	f5 07       	cpc	r31, r21
    3e0e:	20 f0       	brcs	.+8      	; 0x3e18 <__udivmodsi4_ep>
    3e10:	a2 1b       	sub	r26, r18
    3e12:	b3 0b       	sbc	r27, r19
    3e14:	e4 0b       	sbc	r30, r20
    3e16:	f5 0b       	sbc	r31, r21

00003e18 <__udivmodsi4_ep>:
    3e18:	66 1f       	adc	r22, r22
    3e1a:	77 1f       	adc	r23, r23
    3e1c:	88 1f       	adc	r24, r24
    3e1e:	99 1f       	adc	r25, r25
    3e20:	1a 94       	dec	r1
    3e22:	69 f7       	brne	.-38     	; 0x3dfe <__udivmodsi4_loop>
    3e24:	60 95       	com	r22
    3e26:	70 95       	com	r23
    3e28:	80 95       	com	r24
    3e2a:	90 95       	com	r25
    3e2c:	9b 01       	movw	r18, r22
    3e2e:	ac 01       	movw	r20, r24
    3e30:	bd 01       	movw	r22, r26
    3e32:	cf 01       	movw	r24, r30
    3e34:	08 95       	ret

00003e36 <__divmodsi4>:
    3e36:	97 fb       	bst	r25, 7
    3e38:	09 2e       	mov	r0, r25
    3e3a:	05 26       	eor	r0, r21
    3e3c:	0e d0       	rcall	.+28     	; 0x3e5a <__divmodsi4_neg1>
    3e3e:	57 fd       	sbrc	r21, 7
    3e40:	04 d0       	rcall	.+8      	; 0x3e4a <__divmodsi4_neg2>
    3e42:	d7 df       	rcall	.-82     	; 0x3df2 <__udivmodsi4>
    3e44:	0a d0       	rcall	.+20     	; 0x3e5a <__divmodsi4_neg1>
    3e46:	00 1c       	adc	r0, r0
    3e48:	38 f4       	brcc	.+14     	; 0x3e58 <__divmodsi4_exit>

00003e4a <__divmodsi4_neg2>:
    3e4a:	50 95       	com	r21
    3e4c:	40 95       	com	r20
    3e4e:	30 95       	com	r19
    3e50:	21 95       	neg	r18
    3e52:	3f 4f       	sbci	r19, 0xFF	; 255
    3e54:	4f 4f       	sbci	r20, 0xFF	; 255
    3e56:	5f 4f       	sbci	r21, 0xFF	; 255

00003e58 <__divmodsi4_exit>:
    3e58:	08 95       	ret

00003e5a <__divmodsi4_neg1>:
    3e5a:	f6 f7       	brtc	.-4      	; 0x3e58 <__divmodsi4_exit>
    3e5c:	90 95       	com	r25
    3e5e:	80 95       	com	r24
    3e60:	70 95       	com	r23
    3e62:	61 95       	neg	r22
    3e64:	7f 4f       	sbci	r23, 0xFF	; 255
    3e66:	8f 4f       	sbci	r24, 0xFF	; 255
    3e68:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6a:	08 95       	ret

00003e6c <__prologue_saves__>:
    3e6c:	2f 92       	push	r2
    3e6e:	3f 92       	push	r3
    3e70:	4f 92       	push	r4
    3e72:	5f 92       	push	r5
    3e74:	6f 92       	push	r6
    3e76:	7f 92       	push	r7
    3e78:	8f 92       	push	r8
    3e7a:	9f 92       	push	r9
    3e7c:	af 92       	push	r10
    3e7e:	bf 92       	push	r11
    3e80:	cf 92       	push	r12
    3e82:	df 92       	push	r13
    3e84:	ef 92       	push	r14
    3e86:	ff 92       	push	r15
    3e88:	0f 93       	push	r16
    3e8a:	1f 93       	push	r17
    3e8c:	cf 93       	push	r28
    3e8e:	df 93       	push	r29
    3e90:	cd b7       	in	r28, 0x3d	; 61
    3e92:	de b7       	in	r29, 0x3e	; 62
    3e94:	ca 1b       	sub	r28, r26
    3e96:	db 0b       	sbc	r29, r27
    3e98:	0f b6       	in	r0, 0x3f	; 63
    3e9a:	f8 94       	cli
    3e9c:	de bf       	out	0x3e, r29	; 62
    3e9e:	0f be       	out	0x3f, r0	; 63
    3ea0:	cd bf       	out	0x3d, r28	; 61
    3ea2:	09 94       	ijmp

00003ea4 <__epilogue_restores__>:
    3ea4:	2a 88       	ldd	r2, Y+18	; 0x12
    3ea6:	39 88       	ldd	r3, Y+17	; 0x11
    3ea8:	48 88       	ldd	r4, Y+16	; 0x10
    3eaa:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eac:	6e 84       	ldd	r6, Y+14	; 0x0e
    3eae:	7d 84       	ldd	r7, Y+13	; 0x0d
    3eb0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3eb2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3eb4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3eb6:	b9 84       	ldd	r11, Y+9	; 0x09
    3eb8:	c8 84       	ldd	r12, Y+8	; 0x08
    3eba:	df 80       	ldd	r13, Y+7	; 0x07
    3ebc:	ee 80       	ldd	r14, Y+6	; 0x06
    3ebe:	fd 80       	ldd	r15, Y+5	; 0x05
    3ec0:	0c 81       	ldd	r16, Y+4	; 0x04
    3ec2:	1b 81       	ldd	r17, Y+3	; 0x03
    3ec4:	aa 81       	ldd	r26, Y+2	; 0x02
    3ec6:	b9 81       	ldd	r27, Y+1	; 0x01
    3ec8:	ce 0f       	add	r28, r30
    3eca:	d1 1d       	adc	r29, r1
    3ecc:	0f b6       	in	r0, 0x3f	; 63
    3ece:	f8 94       	cli
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	0f be       	out	0x3f, r0	; 63
    3ed4:	cd bf       	out	0x3d, r28	; 61
    3ed6:	ed 01       	movw	r28, r26
    3ed8:	08 95       	ret

00003eda <itoa>:
    3eda:	fb 01       	movw	r30, r22
    3edc:	9f 01       	movw	r18, r30
    3ede:	e8 94       	clt
    3ee0:	42 30       	cpi	r20, 0x02	; 2
    3ee2:	c4 f0       	brlt	.+48     	; 0x3f14 <itoa+0x3a>
    3ee4:	45 32       	cpi	r20, 0x25	; 37
    3ee6:	b4 f4       	brge	.+44     	; 0x3f14 <itoa+0x3a>
    3ee8:	4a 30       	cpi	r20, 0x0A	; 10
    3eea:	29 f4       	brne	.+10     	; 0x3ef6 <itoa+0x1c>
    3eec:	97 fb       	bst	r25, 7
    3eee:	1e f4       	brtc	.+6      	; 0x3ef6 <itoa+0x1c>
    3ef0:	90 95       	com	r25
    3ef2:	81 95       	neg	r24
    3ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef6:	64 2f       	mov	r22, r20
    3ef8:	77 27       	eor	r23, r23
    3efa:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <__udivmodhi4>
    3efe:	80 5d       	subi	r24, 0xD0	; 208
    3f00:	8a 33       	cpi	r24, 0x3A	; 58
    3f02:	0c f0       	brlt	.+2      	; 0x3f06 <itoa+0x2c>
    3f04:	89 5d       	subi	r24, 0xD9	; 217
    3f06:	81 93       	st	Z+, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	00 97       	sbiw	r24, 0x00	; 0
    3f0c:	a1 f7       	brne	.-24     	; 0x3ef6 <itoa+0x1c>
    3f0e:	16 f4       	brtc	.+4      	; 0x3f14 <itoa+0x3a>
    3f10:	5d e2       	ldi	r21, 0x2D	; 45
    3f12:	51 93       	st	Z+, r21
    3f14:	10 82       	st	Z, r1
    3f16:	c9 01       	movw	r24, r18
    3f18:	0c 94 8e 1f 	jmp	0x3f1c	; 0x3f1c <strrev>

00003f1c <strrev>:
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	fc 01       	movw	r30, r24
    3f20:	67 2f       	mov	r22, r23
    3f22:	71 91       	ld	r23, Z+
    3f24:	77 23       	and	r23, r23
    3f26:	e1 f7       	brne	.-8      	; 0x3f20 <strrev+0x4>
    3f28:	32 97       	sbiw	r30, 0x02	; 2
    3f2a:	04 c0       	rjmp	.+8      	; 0x3f34 <strrev+0x18>
    3f2c:	7c 91       	ld	r23, X
    3f2e:	6d 93       	st	X+, r22
    3f30:	70 83       	st	Z, r23
    3f32:	62 91       	ld	r22, -Z
    3f34:	ae 17       	cp	r26, r30
    3f36:	bf 07       	cpc	r27, r31
    3f38:	c8 f3       	brcs	.-14     	; 0x3f2c <strrev+0x10>
    3f3a:	08 95       	ret

00003f3c <__udivmodhi4>:
    3f3c:	aa 1b       	sub	r26, r26
    3f3e:	bb 1b       	sub	r27, r27
    3f40:	51 e1       	ldi	r21, 0x11	; 17
    3f42:	07 c0       	rjmp	.+14     	; 0x3f52 <__udivmodhi4_ep>

00003f44 <__udivmodhi4_loop>:
    3f44:	aa 1f       	adc	r26, r26
    3f46:	bb 1f       	adc	r27, r27
    3f48:	a6 17       	cp	r26, r22
    3f4a:	b7 07       	cpc	r27, r23
    3f4c:	10 f0       	brcs	.+4      	; 0x3f52 <__udivmodhi4_ep>
    3f4e:	a6 1b       	sub	r26, r22
    3f50:	b7 0b       	sbc	r27, r23

00003f52 <__udivmodhi4_ep>:
    3f52:	88 1f       	adc	r24, r24
    3f54:	99 1f       	adc	r25, r25
    3f56:	5a 95       	dec	r21
    3f58:	a9 f7       	brne	.-22     	; 0x3f44 <__udivmodhi4_loop>
    3f5a:	80 95       	com	r24
    3f5c:	90 95       	com	r25
    3f5e:	bc 01       	movw	r22, r24
    3f60:	cd 01       	movw	r24, r26
    3f62:	08 95       	ret

00003f64 <_exit>:
    3f64:	f8 94       	cli

00003f66 <__stop_program>:
    3f66:	ff cf       	rjmp	.-2      	; 0x3f66 <__stop_program>
